<?xml version="1.0" encoding="UTF-8"?>
<!--
   Phon - An open source tool for research in phonology.
   Copyright (C) 2018 Gregory Hedlund & Yvan Rose
    
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="https://phon.ca/ns/opgraph_query"
           xmlns:og="https://www.phon.ca/ns/opgraph"
           xmlns:qry="http://phon.ling.mun.ca/ns/query" xmlns:rpt="http://phon.ling.mun.ca/ns/report"
           targetNamespace="https://phon.ca/ns/opgraph_query" elementFormDefault="unqualified">

	<xs:import namespace="https://www.phon.ca/ns/opgraph"
		schemaLocation="https://raw.githubusercontent.com/ghedlund/opgraph/master/xml-io/src/main/resources/META-INF/schemas/opgraph.xsd"/>
	<xs:import namespace="http://phon.ling.mun.ca/ns/query"
		schemaLocation="https://raw.githubusercontent.com/phon-ca/phon/master/query/src/main/resources/xml/xsd/query.xsd"/>
	<xs:import namespace="http://phon.ling.mun.ca/ns/report"
		schemaLocation="https://raw.githubusercontent.com/phon-ca/phon/master/query/src/main/resources/xml/xsd/report.xsd"/>
	
	<xs:complexType name="QueryType" mixed="false">
		<xs:annotation>
			<xs:documentation>Extension of opgraph node type to include query xml</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="og:AbstractNodeType">
				<xs:sequence>
					<xs:element ref="qry:query" minOccurs="0" maxOccurs="1"/>
					<xs:element ref="og:extensions" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="queryNode" type="QueryType" substitutionGroup="og:abstract_node"/>

	<!-- Legacy report design node (deprecated) -->
	<xs:complexType name="ReportDesignType" mixed="false">
		<xs:annotation>
			<xs:documentation>Extension of opgraph node type to include report design
				xml</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="og:AbstractNodeType">
				<xs:sequence>
					<xs:element ref="rpt:report-design" minOccurs="0" maxOccurs="1"/>
					<xs:element ref="og:extensions" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="useLastReport" type="xs:boolean" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="reportDesignNode" type="ReportDesignType" substitutionGroup="og:abstract_node"/>

	<!-- Query report node -->
	<xs:complexType name="QueryReportNode" mixed="false">
		<xs:annotation>
			<xs:documentation>Settings for QueryReportNode</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="og:AbstractNodeType">
				<xs:sequence>
					<xs:element ref="og:graph" minOccurs="1" maxOccurs="1"/>
					<xs:element ref="og:extensions" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="queryReportNode" type="QueryReportNode" substitutionGroup="og:abstract_node"/>

	<!-- Ignore Diacritics -->
	<xs:element name="ignoreDiacritics" type="IgnoreDiacriticsType"/>
	
	<xs:complexType name="IgnoreDiacriticsType">
		<xs:simpleContent>
			<xs:annotation>
				<xs:documentation>Should be a ';' separated list of diacritics (if any)</xs:documentation>
			</xs:annotation>
			<xs:extension base="xs:string">
				<xs:attribute name="ignore" type="xs:boolean" default="true"/>
				<xs:attribute name="onlyOrExcept" type="onlyOrExceptType" default="except"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	
	<xs:simpleType name="onlyOrExceptType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="only"/>
			<xs:enumeration value="except"/>
		</xs:restriction>
	</xs:simpleType>

	<!-- SortNodeSettings -->
	<xs:complexType name="SortNodeSettingsType" mixed="false">
		<xs:annotation>
			<xs:documentation>Storage for sort node.</xs:documentation>
		</xs:annotation>
		<xs:complexContent mixed="false">
			<xs:extension base="og:AbstractExtensionType">
				<xs:sequence>
					<xs:element ref="sortBy" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="configureAutomatically" type="xs:boolean" use="optional"/>
				<xs:attribute name="autoSortOrder" type="sortOrderType" use="optional"/>
				<xs:attribute name="likeOnTop" type="xs:boolean" default="false" use="optional">
					<xs:annotation>
						<xs:documentation>If true the column set which has matching values will be placed at the beginning of the sorted rows.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="SortByType" mixed="false">
		<xs:annotation>
			<xs:documentation>Column sorting options</xs:documentation>
		</xs:annotation>
		<xs:attribute name="type" type="sortType" use="required"/>
		<xs:attribute name="column" type="xs:string" use="required"/>
		<xs:attribute name="order" type="sortOrderType" default="ascending"/>
	</xs:complexType>

	<xs:simpleType name="sortType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="plain"/>
			<xs:enumeration value="ipa"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="sortOrderType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="ascending"/>
			<xs:enumeration value="descending"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="sortoptions" type="SortNodeSettingsType" substitutionGroup="og:extension"/>
	<xs:element name="sortBy" type="SortByType"/>

	<xs:complexType name="ColumnInfo">
		<xs:sequence>
			<xs:element ref="ignoreDiacritics" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="column" type="xs:string" use="required"/>
		<xs:attribute name="caseSensitive" type="xs:boolean" default="false"/>
		<xs:attribute name="ignoreDiacritics" type="xs:boolean" default="true">
			<xs:annotation>
				<xs:documentation>Deprecated in Phon 3.1.0</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:element name="groupBy" type="ColumnInfo"/>
	<xs:element name="column" type="ColumnInfo"/>
	<xs:element name="sumColumns" type="ColumnListType"/>

	<xs:complexType name="InventoryOptionsType">
		<xs:complexContent mixed="false">
			<xs:extension base="og:AbstractExtensionType">
				<xs:sequence>
					<xs:element ref="automaticConfiguration" minOccurs="0" maxOccurs="1"/>
					<xs:element ref="groupBy" minOccurs="0" maxOccurs="1"/>
					<xs:element ref="column" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="sumColumns" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="InventoryAutomaticConfigType">
		<xs:sequence>
			<xs:element ref="autoGrouping" minOccurs="1" maxOccurs="1"/>
			<xs:element ref="autoColumns" minOccurs="1" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="configureAutomatically" type="xs:boolean" default="true"/>
	</xs:complexType>

	<xs:complexType name="AutoGroupingType" mixed="false">
		<xs:attribute name="grouping" type="xs:boolean" use="required"/>
		<xs:attribute name="column" type="og:nonEmptyString" use="optional"/>
	</xs:complexType>

	<xs:complexType name="AutoColumnSettingsType" mixed="false">
		<xs:sequence>
			<xs:element ref="ignoreDiacritics" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="ignoreDiacritics" type="xs:boolean" default="false">
			<xs:annotation>
				<xs:documentation>Deprecated in Phon 3.1.0</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="caseSensitive" type="xs:boolean" default="true"/>
		<xs:attribute name="includeAdditionalGroupData" type="xs:boolean" default="false"/>
		<xs:attribute name="includeAdditionalWordData" type="xs:boolean" default="false"/>
		<xs:attribute name="includeMetadata" type="xs:boolean" default="false"/>
	</xs:complexType>

	<xs:element name="inventoryoptions" type="InventoryOptionsType" substitutionGroup="og:extension"/>
	<xs:element name="automaticConfiguration" type="InventoryAutomaticConfigType"/>
	<xs:element name="autoGrouping" type="AutoGroupingType"/>
	<xs:element name="autoColumns" type="AutoColumnSettingsType"/>
	
	<xs:simpleType name="inventoryGroupingType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Session"/>
			<xs:enumeration value="Age"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:complexType name="GlobalParametersType" mixed="false">
		<xs:sequence>
			<xs:element ref="ignoreDiacritics" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="caseSensitive" type="xs:boolean" use="optional"/>
		<xs:attribute name="inventoryGrouping" type="inventoryGroupingType" use="optional"/>
		<xs:attribute name="ignoreDiacritics" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Deprecated in Phon 3.1.0</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	
	<xs:element name="globalparameters" type="GlobalParametersType"/>

	<xs:complexType name="NodeWizardType">
		<xs:complexContent mixed="false">
			<xs:extension base="og:AbstractExtensionType">
				<xs:sequence>
					<xs:element ref="info" maxOccurs="1" minOccurs="0"/>
					<xs:element ref="node" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="optionalNode" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="report-template" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="type" type="og:nonEmptyString" use="required">
					<xs:annotation>
						<xs:documentation>Subclass which much have a constructor which accepts a
							graph as an argument.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="NodeRefType">
		<xs:sequence>
			<xs:element ref="info" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="ref" type="og:nonEmptyString" use="required"/>
		<xs:attribute name="showAsStep" type="xs:boolean" default="false" use="optional"/>
	</xs:complexType>

	<xs:complexType name="OptionalNodeType">
		<xs:attribute name="ref" type="og:nonEmptyString" use="required"/>
		<xs:attribute name="enabled" type="xs:boolean" default="true"/>
	</xs:complexType>

	<xs:complexType name="WizardInfoType">
		<xs:sequence>
			<xs:element ref="message" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
		<xs:attribute name="title" type="xs:string" use="optional"/>
		<xs:attribute name="format" type="WizardInfoMessageFormat" use="optional" default="html"/>
	</xs:complexType>

	<xs:complexType name="ReportTemplateType" mixed="true">
		<xs:attribute name="name" type="xs:string" use="required"/>
	</xs:complexType>

	<xs:simpleType name="WizardInfoMessageFormat">
		<xs:restriction base="xs:string">
			<xs:enumeration value="html"/>
			<xs:enumeration value="markdown"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="SimpleComposerType" mixed="false">
		<xs:complexContent mixed="false">
			<xs:extension base="og:AbstractExtensionType">
				<xs:sequence>
					<xs:element ref="node" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:element name="columnName" type="xs:string"/>
	<xs:complexType name="ColumnListType" mixed="false">
		<xs:sequence>
			<xs:element ref="columnName" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="node" type="NodeRefType"/>
	<xs:element name="optionalNode" type="OptionalNodeType"/>
	<xs:element name="nodewizard" type="NodeWizardType" substitutionGroup="og:extension"/>
	<xs:element name="info" type="WizardInfoType"/>
	<xs:element name="message" type="xs:string"/>
	<xs:element name="report-template" type="ReportTemplateType"/>
	<xs:element name="template" type="xs:string"/>
	<xs:element name="simplecomposer" type="SimpleComposerType" substitutionGroup="og:extension"/>

</xs:schema>
