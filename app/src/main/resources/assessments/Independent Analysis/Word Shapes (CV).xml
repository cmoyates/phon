<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<opgraph xmlns="http://gedge.ca/ns/opgraph" xmlns:nes="https://www.phon.ca/ns/node_editor" xmlns:oga="http://gedge.ca/ns/opgraph-app" xmlns:ogcn="http://gedge.ca/ns/opgraph-common-nodes" xmlns:opqry="https://phon.ca/ns/opgraph_query" xmlns:qry="http://phon.ling.mun.ca/ns/query">
    <graph id="root">
        <node id="5f5b7173" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                </oga:settings>
                <oga:meta x="15" y="15"/>
            </extensions>
        </node>
        <node id="c90db63" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                </oga:settings>
                <oga:meta x="15" y="257"/>
            </extensions>
        </node>
        <opqry:queryNode id="1330154b" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-04-14T07:58:31.269-02:30" name="Phones" uuid="c3c0a5c0-e720-4e1d-938c-af519eeef78f">
                <script>
                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                    <param id="filters.primary.filter">.+</param>
                    <param id="filters.word.searchByWord">true</param>
                </script>
            </qry:query>
            <extensions>
                <oga:settings/>
                <oga:meta x="260" y="15"/>
            </extensions>
        </opqry:queryNode>
        <node id="6b17c4a8a1924395" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
            <extensions>
                <oga:settings>
                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                </oga:settings>
                <oga:meta x="454" y="15"/>
            </extensions>
        </node>
        <node id="fbdb46f3a4254290" name="Add IPA Target CV" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
            <extensions>
                <oga:settings>
                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Target").cvPattern;
}
]]></oga:property>
                    <oga:property key="column"><![CDATA[IPA Target Word Shape]]></oga:property>
                </oga:settings>
                <oga:meta x="629" y="15"/>
            </extensions>
        </node>
        <node id="9746b93b5e02423e" name="Add IPA Actual CV" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
            <extensions>
                <oga:settings>
                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Actual").cvPattern;
}
]]></oga:property>
                    <oga:property key="column"><![CDATA[IPA Actual Word Shape]]></oga:property>
                </oga:settings>
                <oga:meta x="804" y="15"/>
            </extensions>
        </node>
        <ogcn:macro id="220da972" name="Inventory" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="macro220da972">
                <node id="5ebc9d05" name="TableDataSource" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.TableDataSource]]></oga:property>
                            <oga:property key="contextKey"/>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <node id="cf4b67edd0ca46cb" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="IPA Target Word Shape" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="242" y="15"/>
                    </extensions>
                </node>
                <node id="5c515712008c4b6b" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="IPA Actual Word Shape" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="242" y="156"/>
                    </extensions>
                </node>
                <node id="c769877" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="keyColumnName"><![CDATA[Word Shape]]></oga:property>
                            <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                            <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual Word Shape]]></oga:property>
                            <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                            <oga:property key="table1KeyColumn"><![CDATA[IPA Target Word Shape]]></oga:property>
                            <oga:property key="table1ColumnPrefix"/>
                            <oga:property key="table2KeyColumn"><![CDATA[IPA Actual Word Shape]]></oga:property>
                            <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                            <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target Word Shape]]></oga:property>
                            <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                            <oga:property key="table2ColumnPrefix"/>
                            <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                        </oga:settings>
                        <oga:meta x="417" y="15"/>
                    </extensions>
                </node>
                <node id="24f60416" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Word Shape" order="ascending" type="plain"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="592" y="15"/>
                    </extensions>
                </node>
                <node id="321b591f" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="767" y="15">
                            <oga:default for="buffer" type="java.lang.String">Word Shapes (CV)</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="c769877" destField="table2" source="5c515712008c4b6b" sourceField="table"/>
                <link dest="c769877" destField="table1" source="cf4b67edd0ca46cb" sourceField="table"/>
                <link dest="5c515712008c4b6b" destField="table" source="5ebc9d05" sourceField="obj"/>
                <link dest="cf4b67edd0ca46cb" destField="table" source="5ebc9d05" sourceField="obj"/>
                <link dest="24f60416" destField="table" source="c769877" sourceField="table"/>
                <link dest="321b591f" destField="data" source="24f60416" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="5ebc9d05"/>
            <extensions>
                <oga:meta x="979" y="15"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="1e35b413" name="Summary" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="macro1e35b413">
                <node id="51981cdb" type="class:ca.phon.app.opgraph.nodes.query.TokenSummaryNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="caseSensitive"><![CDATA[false]]></oga:property>
                            <oga:property key="ignoreDiacritics"><![CDATA[true]]></oga:property>
                            <oga:property key="columnNames"><![CDATA[IPA Target Word Shape;IPA Actual Word Shape]]></oga:property>
                        </oga:settings>
                        <oga:meta x="1000" y="115"/>
                    </extensions>
                </node>
                <node id="5d85e9db" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="1175" y="115">
                            <oga:default for="buffer" type="java.lang.String">Word Shapes (CV) : Token Summary</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="5d85e9db" destField="data" source="51981cdb" sourceField="table"/>
            </graph>
            <ogcn:published_input field="table" name="table" ref="51981cdb"/>
            <extensions>
                <oga:meta x="979" y="156"/>
            </extensions>
        </ogcn:macro>
        <link dest="fbdb46f3a4254290" destField="table" source="6b17c4a8a1924395" sourceField="table"/>
        <link dest="9746b93b5e02423e" destField="table" source="fbdb46f3a4254290" sourceField="table"/>
        <link dest="1330154b" destField="project" source="5f5b7173" sourceField="obj"/>
        <link dest="1330154b" destField="sessions" source="c90db63" sourceField="obj"/>
        <link dest="6b17c4a8a1924395" destField="project" source="1330154b" sourceField="project"/>
        <link dest="6b17c4a8a1924395" destField="results" source="1330154b" sourceField="results"/>
        <link dest="220da972" destField="obj" source="9746b93b5e02423e" sourceField="table"/>
        <link dest="1e35b413" destField="table" source="9746b93b5e02423e" sourceField="table"/>
        <extensions>
            <opqry:nodewizard type="ca.phon.app.opgraph.assessment.AssessmentWizardExtension">
                <opqry:info title="Introduction">
                    <opqry:message/>
                </opqry:info>
            </opqry:nodewizard>
            <nes:settings type="ca.phon.app.opgraph.assessment.AssessmentOpGraphEditorModel"/>
        </extensions>
    </graph>
</opgraph>
