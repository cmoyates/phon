<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<opgraph xmlns="http://gedge.ca/ns/opgraph" xmlns:nes="https://www.phon.ca/ns/node_editor" xmlns:oga="http://gedge.ca/ns/opgraph-app" xmlns:ogcn="http://gedge.ca/ns/opgraph-common-nodes" xmlns:opqry="https://phon.ca/ns/opgraph_query" xmlns:qry="http://phon.ling.mun.ca/ns/query">
    <graph id="root">
        <node id="7b47168a" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                </oga:settings>
                <oga:meta x="22" y="87"/>
            </extensions>
        </node>
        <node id="31a1819a" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                </oga:settings>
                <oga:meta x="36" y="321"/>
            </extensions>
        </node>
        <ogcn:macro id="50b637af26064344" name="Deletions" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="49753008">
                <node id="4a5aaf3a8da94450" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="15c3542a098a4bca" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="4bd3d36c">
                        <node id="ed7cafff548b4626" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="3e7ff63675554788" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.756-02:30" name="Phones" uuid="042d626b-7d4b-462f-a098-896fccf528b1">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">^$</param>
                            <param id="filters.primary.filter">\w</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="260" y="15"/>
                    </extensions>
                </opqry:queryNode>
                <node id="4feafeea454d4c1d" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="454" y="15"/>
                    </extensions>
                </node>
                <node id="916c5ed0c4c24e53" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="629" y="15"/>
                    </extensions>
                </node>
                <node id="cc16ce904eb1497e" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="260" y="156"/>
                    </extensions>
                </node>
                <node id="347c74693dac4d90" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="435" y="156">
                            <oga:default for="buffer" type="java.lang.String">Deletions</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="3e7ff63675554788" destField="project" source="4a5aaf3a8da94450" sourceField="obj"/>
                <link dest="3e7ff63675554788" destField="sessions" source="15c3542a098a4bca" sourceField="obj"/>
                <link dest="4feafeea454d4c1d" destField="project" source="3e7ff63675554788" sourceField="project"/>
                <link dest="4feafeea454d4c1d" destField="results" source="3e7ff63675554788" sourceField="results"/>
                <link dest="916c5ed0c4c24e53" destField="table" source="4feafeea454d4c1d" sourceField="table"/>
                <link dest="cc16ce904eb1497e" destField="table" source="916c5ed0c4c24e53" sourceField="table"/>
                <link dest="347c74693dac4d90" destField="data" source="cc16ce904eb1497e" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="4a5aaf3a8da94450"/>
            <ogcn:published_input field="obj" name="obj1" ref="15c3542a098a4bca"/>
            <extensions>
                <oga:meta x="374" y="36"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="e8094a6fe5964f7e" name="Epenthesis" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="71be06a1">
                <node id="a67e5f82c83a4f67" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="b72c54d619924260" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="9f22eb0">
                        <node id="83db4887f1d141b3" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="ac75ac1f076a4c8f" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.761-02:30" name="Phones" uuid="e59354c8-fd75-43ab-b7c0-1f44249299e9">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.primary.filter">\w</param>
                            <param id="filters.targetResultFilter.caseSensitive">false</param>
                            <param id="filters.targetResultFilter.exactMatch">true</param>
                            <param id="filters.targetResultFilter.filter">^$</param>
                            <param id="searchTier">IPA Actual</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="260" y="15"/>
                    </extensions>
                </opqry:queryNode>
                <node id="df73306da63647c1" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="454" y="15"/>
                    </extensions>
                </node>
                <node id="bfd99c872592497b" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="629" y="15"/>
                    </extensions>
                </node>
                <node id="ea83b216fc81422d" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="260" y="156"/>
                    </extensions>
                </node>
                <node id="8d268f07100c4d11" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="435" y="156">
                            <oga:default for="buffer" type="java.lang.String">Epenthesis</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="ac75ac1f076a4c8f" destField="project" source="a67e5f82c83a4f67" sourceField="obj"/>
                <link dest="ac75ac1f076a4c8f" destField="sessions" source="b72c54d619924260" sourceField="obj"/>
                <link dest="df73306da63647c1" destField="project" source="ac75ac1f076a4c8f" sourceField="project"/>
                <link dest="df73306da63647c1" destField="results" source="ac75ac1f076a4c8f" sourceField="results"/>
                <link dest="bfd99c872592497b" destField="table" source="df73306da63647c1" sourceField="table"/>
                <link dest="ea83b216fc81422d" destField="table" source="bfd99c872592497b" sourceField="table"/>
                <link dest="8d268f07100c4d11" destField="data" source="ea83b216fc81422d" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="a67e5f82c83a4f67"/>
            <ogcn:published_input field="obj" name="obj1" ref="b72c54d619924260"/>
            <extensions>
                <oga:meta x="491" y="36"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="603f6504" name="Final Consonant Deletion" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="1e249f24">
                <node id="2484e705" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="20a095d8" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="5ce3da97">
                        <node id="3c0fa68b" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="1b30cdc2" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.765-02:30" name="Phones" uuid="101796ed-0f1d-4345-98d0-35f4d7a6c09b">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">^$</param>
                            <param id="filters.primary.filter">\c$</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="260" y="15"/>
                    </extensions>
                </opqry:queryNode>
                <node id="133ead7c" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="454" y="15"/>
                    </extensions>
                </node>
                <node id="15403d77" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="629" y="15"/>
                    </extensions>
                </node>
                <node id="9221a4e" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="260" y="156"/>
                    </extensions>
                </node>
                <node id="7b6a0d38" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="435" y="156">
                            <oga:default for="buffer" type="java.lang.String">Final Consonant Deletions</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="1b30cdc2" destField="project" source="2484e705" sourceField="obj"/>
                <link dest="1b30cdc2" destField="sessions" source="20a095d8" sourceField="obj"/>
                <link dest="133ead7c" destField="project" source="1b30cdc2" sourceField="project"/>
                <link dest="133ead7c" destField="results" source="1b30cdc2" sourceField="results"/>
                <link dest="15403d77" destField="table" source="133ead7c" sourceField="table"/>
                <link dest="9221a4e" destField="table" source="15403d77" sourceField="table"/>
                <link dest="7b6a0d38" destField="data" source="9221a4e" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="2484e705"/>
            <ogcn:published_input field="obj" name="obj1" ref="20a095d8"/>
            <extensions>
                <oga:meta x="608" y="36"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="7d09c22c474a4454" name="Syllable Truncation" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="4482b508">
                <node id="92db1fe0b6b04d71" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="40c6963aaf344737" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="1a8f77b">
                        <node id="e95dd7d7be7949df" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="40c0dc32bf1b41a9" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.768-02:30" name="Phones" uuid="ab145c85-c7c1-4e31-8e40-25220d575a08">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">^$</param>
                            <param id="filters.primary.filter">.+</param>
                            <param id="filters.syllable.searchBySyllable">true</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="298" y="33"/>
                    </extensions>
                </opqry:queryNode>
                <node id="d6bd1a773cd144d6" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="492" y="33"/>
                    </extensions>
                </node>
                <node id="ef3b114d03b54575" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="667" y="33"/>
                    </extensions>
                </node>
                <node id="b286ddf399da4298" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="298" y="174"/>
                    </extensions>
                </node>
                <node id="25f18026c0ba462a" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="473" y="174">
                            <oga:default for="buffer" type="java.lang.String">Syllable Truncation</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="40c0dc32bf1b41a9" destField="project" source="92db1fe0b6b04d71" sourceField="obj"/>
                <link dest="40c0dc32bf1b41a9" destField="sessions" source="40c6963aaf344737" sourceField="obj"/>
                <link dest="d6bd1a773cd144d6" destField="project" source="40c0dc32bf1b41a9" sourceField="project"/>
                <link dest="d6bd1a773cd144d6" destField="results" source="40c0dc32bf1b41a9" sourceField="results"/>
                <link dest="ef3b114d03b54575" destField="table" source="d6bd1a773cd144d6" sourceField="table"/>
                <link dest="b286ddf399da4298" destField="table" source="ef3b114d03b54575" sourceField="table"/>
                <link dest="25f18026c0ba462a" destField="data" source="b286ddf399da4298" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="92db1fe0b6b04d71"/>
            <ogcn:published_input field="obj" name="obj1" ref="40c6963aaf344737"/>
            <extensions>
                <oga:meta x="819" y="36"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="a31a41c4f17244b2" name="Onset Simplification" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="42ec4829">
                <node id="8ed6315064ad4bd2" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="910471f196084666" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="2d8c8ee0">
                        <node id="6b0e708f9840498a" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="ae14e67e043d4350" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.772-02:30" name="Phones" uuid="b79dea7d-7109-4721-9bdf-ff52a0e26c80">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">.?</param>
                            <param id="filters.primary.filter">.:o&lt;2,&gt;</param>
                            <param id="filters.syllable.searchBySyllable">true</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="260" y="15"/>
                    </extensions>
                </opqry:queryNode>
                <node id="dab2b714bb64ecd" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="454" y="15"/>
                    </extensions>
                </node>
                <node id="d7dfbaad12fa4b9b" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="629" y="15"/>
                    </extensions>
                </node>
                <node id="6c18a232681149e3" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="260" y="156"/>
                    </extensions>
                </node>
                <node id="b91001e90c0d4622" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="435" y="156">
                            <oga:default for="buffer" type="java.lang.String">Onset Simplification</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="ae14e67e043d4350" destField="project" source="8ed6315064ad4bd2" sourceField="obj"/>
                <link dest="ae14e67e043d4350" destField="sessions" source="910471f196084666" sourceField="obj"/>
                <link dest="dab2b714bb64ecd" destField="project" source="ae14e67e043d4350" sourceField="project"/>
                <link dest="dab2b714bb64ecd" destField="results" source="ae14e67e043d4350" sourceField="results"/>
                <link dest="d7dfbaad12fa4b9b" destField="table" source="dab2b714bb64ecd" sourceField="table"/>
                <link dest="6c18a232681149e3" destField="table" source="d7dfbaad12fa4b9b" sourceField="table"/>
                <link dest="b91001e90c0d4622" destField="data" source="6c18a232681149e3" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="8ed6315064ad4bd2"/>
            <ogcn:published_input field="obj" name="obj1" ref="910471f196084666"/>
            <extensions>
                <oga:meta x="374" y="149"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="fb04c96b78844746" name="Coda Deletion" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="559c932e">
                <node id="87ef0ac7ea8b4084" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="d26f2b19199b44b1" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="4722c136">
                        <node id="e85af8e24dbf45b6" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="71e0a9c6f7e04dce" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.776-02:30" name="Phones" uuid="05d06ab3-0688-4ac8-b1a5-f9db9e83e445">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">^$</param>
                            <param id="filters.primary.filter">.:c</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="260" y="15"/>
                    </extensions>
                </opqry:queryNode>
                <node id="d0181408733548e3" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="454" y="15"/>
                    </extensions>
                </node>
                <node id="4d29079b3fc3479f" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="629" y="15"/>
                    </extensions>
                </node>
                <node id="b7de6e4dce044ac1" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="260" y="156"/>
                    </extensions>
                </node>
                <node id="28c6ab20336b464b" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="435" y="156">
                            <oga:default for="buffer" type="java.lang.String">Coda Deletions</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="71e0a9c6f7e04dce" destField="project" source="87ef0ac7ea8b4084" sourceField="obj"/>
                <link dest="71e0a9c6f7e04dce" destField="sessions" source="d26f2b19199b44b1" sourceField="obj"/>
                <link dest="d0181408733548e3" destField="project" source="71e0a9c6f7e04dce" sourceField="project"/>
                <link dest="d0181408733548e3" destField="results" source="71e0a9c6f7e04dce" sourceField="results"/>
                <link dest="4d29079b3fc3479f" destField="table" source="d0181408733548e3" sourceField="table"/>
                <link dest="b7de6e4dce044ac1" destField="table" source="4d29079b3fc3479f" sourceField="table"/>
                <link dest="28c6ab20336b464b" destField="data" source="b7de6e4dce044ac1" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="87ef0ac7ea8b4084"/>
            <ogcn:published_input field="obj" name="obj1" ref="d26f2b19199b44b1"/>
            <extensions>
                <oga:meta x="552" y="149"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="744bf020005b4363" name="Stopping" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="54c1006f">
                <node id="1243f39102d34d26" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="345be3a7006e4202" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="36999edf">
                        <node id="dce3b17e066b4177" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="627e72074b7749c3" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.780-02:30" name="Phones" uuid="127321dd-a9ec-4bac-a449-8c6c23b6ba7d">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">{stop}</param>
                            <param id="filters.primary.filter">[{fri,-stop}{cont,-stop}]</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="298" y="33"/>
                    </extensions>
                </opqry:queryNode>
                <node id="6eb9b29cc17a4cb0" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="492" y="33"/>
                    </extensions>
                </node>
                <node id="3f7c2ef5239644a6" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="667" y="33"/>
                    </extensions>
                </node>
                <node id="6c53bc838514e08" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="298" y="174"/>
                    </extensions>
                </node>
                <node id="df0ac7bd985141d4" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="473" y="174">
                            <oga:default for="buffer" type="java.lang.String">Stopping</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="627e72074b7749c3" destField="project" source="1243f39102d34d26" sourceField="obj"/>
                <link dest="627e72074b7749c3" destField="sessions" source="345be3a7006e4202" sourceField="obj"/>
                <link dest="6eb9b29cc17a4cb0" destField="project" source="627e72074b7749c3" sourceField="project"/>
                <link dest="6eb9b29cc17a4cb0" destField="results" source="627e72074b7749c3" sourceField="results"/>
                <link dest="3f7c2ef5239644a6" destField="table" source="6eb9b29cc17a4cb0" sourceField="table"/>
                <link dest="6c53bc838514e08" destField="table" source="3f7c2ef5239644a6" sourceField="table"/>
                <link dest="df0ac7bd985141d4" destField="data" source="6c53bc838514e08" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="1243f39102d34d26"/>
            <ogcn:published_input field="obj" name="obj1" ref="345be3a7006e4202"/>
            <extensions>
                <oga:meta x="397" y="375"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="73000ee3ca4e4b3b" name="Gliding/Vocalication" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="2b4b4a78">
                <node id="b619a163ce7f4b3f" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="a42bbfea07d8431b" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="155fb80f">
                        <node id="fef74eaf54e743b9" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="875b95d3c66a43ca" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.785-02:30" name="Phones" uuid="da661d05-d1a1-4740-aaca-94e561bfc7f8">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">[\g\v]</param>
                            <param id="filters.primary.filter">{liquid}</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="298" y="33"/>
                    </extensions>
                </opqry:queryNode>
                <node id="c97ce7beaea409b" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="492" y="33"/>
                    </extensions>
                </node>
                <node id="50f277b656fe43c2" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="667" y="33"/>
                    </extensions>
                </node>
                <node id="b6660b60017d4b9b" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="298" y="174"/>
                    </extensions>
                </node>
                <node id="74ac99686cef4d1f" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="473" y="174">
                            <oga:default for="buffer" type="java.lang.String">Gliding/Vocalization</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="875b95d3c66a43ca" destField="project" source="b619a163ce7f4b3f" sourceField="obj"/>
                <link dest="875b95d3c66a43ca" destField="sessions" source="a42bbfea07d8431b" sourceField="obj"/>
                <link dest="c97ce7beaea409b" destField="project" source="875b95d3c66a43ca" sourceField="project"/>
                <link dest="c97ce7beaea409b" destField="results" source="875b95d3c66a43ca" sourceField="results"/>
                <link dest="50f277b656fe43c2" destField="table" source="c97ce7beaea409b" sourceField="table"/>
                <link dest="b6660b60017d4b9b" destField="table" source="50f277b656fe43c2" sourceField="table"/>
                <link dest="74ac99686cef4d1f" destField="data" source="b6660b60017d4b9b" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="b619a163ce7f4b3f"/>
            <ogcn:published_input field="obj" name="obj1" ref="a42bbfea07d8431b"/>
            <extensions>
                <oga:meta x="514" y="375"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="351d422f22b549e0" name="Deaffrication" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="48e59cb1">
                <node id="7d221b8d14d44152" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="8efa7e37cce14479" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="713b8058">
                        <node id="651fad018ac2456d" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="342740c822934a37" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.789-02:30" name="Phones" uuid="e71df1ae-4cc2-41c0-8a4a-6cb4bdc14aef">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">{-aff}</param>
                            <param id="filters.primary.filter">{aff}</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="298" y="33"/>
                    </extensions>
                </opqry:queryNode>
                <node id="13951723608d44b4" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="492" y="33"/>
                    </extensions>
                </node>
                <node id="23efb7bd9a4b4dcc" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="667" y="33"/>
                    </extensions>
                </node>
                <node id="c46f0efe41d344e1" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="298" y="174"/>
                    </extensions>
                </node>
                <node id="f3f667097d70497e" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="473" y="174">
                            <oga:default for="buffer" type="java.lang.String">Deaffrication</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="342740c822934a37" destField="project" source="7d221b8d14d44152" sourceField="obj"/>
                <link dest="342740c822934a37" destField="sessions" source="8efa7e37cce14479" sourceField="obj"/>
                <link dest="13951723608d44b4" destField="project" source="342740c822934a37" sourceField="project"/>
                <link dest="13951723608d44b4" destField="results" source="342740c822934a37" sourceField="results"/>
                <link dest="23efb7bd9a4b4dcc" destField="table" source="13951723608d44b4" sourceField="table"/>
                <link dest="c46f0efe41d344e1" destField="table" source="23efb7bd9a4b4dcc" sourceField="table"/>
                <link dest="f3f667097d70497e" destField="data" source="c46f0efe41d344e1" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="7d221b8d14d44152"/>
            <ogcn:published_input field="obj" name="obj1" ref="8efa7e37cce14479"/>
            <extensions>
                <oga:meta x="694" y="375"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="dd1be55ac9cc43ad" name="Velar/Palatal Fronting" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="6322090c">
                <node id="4c1ea2b6392a4ca8" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="286e4e974fc74df7" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="216a58fa">
                        <node id="20fb5f2f5e62449c" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="57a16134e90a44cb" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.792-02:30" name="Phones" uuid="c8a4ab67-73bf-4a6e-9aad-bd65dd98c5a0">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">{cor}</param>
                            <param id="filters.primary.filter">[{velar}{palatal}]</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="298" y="33"/>
                    </extensions>
                </opqry:queryNode>
                <node id="55bf968648134912" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="492" y="33"/>
                    </extensions>
                </node>
                <node id="8fc83475f0c349f8" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="667" y="33"/>
                    </extensions>
                </node>
                <node id="5df434e00f0c40d3" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="298" y="174"/>
                    </extensions>
                </node>
                <node id="e405a13e639c4b49" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="473" y="174">
                            <oga:default for="buffer" type="java.lang.String">Velar/palatal fronting</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="57a16134e90a44cb" destField="project" source="4c1ea2b6392a4ca8" sourceField="obj"/>
                <link dest="57a16134e90a44cb" destField="sessions" source="286e4e974fc74df7" sourceField="obj"/>
                <link dest="55bf968648134912" destField="project" source="57a16134e90a44cb" sourceField="project"/>
                <link dest="55bf968648134912" destField="results" source="57a16134e90a44cb" sourceField="results"/>
                <link dest="8fc83475f0c349f8" destField="table" source="55bf968648134912" sourceField="table"/>
                <link dest="5df434e00f0c40d3" destField="table" source="8fc83475f0c349f8" sourceField="table"/>
                <link dest="e405a13e639c4b49" destField="data" source="5df434e00f0c40d3" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="4c1ea2b6392a4ca8"/>
            <ogcn:published_input field="obj" name="obj1" ref="286e4e974fc74df7"/>
            <extensions>
                <oga:meta x="824" y="375"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="5efb04a55d484ad5" name="Coronal backing" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="73451a6f">
                <node id="63917ee2e8af405a" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="6a3b878c10a47ff" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="71386d9e">
                        <node id="3fced320d7cd4660" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="f055221a9a1a458a" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.796-02:30" name="Phones" uuid="0ea53d00-4660-4021-914c-851613be42d7">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">{velar}</param>
                            <param id="filters.primary.filter">{cor}</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="298" y="33"/>
                    </extensions>
                </opqry:queryNode>
                <node id="d4d969777cf24c65" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="492" y="33"/>
                    </extensions>
                </node>
                <node id="cfc6eafb88c24196" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="667" y="33"/>
                    </extensions>
                </node>
                <node id="5f7ebe9a694145be" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="298" y="174"/>
                    </extensions>
                </node>
                <node id="abc4e81fdeda49e7" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="473" y="174">
                            <oga:default for="buffer" type="java.lang.String">Coronal backing</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="f055221a9a1a458a" destField="project" source="63917ee2e8af405a" sourceField="obj"/>
                <link dest="f055221a9a1a458a" destField="sessions" source="6a3b878c10a47ff" sourceField="obj"/>
                <link dest="d4d969777cf24c65" destField="project" source="f055221a9a1a458a" sourceField="project"/>
                <link dest="d4d969777cf24c65" destField="results" source="f055221a9a1a458a" sourceField="results"/>
                <link dest="cfc6eafb88c24196" destField="table" source="d4d969777cf24c65" sourceField="table"/>
                <link dest="5f7ebe9a694145be" destField="table" source="cfc6eafb88c24196" sourceField="table"/>
                <link dest="abc4e81fdeda49e7" destField="data" source="5f7ebe9a694145be" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="63917ee2e8af405a"/>
            <ogcn:published_input field="obj" name="obj1" ref="6a3b878c10a47ff"/>
            <extensions>
                <oga:meta x="397" y="516"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="17e14f63f8d44811" name="Voicing/Devoicing" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="41caf20a">
                <node id="1e3c5a895a1e4e70" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"/>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="9e809a7f58a47e0" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="25aee46f">
                        <node id="a774e1b826494c8a" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="6e77f331" name="Voiceless -&gt; Voiced" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="macro6e77f331">
                        <opqry:queryNode id="298300fa03fd46f3" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.801-02:30" name="Phones" uuid="07339979-bef7-43a7-afe3-056a63e11291">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.actualResultFilter.caseSensitive">false</param>
                                    <param id="filters.actualResultFilter.exactMatch">true</param>
                                    <param id="filters.actualResultFilter.filter">{voiced}</param>
                                    <param id="filters.primary.filter">{voiceless}</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="298" y="33"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="ec56796be4ca4643" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="492" y="33"/>
                            </extensions>
                        </node>
                        <node id="e03ae9cbf98e423c" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="667" y="33"/>
                            </extensions>
                        </node>
                        <link dest="ec56796be4ca4643" destField="results" source="298300fa03fd46f3" sourceField="results"/>
                        <link dest="ec56796be4ca4643" destField="project" source="298300fa03fd46f3" sourceField="project"/>
                        <link dest="e03ae9cbf98e423c" destField="table" source="ec56796be4ca4643" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="298300fa03fd46f3"/>
                    <ogcn:published_input field="project" name="project" ref="298300fa03fd46f3"/>
                    <ogcn:published_output field="table" name="table" ref="e03ae9cbf98e423c"/>
                    <extensions>
                        <oga:meta x="401" y="42"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="68bbdbe1ed1048ce" name="Voiced -&gt; Voiceless" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="5f32b5f3">
                        <opqry:queryNode id="7b833bc21b8d47fa" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.805-02:30" name="Phones" uuid="cdd0dfe6-3142-46be-8a1d-1d8ceb01baee">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.actualResultFilter.caseSensitive">false</param>
                                    <param id="filters.actualResultFilter.exactMatch">true</param>
                                    <param id="filters.actualResultFilter.filter">{voiced}</param>
                                    <param id="filters.primary.filter">{voiceless}</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="298" y="33"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="112ca0dbcf4d4535" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="492" y="33"/>
                            </extensions>
                        </node>
                        <node id="632b44fb09844c03" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="667" y="33"/>
                            </extensions>
                        </node>
                        <link dest="112ca0dbcf4d4535" destField="results" source="7b833bc21b8d47fa" sourceField="results"/>
                        <link dest="112ca0dbcf4d4535" destField="project" source="7b833bc21b8d47fa" sourceField="project"/>
                        <link dest="632b44fb09844c03" destField="table" source="112ca0dbcf4d4535" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="7b833bc21b8d47fa"/>
                    <ogcn:published_input field="project" name="project" ref="7b833bc21b8d47fa"/>
                    <ogcn:published_output field="table" name="table" ref="632b44fb09844c03"/>
                    <extensions>
                        <oga:meta x="405" y="177"/>
                    </extensions>
                </ogcn:macro>
                <node id="b3a42b9" type="class:ca.phon.app.opgraph.nodes.query.AppendTableNode">
                    <extensions>
                        <oga:meta x="243" y="327"/>
                    </extensions>
                </node>
                <node id="fc4efb2333ff4eec" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="474" y="340"/>
                    </extensions>
                </node>
                <node id="833a92882b794594" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="649" y="340">
                            <oga:default for="buffer" type="java.lang.String">Voicing/devoicing</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="833a92882b794594" destField="data" source="fc4efb2333ff4eec" sourceField="table"/>
                <link dest="6e77f331" destField="sessions" source="9e809a7f58a47e0" sourceField="obj"/>
                <link dest="6e77f331" destField="project" source="1e3c5a895a1e4e70" sourceField="obj"/>
                <link dest="68bbdbe1ed1048ce" destField="project" source="1e3c5a895a1e4e70" sourceField="obj"/>
                <link dest="68bbdbe1ed1048ce" destField="sessions" source="9e809a7f58a47e0" sourceField="obj"/>
                <link dest="b3a42b9" destField="table1" source="6e77f331" sourceField="table"/>
                <link dest="b3a42b9" destField="table2" source="68bbdbe1ed1048ce" sourceField="table"/>
                <link dest="fc4efb2333ff4eec" destField="table" source="b3a42b9" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="1e3c5a895a1e4e70"/>
            <ogcn:published_input field="obj" name="obj1" ref="9e809a7f58a47e0"/>
            <extensions>
                <oga:meta x="550" y="516"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="c07389d28eed4bc6" name="Glottalization" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="149c89f9">
                <node id="a848caaac5a64d19" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="b47e1b80f12f4e3d" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="3d4ce9e9">
                        <node id="1b05ad9d6c4e4a8c" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="6d346c0e996840de" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.809-02:30" name="Phones" uuid="e9e2535f-f81e-49a5-8496-45cf104d9c96">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">{glottal}</param>
                            <param id="filters.primary.filter">{-glottal}</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="298" y="33"/>
                    </extensions>
                </opqry:queryNode>
                <node id="8121620b24904e22" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="492" y="33"/>
                    </extensions>
                </node>
                <node id="c0c9446ff4934999" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="667" y="33"/>
                    </extensions>
                </node>
                <node id="3a208fb10eb846d4" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="298" y="174"/>
                    </extensions>
                </node>
                <node id="e1b34dbb7c3a405c" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="473" y="174">
                            <oga:default for="buffer" type="java.lang.String">Glottalization</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="6d346c0e996840de" destField="project" source="a848caaac5a64d19" sourceField="obj"/>
                <link dest="6d346c0e996840de" destField="sessions" source="b47e1b80f12f4e3d" sourceField="obj"/>
                <link dest="8121620b24904e22" destField="project" source="6d346c0e996840de" sourceField="project"/>
                <link dest="8121620b24904e22" destField="results" source="6d346c0e996840de" sourceField="results"/>
                <link dest="c0c9446ff4934999" destField="table" source="8121620b24904e22" sourceField="table"/>
                <link dest="3a208fb10eb846d4" destField="table" source="c0c9446ff4934999" sourceField="table"/>
                <link dest="e1b34dbb7c3a405c" destField="data" source="3a208fb10eb846d4" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="a848caaac5a64d19"/>
            <ogcn:published_input field="obj" name="obj1" ref="b47e1b80f12f4e3d"/>
            <extensions>
                <oga:meta x="717" y="516"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="66c4d5188f384a47" name="Lateralization" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="104cecd1">
                <node id="72e0721bb18b4db9" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="6e60f66bf23d44ae" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                    <graph id="5f098ed">
                        <node id="99b773cf6f4044e6" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                            </extensions>
                        </node>
                    </graph>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="297"/>
                    </extensions>
                </ogcn:macro>
                <opqry:queryNode id="fe209f5d7bd64904" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-06T10:23:35.813-02:30" name="Phones" uuid="e994be9a-d576-415a-83c1-c87302fc03d5">
                        <script>
                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                            <param id="filters.actualResultFilter.caseSensitive">false</param>
                            <param id="filters.actualResultFilter.exactMatch">true</param>
                            <param id="filters.actualResultFilter.filter">{lat}</param>
                            <param id="filters.primary.filter">{-lat}</param>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="298" y="33"/>
                    </extensions>
                </opqry:queryNode>
                <node id="ec1df180b3674112" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="492" y="33"/>
                    </extensions>
                </node>
                <node id="24b85935e4c34ff7" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="667" y="33"/>
                    </extensions>
                </node>
                <node id="142be3350d264056" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="298" y="174"/>
                    </extensions>
                </node>
                <node id="679b4e403cbe4671" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="473" y="174">
                            <oga:default for="buffer" type="java.lang.String">Lateralization</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="fe209f5d7bd64904" destField="project" source="72e0721bb18b4db9" sourceField="obj"/>
                <link dest="fe209f5d7bd64904" destField="sessions" source="6e60f66bf23d44ae" sourceField="obj"/>
                <link dest="ec1df180b3674112" destField="project" source="fe209f5d7bd64904" sourceField="project"/>
                <link dest="ec1df180b3674112" destField="results" source="fe209f5d7bd64904" sourceField="results"/>
                <link dest="24b85935e4c34ff7" destField="table" source="ec1df180b3674112" sourceField="table"/>
                <link dest="142be3350d264056" destField="table" source="24b85935e4c34ff7" sourceField="table"/>
                <link dest="679b4e403cbe4671" destField="data" source="142be3350d264056" sourceField="table"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="72e0721bb18b4db9"/>
            <ogcn:published_input field="obj" name="obj1" ref="6e60f66bf23d44ae"/>
            <extensions>
                <oga:meta x="850" y="516"/>
            </extensions>
        </ogcn:macro>
        <link dest="603f6504" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="603f6504" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="7d09c22c474a4454" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="7d09c22c474a4454" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="744bf020005b4363" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="744bf020005b4363" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="73000ee3ca4e4b3b" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="351d422f22b549e0" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="351d422f22b549e0" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="73000ee3ca4e4b3b" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="dd1be55ac9cc43ad" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="dd1be55ac9cc43ad" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="5efb04a55d484ad5" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="5efb04a55d484ad5" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="17e14f63f8d44811" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="17e14f63f8d44811" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="c07389d28eed4bc6" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="66c4d5188f384a47" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="66c4d5188f384a47" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="c07389d28eed4bc6" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="50b637af26064344" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="e8094a6fe5964f7e" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="e8094a6fe5964f7e" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="50b637af26064344" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="a31a41c4f17244b2" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="a31a41c4f17244b2" destField="obj1" source="31a1819a" sourceField="obj"/>
        <link dest="fb04c96b78844746" destField="obj" source="7b47168a" sourceField="obj"/>
        <link dest="fb04c96b78844746" destField="obj1" source="31a1819a" sourceField="obj"/>
        <extensions>
            <opqry:nodewizard type="ca.phon.app.opgraph.assessment.AssessmentWizardExtension">
                <opqry:info title="Khan-Lewis Phonological Analysis">
                    <opqry:message/>
                </opqry:info>
            </opqry:nodewizard>
            <nes:settings type="ca.phon.app.opgraph.assessment.AssessmentOpGraphEditorModel"/>
            <oga:notes>
                <oga:note color="0xffff96" height="268" title="Deletions/Epenthesis" width="677" x="350" y="0"/>
                <oga:note color="0x96ff96" height="372" title="                                                                                                                                    Feature Changes" width="679" x="350" y="285"/>
            </oga:notes>
        </extensions>
    </graph>
</opgraph>
