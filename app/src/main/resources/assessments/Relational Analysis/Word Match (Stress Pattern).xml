<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<opgraph xmlns="http://gedge.ca/ns/opgraph" xmlns:nes="https://www.phon.ca/ns/node_editor" xmlns:oga="http://gedge.ca/ns/opgraph-app" xmlns:ogcn="http://gedge.ca/ns/opgraph-common-nodes" xmlns:opqry="https://phon.ca/ns/opgraph_query" xmlns:qry="http://phon.ling.mun.ca/ns/query">
    <graph id="root">
        <node id="1bb61e7" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                </oga:settings>
                <oga:meta x="15" y="15"/>
            </extensions>
        </node>
        <node id="63b8b9fb" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                </oga:settings>
                <oga:meta x="90" y="257"/>
            </extensions>
        </node>
        <opqry:queryNode id="7a0b4a76" name="Query : Word List" type="ca.phon.app.opgraph.nodes.query.QueryNode">
            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-02T07:48:18.860-02:30" name="Word List" uuid="ac2dcf56-440c-445c-8548-1b03579057c5">
                <script>
                    <source>/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2015, Gregory Hedlund &lt;ghedlund@mun.ca&gt; and Yvan Rose &lt;yrose@mun.ca&gt;
 * Dept of Linguistics, Memorial University &lt;https://phon.ca&gt;
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */
/**
 * Create a listing of aligned words from the Orthography/IPA Target/IPA Actual
 * tiers.
 */

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;

var filters = {
		"group": new GroupFilter("filters.group"),
		"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
		"word": new WordFilter("filters.word"),
		"alignedWord": new AlignedWordFilter("filters.alignedWord"),
		"speaker": new ParticipantFilter("filters.speaker")
};

var session;

function begin_search(s) {
	session = s;
}

function setup_params(params) {
	filters.group.param_setup(params);
	var sep = new LabelScriptParam("", "Aligned Group Filter");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.searchByWordEnabled = false;
	filters.word.param_setup(params);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);

	filters.speaker.param_setup(params);
}

function query_record(recordIndex, record) {
	if(!filters.speaker.check_speaker(record.speaker)) return;
    
	var searchObjects = filters.group.getRequestedGroups(record);
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    searchObjects = filters.alignedGroup.filter_groups(record, searchObjects);
	}
	
	for(var gIdx = 0; gIdx &lt; searchObjects.length; gIdx++) {
		var group = searchObjects[gIdx];
		
		// use 'IPA Target' as our source tier
		var words = filters.word.getRequestedWords(group, "IPA Target");
		
		for(var wIdx = 0; wIdx &lt; words.length; wIdx++) {
			var word = words[wIdx];
			var ortho = word.orthography || new Orthography();
			var ipaT = word.IPATarget || new IPATranscript();
			var ipaA = word.IPAActual || new IPATranscript();
			
			var result = factory.createResult();
			result.schema = "ALIGNED";
			result.recordIndex = recordIndex;
			
			var rv1 = factory.createResultValue();
			rv1.tierName = "Orthography";
	    	rv1.groupIndex = gIdx;
	    	var startIndex = (ortho.toString().length() &gt; 0 ? word.getOrthographyWordLocation() : 0);
	    	var endIndex = startIndex + ortho.toString().length();
	    	rv1.range = new Range(startIndex, endIndex, false);
	    	rv1.data = ortho;
	    	result.addResultValue(rv1);
	    	
	    	var rvt = factory.createResultValue();
		    rvt.tierName = "IPA Target";
	    	rvt.groupIndex = gIdx;
	    	var startIndex = (ipaT.length() &gt; 0 ? word.getIPATargetWordLocation() : 0);
	    	var endIndex = startIndex + ipaT.toString().length();
	    	rvt.range = new Range(startIndex, endIndex, false);
	    	rvt.data = ipaT;
	    	result.addResultValue(rvt);
	    	
	    	var rva = factory.createResultValue();
	    	rva.tierName = "IPA Actual";
	    	rva.groupIndex = gIdx;
	    	startIndex = (ipaA.length() &gt; 0 ? word.getIPAActualWordLocation() : 0);
	    	endIndex = startIndex + ipaA.toString().length();
	    	rva.range = new Range(startIndex, endIndex, false);
	    	rva.data = ipaA;
	        result.addResultValue(rva);
	        
	        results.addResult(result);
		}
	}
}
</source>
                </script>
            </qry:query>
            <extensions>
                <oga:settings/>
                <oga:meta x="260" y="15"/>
            </extensions>
        </opqry:queryNode>
        <node id="51ac780" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
            <extensions>
                <oga:settings>
                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                </oga:settings>
                <oga:meta x="454" y="15"/>
            </extensions>
        </node>
        <node id="725d6d047f64438" name="Add IPA Target Stress Pattern" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
            <extensions>
                <oga:settings>
                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Target").stressPattern;
}
]]></oga:property>
                    <oga:property key="column"><![CDATA[IPA Target Stress Pattern]]></oga:property>
                </oga:settings>
                <oga:meta x="301" y="167"/>
            </extensions>
        </node>
        <node id="5793c6ebde704204" name="Add IPA Actual Stress Pattern" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
            <extensions>
                <oga:settings>
                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Actual").stressPattern;
}
]]></oga:property>
                    <oga:property key="column"><![CDATA[IPA Actual Stress Pattern]]></oga:property>
                </oga:settings>
                <oga:meta x="544" y="167"/>
            </extensions>
        </node>
        <node id="50d7ca63" type="class:ca.phon.app.opgraph.nodes.query.PartitionTableNode">
            <extensions>
                <oga:settings>
                    <oga:property key="__script"><![CDATA[function filterRow(table, row) {
	return table.getValueAt(row, "IPA Target Stress Pattern") == table.getValueAt(row, "IPA Actual Stress Pattern");
}
]]></oga:property>
                </oga:settings>
                <oga:meta x="329" y="290"/>
            </extensions>
        </node>
        <ogcn:macro id="77833f62" name="Word Stress Pattern Matches" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="1671efcf">
                <node id="8bea496" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="IPA Target Stress Pattern" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="IPA Actual Stress Pattern" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="511" y="380"/>
                    </extensions>
                </node>
                <node id="4e58bd63" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="IPA Target Stress Pattern" order="ascending" type="plain"/>
                            <opqry:sortBy column="IPA Actual Stress Pattern" order="ascending" type="plain"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="677" y="381"/>
                    </extensions>
                </node>
                <node id="7221de2e" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="702" y="477">
                            <oga:default for="buffer" type="java.lang.String">Word Stress Pattern Matches</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="7221de2e" destField="data" source="4e58bd63" sourceField="table"/>
                <link dest="4e58bd63" destField="table" source="8bea496" sourceField="table"/>
            </graph>
            <ogcn:published_input field="table" name="table" ref="8bea496"/>
            <extensions>
                <oga:meta x="536" y="291"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="5fbdf5b91e4448d7" name="Word Stress Pattern Mis-matches" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="67839963">
                <node id="b2acf9baaf9948b6" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                    <extensions>
                        <opqry:inventoryoptions>
                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="IPA Target Stress Pattern" ignoreDiacritics="true"/>
                            <opqry:column caseSensitive="false" column="IPA Actual Stress Pattern" ignoreDiacritics="true"/>
                        </opqry:inventoryoptions>
                        <oga:settings/>
                        <oga:meta x="511" y="380"/>
                    </extensions>
                </node>
                <node id="79eab4eb0cb04b99" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                    <extensions>
                        <opqry:sortoptions>
                            <opqry:sortBy column="IPA Target Stress Pattern" order="ascending" type="plain"/>
                            <opqry:sortBy column="IPA Actual Stress Pattern" order="ascending" type="plain"/>
                        </opqry:sortoptions>
                        <oga:settings/>
                        <oga:meta x="677" y="381"/>
                    </extensions>
                </node>
                <node id="605fb1c0d0a14514" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="702" y="483">
                            <oga:default for="buffer" type="java.lang.String">Word Stress Pattern Mis-matches</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <link dest="605fb1c0d0a14514" destField="data" source="79eab4eb0cb04b99" sourceField="table"/>
                <link dest="79eab4eb0cb04b99" destField="table" source="b2acf9baaf9948b6" sourceField="table"/>
            </graph>
            <ogcn:published_input field="table" name="table" ref="b2acf9baaf9948b6"/>
            <extensions>
                <oga:meta x="531" y="399"/>
            </extensions>
        </ogcn:macro>
        <link dest="7a0b4a76" destField="project" source="1bb61e7" sourceField="obj"/>
        <link dest="7a0b4a76" destField="sessions" source="63b8b9fb" sourceField="obj"/>
        <link dest="51ac780" destField="project" source="7a0b4a76" sourceField="project"/>
        <link dest="51ac780" destField="results" source="7a0b4a76" sourceField="results"/>
        <link dest="77833f62" destField="table" source="50d7ca63" sourceField="trueTable"/>
        <link dest="5fbdf5b91e4448d7" destField="table" source="50d7ca63" sourceField="falseTable"/>
        <link dest="5793c6ebde704204" destField="table" source="725d6d047f64438" sourceField="table"/>
        <link dest="725d6d047f64438" destField="table" source="51ac780" sourceField="table"/>
        <link dest="50d7ca63" destField="table" source="5793c6ebde704204" sourceField="table"/>
        <extensions>
            <opqry:nodewizard type="ca.phon.app.opgraph.assessment.AssessmentWizardExtension">
                <opqry:info title="Word Match (CV)">
                    <opqry:message/>
                </opqry:info>
            </opqry:nodewizard>
            <nes:settings type="ca.phon.app.opgraph.assessment.AssessmentOpGraphEditorModel"/>
        </extensions>
    </graph>
</opgraph>
