<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<opgraph xmlns="http://gedge.ca/ns/opgraph" xmlns:nes="https://www.phon.ca/ns/node_editor" xmlns:oga="http://gedge.ca/ns/opgraph-app" xmlns:ogcn="http://gedge.ca/ns/opgraph-common-nodes" xmlns:opqry="https://phon.ca/ns/opgraph_query" xmlns:qry="http://phon.ling.mun.ca/ns/query">
    <graph id="root">
        <node id="7c7c9211dd474b5b" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                </oga:settings>
                <oga:meta x="27" y="24"/>
            </extensions>
        </node>
        <node id="e620abbc246b44ee" name="Selected Sessions" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                </oga:settings>
                <oga:meta x="108" y="275"/>
            </extensions>
        </node>
        <node id="3d333a88c3c5409e" name="Selected Participants" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_selectedParticipants]]></oga:property>
                </oga:settings>
                <oga:meta x="82" y="394"/>
            </extensions>
        </node>
        <opqry:queryNode id="a140c854b71847c3" name="Query: PCC/PVC" type="ca.phon.app.opgraph.nodes.query.QueryNode">
            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2017-02-28T09:34:55.635-03:30" name="Query: PMLU" uuid="2b4c4e50-fccf-4fa6-b099-fd0617e23544">
                <script>
                    <source>/*
params = {separator, "Information", false},
			{label, "&lt;html&gt;&lt;p&gt;This script calculates PCC/PVC (percent consonants/vowels correct)&lt;br/&gt; for each group in the selected sessions.&lt;/p&gt;&lt;/html&gt;", ""},
			{label, "&lt;html&gt;&lt;br/&gt;&lt;p&gt;Results are reported as:&lt;br/&gt;&amp;lt;# correct&amp;gt;/&amp;lt;# attempted&amp;gt;;&amp;lt;# deleted&amp;gt;;&amp;lt;# epenthesized&amp;gt;&lt;/p&gt;&lt;/html&gt;", ""}
        ;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var PccOptions = require("lib/Pcc").PccOptions;
var Pcc = require("lib/Pcc").Pcc;

var ignoreTruncatedParamInfo = {
	"id": "ignoreTruncated",
	"desc": "Ignore truncated words",
	"title": "",
	"def": true
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

var pccOptions = {
    "standard": new PccOptions("pccOptions.standard"),
    "aligned": new PccOptions("pccOptions.aligned")
};

var filters = {
	"group": new GroupFilter("filters.group"),
	"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
	"word": new WordFilter("filters.word"),
	"alignedWord": new AlignedWordFilter("filters.alignedWord"),
	"speaker": new ParticipantFilter("filters.speaker")
};

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}

function setup_params(params) {
    var sep = new SeparatorScriptParam("PCC/PVC Options", false);
    params.add(sep);
    
    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    pccOptions.standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	pccOptions.aligned.param_setup(params);
	
	filters.group.param_setup(params);
	var sep = new LabelScriptParam("", "Aligned Group Filter");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.searchByWordEnabled = false;
	filters.word.param_setup(params);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);

	filters.speaker.param_setup(params);
}

/********************************
 * query_record (required)
 *
 * Called for each record in a session.
 * Perform search operations here.
 *
 * params:
 *	record - current record
 * returns:
 *	void
 *******************************/
function query_record(recordIndex, record)
{
	if(!filters.speaker.check_speaker(record.speaker)) return;
    
	var searchObjects = filters.group.getRequestedGroups(record);
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    searchObjects = filters.alignedGroup.filter_groups(record, searchObjects);
	}
	
	for(var gIdx = 0; gIdx &lt; searchObjects.length; gIdx++) {
		var group = searchObjects[gIdx];
		var words = filters.word.getRequestedWords(group, "IPA Target");
		
		for(var wIdx = 0; wIdx &lt; words.length; wIdx++) {
			var word = words[wIdx];
			if(filters.alignedWord.isUseFilter()) {
				var alignedWord = word.getTier(filters.alignedWord.tierName);
				if(!filters.alignedWord.patternFilter.check_filter(alignedWord)) continue;
			}
			
			if(ignoreTruncated &amp;&amp; word.getIPAActual() == null || word.getIPAActual().length() == 0) {
				continue;
			}
			
		    var ipaT = (word.getIPATarget() != null ? word.getIPATarget() : new IPATranscript());
		    var ipaA = (word.getIPAActual() != null ? word.getIPAActual() : new IPATranscript());
		    
		    var result = factory.createResult();
		    result.schema = "ALIGNED";
		    result.recordIndex = recordIndex;
		    
		    var rvt = factory.createResultValue();
		    rvt.tierName = "IPA Target";
	    	rvt.groupIndex = gIdx;
	    	var startIndex = word.getIPATargetWordLocation();
	    	var endIndex = startIndex + ipaT.toString().length();
	    	rvt.range = new Range(startIndex, endIndex, false);
	    	rvt.data = ipaT;
	    	result.addResultValue(rvt);
	    	
	    	var rva = factory.createResultValue();
	    	rva.tierName = "IPA Actual";
	    	rva.groupIndex = gIdx;
	    	startIndex = word.getIPAActualWordLocation();
	    	endIndex = startIndex + ipaA.toString().length();
	    	rva.range = new Range(startIndex, endIndex, false);
	    	rva.data = ipaA;
	        result.addResultValue(rva);
		    
		    var metadata = result.metadata;
		    
		    // exclude values which bias results. 
		    // (e.g., all-vowel words such as 'eau' in French when looking only at PCC)
		    if( (pccOptions.standard.includePcc == true || pccOptions.aligned.includePcc == true)
		    		&amp;&amp; (pccOptions.standard.includePvc == false &amp;&amp; pccOptions.aligned.includePvc == false)
		    		&amp;&amp; ipaT.indexOf("\\c") &lt; 0) {
		    	continue;
		    }
		    if( (pccOptions.standard.includePcc == false &amp;&amp; pccOptions.aligned.includePcc == false)
		    		&amp;&amp; (pccOptions.standard.includePvc == true || pccOptions.aligned.includePvc == true)
		    		&amp;&amp; ipaT.indexOf("\\v") &lt; 0) {
		    	continue;
		    }
		    
		    pccOptions.standard.setup_pcc_standard_metadata(word, metadata);
		    pccOptions.aligned.setup_pcc_aligned_metadata(word, metadata);
		    
		    results.addResult(result);
		}
	}
}
</source>
                    <param id="pccOptions.standard.includePcc">true</param>
                </script>
            </qry:query>
            <extensions>
                <oga:settings/>
                <oga:meta x="306" y="114"/>
            </extensions>
        </opqry:queryNode>
        <node id="958f8e5efe7f4aea" type="class:ca.phon.app.opgraph.nodes.table.ResultsToTableNode">
            <extensions>
                <oga:settings>
                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                </oga:settings>
                <oga:meta x="507" y="114"/>
            </extensions>
        </node>
        <node id="fe1de4c94570478d" name="Split Table by Speaker" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
            <output name="keySet" type="java.util.Set">Unique values from given column name</output>
            <output name="tableMap" type="java.util.Map">Map of key -&gt; table values</output>
            <extensions>
                <oga:settings>
                    <oga:property key="columnName"><![CDATA[Speaker]]></oga:property>
                    <oga:property key="__script"><![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 /**
  * Split Table.js
  * 
  * Script for use with ca.phon.app.opgraph.nodes.table.TableScriptNode
  * 
  * Split table based on column name.  Two outputs
  * are produced, a set of keys from the column used in the filter  and a 
  * map of key -> table values.
  */

var columnParamInfo = {
	"id": "columnName",
	"title": "Column Name",
	"def": "",
	"prompt": "Enter column name"
}

function setup_params(params) {
	var columnParam = new StringScriptParam(
		columnParamInfo.id,
		columnParamInfo.title,
		columnParamInfo.def);
	columnParam.setPrompt(columnParamInfo.prompt);
	params.add(columnParam);
}

// add custom inputs/outputs here
function init(inputs, outputs) {
	outputs.add("keySet", "Unique values from given column name", false, java.util.Set);
	outputs.add("tableMap", "Map of key -> table values", false, java.util.Map);
}

/* 
 * Create a new table with the same schema as the inputTable
 */
function setupTable(inputTable) {
    var table = new DefaultTableDataSource();
    for(c = 0; c < inputTable.columnCount; c++) {
	    var colTitle = inputTable.getColumnTitle(c);
	    table.setColumnTitle(c, colTitle);
	}
	return table;
}

// run operation on table
function tableOp(context, table) {
	// find table column index
	col = table.getColumnIndex(columnName);
	
	if(col < 0) 
		return; // column not found
	
	var tableMap = new java.util.LinkedHashMap();
	
	for(row = 0; row < table.rowCount; row++) {
	    // use string value as row key
		var rowKey = Packages.ca.phon.formatter.FormatterUtil.format(table.getValueAt(row, col));
		
		var keyTable = tableMap.get(rowKey);
		if(keyTable == null) {
		    keyTable = setupTable(table);
		    tableMap.put(rowKey, keyTable);
		}
		keyTable.addRow(table.getRow(row));
	}
	
	context.put("keySet", tableMap.keySet());
	context.put("tableMap", tableMap);
}
]]></oga:property>
                </oga:settings>
                <oga:meta x="660" y="114"/>
            </extensions>
        </node>
        <ogcn:macro id="e91c03b16c8b4b76" name="For Each Participant" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
            <graph id="12f07ab1">
                <node id="1e1d045eca2440e2" name="Current Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                        </oga:settings>
                        <oga:meta x="48" y="48"/>
                    </extensions>
                </node>
                <node id="1fd74abf8e2846e4" name="Table Map" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                        </oga:settings>
                        <oga:meta x="68" y="208"/>
                    </extensions>
                </node>
                <node id="2fc70e7c67114e4e" name="Selected Sessions" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="69" y="310"/>
                    </extensions>
                </node>
                <node id="48ceef65c3074b27" name="To Participant Object" type="class:ca.gedge.opgraph.nodes.reflect.ObjectCastNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectCastNode.declaredClass"><![CDATA[ca.phon.session.Participant]]></oga:property>
                        </oga:settings>
                        <oga:meta x="224" y="49"/>
                    </extensions>
                </node>
                <ogcn:macro id="d6f9e431724544a8" name="Get Table of Results For Speaker" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="22edf9ee">
                        <node id="c81dd3e9b0ae4431" name="Object#toString()" type="class:ca.gedge.opgraph.nodes.reflect.MethodNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                                <oga:meta x="105" y="70"/>
                            </extensions>
                        </node>
                        <node id="643df629867a48c4" name="Map#get(Object)" type="class:ca.gedge.opgraph.nodes.reflect.MethodNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[get(java.lang.Object)]]></oga:property>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                </oga:settings>
                                <oga:meta x="296" y="73"/>
                            </extensions>
                        </node>
                        <node id="4e01abe6bd424d18" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
                            <output name="exists" type="java.lang.Boolean">does table exist</output>
                            <output name="table" type="ca.phon.query.report.datasource.DefaultTableDataSource">table if exists, undefined otherwise</output>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[
// setup input/output fields
function init(inputFields, outputFields) {
	inputFields.add("table", "");
	outputFields.add("exists", "does table exist", false, java.lang.Boolean);
	outputFields.add("table", "table if exists, undefined otherwise", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
}

function run(context) {
	var tableExists = 
		(context.containsKey("table") && context.get("table") != null);
	context.put("exists", tableExists);
	context.put("table", context.get("table"));
}
]]></oga:property>
                                </oga:settings>
                                <oga:meta x="514" y="94"/>
                            </extensions>
                        </node>
                        <link dest="643df629867a48c4" destField="arg1" source="c81dd3e9b0ae4431" sourceField="value"/>
                        <link dest="4e01abe6bd424d18" destField="table" source="643df629867a48c4" sourceField="value"/>
                        <extensions>
                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                        </extensions>
                    </graph>
                    <ogcn:published_input field="obj" name="speaker" ref="c81dd3e9b0ae4431"/>
                    <ogcn:published_input field="obj" name="tableMap" ref="643df629867a48c4"/>
                    <ogcn:published_output field="exists" name="exists" ref="4e01abe6bd424d18"/>
                    <ogcn:published_output field="table" name="table" ref="4e01abe6bd424d18"/>
                    <extensions>
                        <oga:meta x="506" y="127"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="a142afe3e8cd428f" name="If Speaker has Results" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="6283630e">
                        <node id="fbc2b0b89c574aa2" name="Table" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]></oga:property>
                                </oga:settings>
                                <oga:meta x="100" y="212"/>
                            </extensions>
                        </node>
                        <node id="3e02c5ee80484b2b" name="Selected Sessions" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                                </oga:settings>
                                <oga:meta x="109" y="362"/>
                            </extensions>
                        </node>
                        <node id="4d2c4950a58e4298" name="Participant" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.session.Participant]]></oga:property>
                                </oga:settings>
                                <oga:meta x="102" y="478"/>
                            </extensions>
                        </node>
                        <node id="7a78862b01a849ad" name="Split Table by Session" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                            <output name="keySet" type="java.util.Set">Unique values from given column name</output>
                            <output name="tableMap" type="java.util.Map">Map of key -&gt; table values</output>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="columnName"><![CDATA[Session]]></oga:property>
                                    <oga:property key="__script"><![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 /**
  * Split Table.js
  * 
  * Script for use with ca.phon.app.opgraph.nodes.table.TableScriptNode
  * 
  * Split table based on column name.  Two outputs
  * are produced, a set of keys from the column used in the filter  and a 
  * map of key -> table values.
  */

var columnParamInfo = {
	"id": "columnName",
	"title": "Column Name",
	"def": "",
	"prompt": "Enter column name"
}

function setup_params(params) {
	var columnParam = new StringScriptParam(
		columnParamInfo.id,
		columnParamInfo.title,
		columnParamInfo.def);
	columnParam.setPrompt(columnParamInfo.prompt);
	params.add(columnParam);
}

// add custom inputs/outputs here
function init(inputs, outputs) {
	outputs.add("keySet", "Unique values from given column name", false, java.util.Set);
	outputs.add("tableMap", "Map of key -> table values", false, java.util.Map);
}

/* 
 * Create a new table with the same schema as the inputTable
 */
function setupTable(inputTable) {
    var table = new DefaultTableDataSource();
    for(c = 0; c < inputTable.columnCount; c++) {
	    var colTitle = inputTable.getColumnTitle(c);
	    table.setColumnTitle(c, colTitle);
	}
	return table;
}

// run operation on table
function tableOp(context, table) {
	// find table column index
	col = table.getColumnIndex(columnName);
	
	if(col < 0) 
		return; // column not found
	
	var tableMap = new java.util.LinkedHashMap();
	
	for(row = 0; row < table.rowCount; row++) {
	    // use string value as row key
		var rowKey = Packages.ca.phon.formatter.FormatterUtil.format(table.getValueAt(row, col));
		
		var keyTable = tableMap.get(rowKey);
		if(keyTable == null) {
		    keyTable = setupTable(table);
		    tableMap.put(rowKey, keyTable);
		}
		keyTable.addRow(table.getRow(row));
	}
	
	context.put("keySet", tableMap.keySet());
	context.put("tableMap", tableMap);
}
]]></oga:property>
                                </oga:settings>
                                <oga:meta x="448" y="201"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="8fb4ae3bf3b64641" name="For Each Session" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="440e00ec">
                                <node id="31cb0f8abccb4dd4" name="Current Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="37" y="43"/>
                                    </extensions>
                                </node>
                                <node id="d519011249c4426b" name="Table Map" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="64" y="267"/>
                                    </extensions>
                                </node>
                                <node id="af6e777b714b4ff0" name="Participant" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.session.Participant]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="59" y="372"/>
                                    </extensions>
                                </node>
                                <node id="f08a9606fdba4d45" name="Object#toString()" type="class:ca.gedge.opgraph.nodes.reflect.MethodNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="220" y="71"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="659d44922f7e48ef" name="Get Table for Session" type="ca.gedge.opgraph.nodes.general.MacroNode">
                                    <graph id="596819d4">
                                        <node id="75214a89a2014841" name="Map" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="244" y="68"/>
                                            </extensions>
                                        </node>
                                        <node id="8ac5eadb8efd4d99" name="Map#get(Object)" type="class:ca.gedge.opgraph.nodes.reflect.MethodNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[get(java.lang.Object)]]></oga:property>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="401" y="69"/>
                                            </extensions>
                                        </node>
                                        <node id="1c86b228a4247dc" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
                                            <output name="exists" type="java.lang.Boolean">does table exist</output>
                                            <output name="table" type="ca.phon.query.report.datasource.DefaultTableDataSource">table if exists, undefined otherwise</output>
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="__script"><![CDATA[
// setup input/output fields
function init(inputFields, outputFields) {
	inputFields.add("table", "");
	outputFields.add("exists", "does table exist", false, java.lang.Boolean);
	outputFields.add("table", "table if exists, undefined otherwise", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
}

function run(context) {
	var tableExists = 
		(context.containsKey("table") && context.get("table") != null);
	context.put("exists", tableExists);
	context.put("table", context.get("table"));
}
]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="555" y="73"/>
                                            </extensions>
                                        </node>
                                        <link dest="8ac5eadb8efd4d99" destField="obj" source="75214a89a2014841" sourceField="obj"/>
                                        <link dest="1c86b228a4247dc" destField="table" source="8ac5eadb8efd4d99" sourceField="value"/>
                                    </graph>
                                    <ogcn:published_input field="arg1" name="sessionName" ref="8ac5eadb8efd4d99"/>
                                    <ogcn:published_input field="obj" name="tableMap" ref="75214a89a2014841"/>
                                    <ogcn:published_output field="exists" name="exists" ref="1c86b228a4247dc"/>
                                    <ogcn:published_output field="table" name="table" ref="1c86b228a4247dc"/>
                                    <extensions>
                                        <oga:meta x="413" y="110"/>
                                    </extensions>
                                </ogcn:macro>
                                <ogcn:macro id="6a7451d72e614d8f" name="If Speaker has Results for Session" type="ca.gedge.opgraph.nodes.general.MacroNode">
                                    <graph id="2f4312d3">
                                        <node id="e4352140ec564c3a" name="DefaultTableDataSource" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="57" y="208"/>
                                            </extensions>
                                        </node>
                                        <node id="539f4a6b390b450f" name="Participant" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.session.Participant]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="56" y="344"/>
                                            </extensions>
                                        </node>
                                        <node id="53903697d9d943ac" name="Session Name" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="66" y="635"/>
                                            </extensions>
                                        </node>
                                        <ogcn:macro id="1af017812e1047a4" name="Setup Buffer Name" type="ca.gedge.opgraph.nodes.general.MacroNode">
                                            <graph id="1bf22698">
                                                <node id="71a39417125d4eb9" name="StringBuffer#&lt;init&gt;()" type="class:ca.gedge.opgraph.nodes.reflect.ConstructorNode">
                                                    <extensions>
                                                        <oga:settings>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ConstructorNode.classMember"><![CDATA[<init>()]]></oga:property>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ConstructorNode.declaredClass"><![CDATA[java.lang.StringBuffer]]></oga:property>
                                                        </oga:settings>
                                                        <oga:meta x="305" y="167"/>
                                                    </extensions>
                                                </node>
                                                <node id="e635af1cf6a9439b" name="String#&lt;init&gt;(String)" type="class:ca.gedge.opgraph.nodes.reflect.ConstructorNode">
                                                    <extensions>
                                                        <oga:settings>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ConstructorNode.classMember"><![CDATA[<init>(java.lang.String)]]></oga:property>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ConstructorNode.declaredClass"><![CDATA[java.lang.String]]></oga:property>
                                                        </oga:settings>
                                                        <oga:meta x="311" y="242"/>
                                                    </extensions>
                                                </node>
                                                <node id="664e969394ec4ad1" name="Object#toString()" type="class:ca.gedge.opgraph.nodes.reflect.MethodNode">
                                                    <extensions>
                                                        <oga:settings>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                                        </oga:settings>
                                                        <oga:meta x="322" y="495"/>
                                                    </extensions>
                                                </node>
                                                <node id="5119018260ee4d93" name="StringBuffer#append(String)" type="class:ca.gedge.opgraph.nodes.reflect.MethodNode">
                                                    <extensions>
                                                        <oga:settings>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[append(java.lang.String)]]></oga:property>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.StringBuffer]]></oga:property>
                                                        </oga:settings>
                                                        <oga:meta x="483" y="170">
                                                            <oga:default for="arg1" type="java.lang.String"/>
                                                        </oga:meta>
                                                    </extensions>
                                                </node>
                                                <node id="eaa9dbbf8ee941ef" name="StringBuffer#append(String)" type="class:ca.gedge.opgraph.nodes.reflect.MethodNode">
                                                    <extensions>
                                                        <oga:settings>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[append(java.lang.String)]]></oga:property>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.StringBuffer]]></oga:property>
                                                        </oga:settings>
                                                        <oga:meta x="738" y="210">
                                                            <oga:default for="arg1" type="java.lang.String">_</oga:default>
                                                        </oga:meta>
                                                    </extensions>
                                                </node>
                                                <node id="8c6c0b6cdc764675" name="StringBuffer#append(Object)" type="class:ca.gedge.opgraph.nodes.reflect.MethodNode">
                                                    <extensions>
                                                        <oga:settings>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[append(java.lang.Object)]]></oga:property>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.StringBuffer]]></oga:property>
                                                        </oga:settings>
                                                        <oga:meta x="490" y="277"/>
                                                    </extensions>
                                                </node>
                                                <node id="4f603e3eb7c546f4" name="StringBuffer#append(String)" type="class:ca.gedge.opgraph.nodes.reflect.MethodNode">
                                                    <extensions>
                                                        <oga:settings>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[append(java.lang.String)]]></oga:property>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.StringBuffer]]></oga:property>
                                                        </oga:settings>
                                                        <oga:meta x="497" y="384">
                                                            <oga:default for="arg1" type="java.lang.String">_</oga:default>
                                                        </oga:meta>
                                                    </extensions>
                                                </node>
                                                <node id="7cd423a13de64e71" name="StringBuffer#append(String)" type="class:ca.gedge.opgraph.nodes.reflect.MethodNode">
                                                    <extensions>
                                                        <oga:settings>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[append(java.lang.String)]]></oga:property>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.StringBuffer]]></oga:property>
                                                        </oga:settings>
                                                        <oga:meta x="497" y="488">
                                                            <oga:default for="arg1" type="java.lang.String"/>
                                                        </oga:meta>
                                                    </extensions>
                                                </node>
                                                <node id="80bf229200f04eb5" name="StringBuffer#toString()" type="class:ca.gedge.opgraph.nodes.reflect.MethodNode">
                                                    <extensions>
                                                        <oga:settings>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.StringBuffer]]></oga:property>
                                                        </oga:settings>
                                                        <oga:meta x="721" y="496"/>
                                                    </extensions>
                                                </node>
                                                <link dest="5119018260ee4d93" destField="obj" source="71a39417125d4eb9" sourceField="value"/>
                                                <link dest="7cd423a13de64e71" destField="obj" source="4f603e3eb7c546f4" sourceField="value"/>
                                                <link dest="7cd423a13de64e71" destField="arg1" source="664e969394ec4ad1" sourceField="value"/>
                                                <link dest="80bf229200f04eb5" destField="obj" source="7cd423a13de64e71" sourceField="value"/>
                                                <link dest="5119018260ee4d93" destField="arg1" source="e635af1cf6a9439b" sourceField="value"/>
                                                <link dest="4f603e3eb7c546f4" destField="obj" source="8c6c0b6cdc764675" sourceField="value"/>
                                                <link dest="eaa9dbbf8ee941ef" destField="obj" source="5119018260ee4d93" sourceField="value"/>
                                                <link dest="8c6c0b6cdc764675" destField="obj" source="eaa9dbbf8ee941ef" sourceField="value"/>
                                            </graph>
                                            <ogcn:published_input field="obj" name="sessionName" ref="664e969394ec4ad1"/>
                                            <ogcn:published_input field="arg1" name="tableName" ref="e635af1cf6a9439b"/>
                                            <ogcn:published_input field="arg1" name="speaker" ref="8c6c0b6cdc764675"/>
                                            <ogcn:published_output field="value" name="value" ref="80bf229200f04eb5"/>
                                            <extensions>
                                                <oga:meta x="442" y="228">
                                                    <oga:default for="tableName" type="java.lang.String">PCC</oga:default>
                                                </oga:meta>
                                            </extensions>
                                        </ogcn:macro>
                                        <node id="43e3ef9b838b4b8f" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                            <input name="data" optional="false">Data to print</input>
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="dataTemplate"><![CDATA[$DATA]]></oga:property>
                                                    <oga:property key="showText"><![CDATA[false]]></oga:property>
                                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                                    <oga:property key="showHTML"><![CDATA[false]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="675" y="234"/>
                                            </extensions>
                                        </node>
                                        <link dest="1af017812e1047a4" destField="sessionName" source="53903697d9d943ac" sourceField="obj"/>
                                        <link dest="1af017812e1047a4" destField="speaker" source="539f4a6b390b450f" sourceField="obj"/>
                                        <link dest="43e3ef9b838b4b8f" destField="buffer" source="1af017812e1047a4" sourceField="value"/>
                                        <link dest="43e3ef9b838b4b8f" destField="data" source="e4352140ec564c3a" sourceField="obj"/>
                                        <extensions>
                                            <oga:notes>
                                                <oga:note color="0xffff96" height="589" title="Published Inputs" width="251" x="36" y="150"/>
                                            </oga:notes>
                                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                                        </extensions>
                                    </graph>
                                    <ogcn:published_input field="obj" name="table" ref="e4352140ec564c3a"/>
                                    <ogcn:published_input field="obj" name="speaker" ref="539f4a6b390b450f"/>
                                    <ogcn:published_input field="obj" name="sessionName" ref="53903697d9d943ac"/>
                                    <extensions>
                                        <oga:meta x="602" y="100"/>
                                    </extensions>
                                </ogcn:macro>
                                <link dest="659d44922f7e48ef" destField="tableMap" source="d519011249c4426b" sourceField="obj"/>
                                <link dest="6a7451d72e614d8f" destField="table" source="659d44922f7e48ef" sourceField="table"/>
                                <link dest="6a7451d72e614d8f" destField="speaker" source="af6e777b714b4ff0" sourceField="obj"/>
                                <link dest="6a7451d72e614d8f" destField="sessionName" source="31cb0f8abccb4dd4" sourceField="obj"/>
                                <link dest="6a7451d72e614d8f" destField="enabled" source="659d44922f7e48ef" sourceField="exists"/>
                                <link dest="f08a9606fdba4d45" destField="obj" source="31cb0f8abccb4dd4" sourceField="obj"/>
                                <link dest="659d44922f7e48ef" destField="sessionName" source="f08a9606fdba4d45" sourceField="value"/>
                                <extensions>
                                    <oga:notes>
                                        <oga:note color="0xffff96" height="533" title="Published Inputs" width="263" x="33" y="200"/>
                                    </oga:notes>
                                    <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                                </extensions>
                            </graph>
                            <ogcn:published_input field="obj" name="tableMap" ref="d519011249c4426b"/>
                            <ogcn:published_input field="obj" name="speaker" ref="af6e777b714b4ff0"/>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="699" y="203"/>
                            </extensions>
                        </ogcn:macro>
                        <link dest="7a78862b01a849ad" destField="table" source="fbc2b0b89c574aa2" sourceField="obj"/>
                        <link dest="8fb4ae3bf3b64641" destField="collection" source="3e02c5ee80484b2b" sourceField="obj"/>
                        <link dest="8fb4ae3bf3b64641" destField="tableMap" source="7a78862b01a849ad" sourceField="tableMap"/>
                        <link dest="8fb4ae3bf3b64641" destField="speaker" source="4d2c4950a58e4298" sourceField="obj"/>
                        <extensions>
                            <oga:notes>
                                <oga:note color="0xffff96" height="705" title="Published Inputs" width="286" x="54" y="167"/>
                            </oga:notes>
                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                        </extensions>
                    </graph>
                    <ogcn:published_input field="obj" name="table" ref="fbc2b0b89c574aa2"/>
                    <ogcn:published_input field="obj" name="selectedSessions" ref="3e02c5ee80484b2b"/>
                    <ogcn:published_input field="obj" name="speaker" ref="4d2c4950a58e4298"/>
                    <extensions>
                        <oga:meta x="788" y="134"/>
                    </extensions>
                </ogcn:macro>
                <link dest="d6f9e431724544a8" destField="speaker" source="48ceef65c3074b27" sourceField="obj"/>
                <link dest="48ceef65c3074b27" destField="obj" source="1e1d045eca2440e2" sourceField="obj"/>
                <link dest="d6f9e431724544a8" destField="tableMap" source="1fd74abf8e2846e4" sourceField="obj"/>
                <link dest="a142afe3e8cd428f" destField="table" source="d6f9e431724544a8" sourceField="table"/>
                <link dest="a142afe3e8cd428f" destField="enabled" source="d6f9e431724544a8" sourceField="exists"/>
                <link dest="a142afe3e8cd428f" destField="selectedSessions" source="2fc70e7c67114e4e" sourceField="obj"/>
                <link dest="a142afe3e8cd428f" destField="speaker" source="48ceef65c3074b27" sourceField="obj"/>
                <extensions>
                    <oga:notes>
                        <oga:note color="0xffff96" height="565" title="Published Inputs" width="229" x="33" y="160"/>
                    </oga:notes>
                    <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                </extensions>
            </graph>
            <ogcn:published_input field="obj" name="tableMap" ref="1fd74abf8e2846e4"/>
            <ogcn:published_input field="obj" name="selectedSessions" ref="2fc70e7c67114e4e"/>
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                </oga:settings>
                <oga:meta x="864" y="114"/>
            </extensions>
        </ogcn:macro>
        <link dest="958f8e5efe7f4aea" destField="project" source="a140c854b71847c3" sourceField="project"/>
        <link dest="958f8e5efe7f4aea" destField="results" source="a140c854b71847c3" sourceField="results"/>
        <link dest="a140c854b71847c3" destField="project" source="7c7c9211dd474b5b" sourceField="obj"/>
        <link dest="a140c854b71847c3" destField="sessions" source="e620abbc246b44ee" sourceField="obj"/>
        <link dest="fe1de4c94570478d" destField="table" source="958f8e5efe7f4aea" sourceField="table"/>
        <link dest="e91c03b16c8b4b76" destField="collection" source="3d333a88c3c5409e" sourceField="obj"/>
        <link dest="e91c03b16c8b4b76" destField="tableMap" source="fe1de4c94570478d" sourceField="tableMap"/>
        <link dest="e91c03b16c8b4b76" destField="selectedSessions" source="e620abbc246b44ee" sourceField="obj"/>
        <extensions>
            <opqry:nodewizard type="ca.phon.app.opgraph.analysis.AnalysisWizardExtension">
                <opqry:info format="html" title="">
                    <opqry:message/>
                </opqry:info>
                <opqry:report-template name="Report Prefix"/>
                <opqry:report-template name="Report Suffix"/>
            </opqry:nodewizard>
            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
        </extensions>
    </graph>
</opgraph>
