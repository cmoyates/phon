<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<opgraph xmlns="https://www.phon.ca/ns/opgraph" xmlns:nes="https://www.phon.ca/ns/node_editor" xmlns:oga="https://www.phon.ca/ns/opgraph-app" xmlns:ogcn="https://www.phon.ca/ns/opgraph-common-nodes" xmlns:opqry="https://phon.ca/ns/opgraph_query" xmlns:qry="http://phon.ling.mun.ca/ns/query">
    <graph id="root">
        <node id="fb2027c" name="Project" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                </oga:settings>
                <oga:meta x="15" y="15"/>
            </extensions>
        </node>
        <node id="39d161f1" name="Selected Sessions" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                </oga:settings>
                <oga:meta x="25" y="291"/>
            </extensions>
        </node>
        <node id="3e038096" name="Selected Participants" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="contextKey"><![CDATA[_selectedParticipants]]></oga:property>
                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                </oga:settings>
                <oga:meta x="25" y="392"/>
            </extensions>
        </node>
        <node id="6df4d2f7" name="Parameters" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
            <extensions>
                <oga:settings>
                    <oga:property key="filters.primary_actual.filter"><![CDATA[\w]]></oga:property>
                    <oga:property key="filters.primary_target.filter"><![CDATA[\w]]></oga:property>
                    <oga:property key="__script"><![CDATA[var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;

/********************************
 * Setup params
 *******************************/

 var processes = [
    {
        "name": "All Phones",
        "params": [
            {
                "object": "filters.primary_target",
                "function": "setPattern",
                "value": "\"\\\\w\""
            },
            {
                "object": "filters.primary_actual",
                "function": "setPattern",
                "value": "\"\\\\w\""
            }
        ]
    },
    {
        "name": "Consonants",
        "params": [
            {
                "object": "filters.primary_target",
                "function": "setPattern",
                "value": "\"\\\\c\""
            },
            {
                "object": "filters.primary_actual",
                "function": "setPattern",
                "value": "\"\\\\c\""
            }
        ]
    },
    {
        "name": "Vowels",
        "params": [
            {
                "object": "filters.primary_target",
                "function": "setPattern",
                "value": "\"\\\\v\""
            },
            {
                "object": "filters.primary_actual",
                "function": "setPattern",
                "value": "\"\\\\v\""
            }
        ]
    }
];

var processSelectionParamInfo = {
    "id": "processSelection",
    "title": "Type",
    "def": 0,
};
var processSelectionParam;

var searchTier = "IPA Target";

var filters = {
	"primary_target": new PatternFilter("filters.primary_target"),
	"primary_actual": new PatternFilter("filters.primary_actual"),
	"group": new GroupFilter("filters.group"),
	"groupPattern": new PatternFilter("filters.groupPattern"),
	"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
	"word": new WordFilter("filters.word"),
	"wordPattern": new PatternFilter("filters.wordPattern"),
	"alignedWord": new AlignedWordFilter("filters.alignedWord"),
	"syllable": new SyllableFilter("filters.syllable")
};

var reportTitleParamInfo = {
	"id": "reportTitle",
	"title": "Report Title",
	"def": "Phone Inventory",
	"prompt": "Enter report title"
};
var reportTitleParam;
var reportTitle = reportTitleParamInfo.def;

function setup_params(params) {
	reportTitleParam = new StringScriptParam(
			reportTitleParamInfo.id,
			reportTitleParamInfo.title,
			reportTitleParamInfo.def);
     reportTitleParam.setPrompt(reportTitleParamInfo.prompt);
	params.add(reportTitleParam);

	processSelectionParam = createTypeSelection();
	params.add(processSelectionParam);

	params.add(new SeparatorScriptParam("IPA Target Options", false));
	filters.primary_target.setSelectedPatternType(PatternType.PHONEX);
	filters.primary_target.param_setup(params);
	filters.primary_target.set_required(true);

	params.add(new SeparatorScriptParam("IPA Actual Options", false));
	filters.primary_actual.setSelectedPatternType(PatternType.PHONEX);
	filters.primary_actual.param_setup(params);
	filters.primary_actual.set_required(true);

	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "<html><b>Aligned Group</b></html>");
	params.add(sep);
	filters.alignedGroup.param_setup(params);

	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
	filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "<html><b>Aligned Word</b></html>");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);
	var searchByWordListener = new java.beans.PropertyChangeListener {
		propertyChange: function (e) {
			var enabled = e.source.getValue(e.source.paramId);
			filters.wordPattern.setEnabled(enabled);
			filters.alignedWord.setEnabled(enabled);
		}
	};
	filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
	var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
	filters.wordPattern.setEnabled(enabled);
	filters.alignedWord.setEnabled(enabled);

	filters.syllable.param_setup(params);
}

function createTypeSelection() {
    // get a list of all process names
    var processNames = [];
    for(i = 0; i < processes.length; i++) {
        name = processes[i]["name"];
        processNames.push(name);
    }

    var retVal = new EnumScriptParam(
        processSelectionParamInfo.id,
        processSelectionParamInfo.title,
        processSelectionParamInfo.def,
        processNames);

     var processSelectionListener = new java.beans.PropertyChangeListener() {
            propertyChange: function(e) {
                var selectedIdx = processSelectionParam.getValue(processSelectionParamInfo.id).index;
                if(selectedIdx >= 0) {
                    var process = processes[selectedIdx];

                    reportTitleParam.setValue(reportTitleParamInfo.id, "Phone Inventory" + (selectedIdx > 0 ? " - " + process["name"] : ""));

                    var params = process["params"];
                    for(i = 0; i < params.length; i++) {
                        var param = params[i];
                        var setParam = param["object"] + "." + param["function"] + "(" + param["value"] + ");";
                        eval(setParam);
                    }

                }
            }
     };
     retVal.addPropertyChangeListener(processSelectionListener);

    return retVal;
}

function run(context) {

}
]]></oga:property>
                </oga:settings>
                <oga:meta x="27" y="489"/>
            </extensions>
        </node>
        <opqry:queryNode id="230571e9" type="ca.phon.app.opgraph.nodes.query.QueryNode">
            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2020-10-15T09:20:06.533-02:30" name="Query Node" uuid="aa18af18-1f0c-42e9-b525-48d94bb28380">
                <script>
                    <source>/*
params =
{enum, searchTier, "IPA Target"|"IPA Actual", 0, "Search Tier"}
;
 */

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var TierList = require("lib/TierList").TierList;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var ResultType = require("lib/PhonScriptConstants").ResultType;
var SearchByOptions = require("lib/SearchByOptions").SearchByOptions;

/********************************
 * Setup params
 *******************************/

var filters = {
	"primary_target": new PatternFilter("filters.primary_target"),
	"searchBy": new SearchByOptions("filters.searchBy"),
	"targetResultFilter": new PatternFilter("filters.targetResultFilter"),
	"actualResultFilter": new PatternFilter("filters.actualResultFilter"),
	"group": new GroupFilter("filters.group"),
	"groupTiers": new TierList("filters.groupTiers"),
	"groupPattern": new PatternFilter("filters.groupPattern"),
	"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
	"word": new WordFilter("filters.word"),
	"wordTiers": new TierList("filters.wordTiers"),
	"wordPattern": new PatternFilter("filters.wordPattern"),
	"alignedWord": new AlignedWordFilter("filters.alignedWord"),
	"syllable": new SyllableFilter("filters.syllable"),
	"speaker": new ParticipantFilter("filters.speaker")
};

var includeAlignedParamInfo = {
	"id": "includeAligned",
	"title": "",
	"desc": "Include aligned phones",
	"def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {
	filters.primary = filters.primary_target;
	
	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	var insertIdx = 1;

	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");

	includeAlignedParam = new BooleanScriptParam(
	includeAlignedParamInfo.id,
	includeAlignedParamInfo.desc,
	includeAlignedParamInfo.title,
	includeAlignedParamInfo.def);

	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);

	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);

	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Add Aligned Groups&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.groupTiers.param_setup(params);
	var sep2 = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group Filter&lt;/b&gt;&lt;/html&gt;");
	params.add(sep2);
	filters.alignedGroup.param_setup(params);

	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
	filters.wordPattern.setEnabled(false);

	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Add Aligned Words&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.wordTiers.param_setup(params);

	var wordsep2 = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word Filter&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep2);
	filters.alignedWord.param_setup(params);
	var searchByWordListener = new java.beans.PropertyChangeListener {
		propertyChange: function (e) {
			var enabled = e.source.getValue(e.source.paramId);
			filters.wordPattern.setEnabled(enabled);
			filters.alignedWord.setEnabled(enabled);
		}
	};
	filters.word.searchByWordParam.addPropertyChangeListener(filters.word.searchByWordParam.paramId, searchByWordListener);
	var enabled = filters.word.searchByWordParam.getValue(filters.word.searchByWordParam.paramId);
	filters.wordPattern.setEnabled(enabled);
	filters.alignedWord.setEnabled(enabled);

	filters.syllable.param_setup(params);
	
	filters.searchBy.includeSyllableOption = true;
	filters.searchBy.param_setup(params, filters.word.searchByWordParam, filters.syllable.searchBySyllableParam, insertIdx);
	
	filters.speaker.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
	session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
	filters.primary = filters.primary_target;
	
	// check participant filter
	if (! filters.speaker.check_speaker(record.speaker)) return;

	// check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
	if (filters.groupPattern.isUseFilter()) {
		groups = filters.groupPattern.filter_groups(groups, searchTier);
	}

	// check aligned group for each group returned
	if (filters.alignedGroup.isUseFilter()) {
		groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for (var i = 0; i &lt; groups.length; i++) {
		var group = groups[i];

		var groupAlignedData = filters.groupTiers.getAlignedTierData(record, group, "Group");

		var groupAlignedResults = groupAlignedData[0];
		var groupAlignedMeta = groupAlignedData[1];

		if (filters.alignedGroup.isUseFilter()) {
			var tierList = new TierList("group");
			tierList.setTiers(filters.alignedGroup.tier);

			var alignedGroupData = tierList.getAlignedTierData(record, group, "Group");
			for(var j = 0; j &lt; alignedGroupData[0].length; j++) {
				groupAlignedResults.push(alignedGroupData[0][j]);
			}
		}

		var ipa = (searchTier == "IPA Target" ? group.IPATarget: group.IPAActual);
		var phoneMap = group.phoneAlignment;

		var toSearch = new Array();
		toSearch.push([ipa, groupAlignedResults, groupAlignedMeta]);

		// search by word?
		if (filters.word.isUseFilter()) {
			toSearch.length = 0;
			var selectedWords = filters.word.getRequestedWords(group, searchTier);
			for (j = 0; j &lt; selectedWords.length; j++) {
				var word = selectedWords[j];

				var wordAlignedMeta = new java.util.LinkedHashMap();
				wordAlignedMeta.putAll(groupAlignedMeta);

				var wordAlignedResults = new Array();
				for(var k = 0; k &lt; groupAlignedResults.length; k++) {
					wordAlignedResults.push(groupAlignedResults[k]);
				}

				var wordAlignedData = filters.wordTiers.getAlignedTierData(record, word, "Word");
				for(var k = 0; k &lt; wordAlignedData[0].length; k++) {
					wordAlignedResults.push(wordAlignedData[0][k]);
				}
				wordAlignedMeta.putAll(wordAlignedData[1]);

				var wordIpa = (searchTier == "IPA Target" ? word.IPATarget: word.IPAActual);
				var addWord = (wordIpa != null);
				// check word pattern if necessary
				if (filters.wordPattern.isUseFilter()) {
					addWord = filters.wordPattern.check_filter(wordIpa);
				}

				// check aligned word pattern if necessary
				if (filters.alignedWord.isUseFilter()) {
					addWord = filters.alignedWord.check_word(word);

					var tierList = new TierList("word");
					tierList.setTiers(filters.alignedWord.tier);

					var alignedWordData = tierList.getAlignedTierData(record, word, "Word");
					for(var k = 0; k &lt; alignedWordData[0].length; k++) {
						wordAlignedResults.push(alignedWordData[0][k]);
					}
				}

				if (addWord == true) {
					toSearch.push([wordIpa, wordAlignedResults, wordAlignedMeta]);
				}
			}
		}

		// search by syllable?
		if (filters.syllable.isUseFilter()) {
			var syllList = new Array();
			for (j = 0; j &lt; toSearch.length; j++) {
				var obj = toSearch[j][0];
				var aligned = (phoneMap != null ? phoneMap: new Packages.ca.phon.ipa.alignment.PhoneMap());
				var sylls = filters.syllable.getRequestedSyllables(obj, aligned);

				for (k = 0; k &lt; sylls.length; k++) {
					syllList.push([sylls[k], toSearch[j][1], toSearch[j][2]]);
				}
			}
			toSearch = syllList;
		}

		for (j = 0; j &lt; toSearch.length; j++) {
			var obj = toSearch[j][0];
			var alignedResults = toSearch[j][1];
			var alignedMetadata = toSearch[j][2];
			var matches = filters.primary.find_pattern(obj);
			var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter: filters.actualResultFilter);
			var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter: filters.targetResultFilter);

			for (k = 0; k &lt; matches.length; k++) {
				var match = matches[k];

				if (match.groups) {
					var xgrp = match.groups[ "X"];
					if (xgrp) {
						var newMatch = {
							start: xgrp.start,
							end: xgrp.end,
							value: xgrp.value,
							groups: match.groups
						};
						match = newMatch;
					}
				}

				if (primaryFilter.isUseFilter()) {
					if (! primaryFilter.check_filter(new IPATranscript(match.value))) {
						continue;
					}
				}

				var result = factory.createResult();
				// calculate start/end positions of data in text
				var startIndex = ipa.stringIndexOf(match.value);
				var length = match.value.toString().length();

				result.recordIndex = recordIndex;
				result.schema = "LINEAR";

				var rv = factory.createResultValue();
				rv.tierName = searchTier;
				rv.groupIndex = group.groupIndex;
				rv.range = new Range(startIndex, startIndex + length, false);
				rv.data = (match.value != null ? new IPATranscript(match.value): new IPATranscript());
				result.addResultValue(rv);

				var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual(): group.getIPATarget());
				var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()): null);
				var alignedIpaElements = (aligned != null ? new IPATranscript(aligned): new IPATranscript());


				// find location of aligned value in group
				var groupStartIdx =
				(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)): 0);
				var groupEndIdx =
				(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length() -1)): 0);
				var alignedIpa =
				(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx + 1): new IPATranscript());

				if (alignedFilter.isUseFilter()) {
					if (! alignedFilter.check_filter(alignedIpa)) {
						continue;
					}
				}

				if (includeAligned == true) {
					var alignedRv = factory.createResultValue();
					alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual": "IPA Target");
					alignedRv.groupIndex = group.groupIndex;
					if (aligned != null &amp;&amp; aligned.size() &gt; 0) {
						var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
						var alignedLength = alignedIpa.toString().length();

						alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
						alignedRv.data = alignedIpa;
					} else {
						alignedRv.range = new Range(0, 0, true);
						alignedRv.data = "";
					}

					result.addResultValue(alignedRv);
					result.schema = "ALIGNED";
				}

				for(var alignedResultIdx = 0; alignedResultIdx &lt; alignedResults.length; alignedResultIdx++) {
					result.addResultValue(alignedResults[alignedResultIdx]);
				}
				result.metadata.putAll(alignedMetadata);

				// append named-group information (if any)
				if (match.groups) {
					groupKeys = Object.keys(match.groups);
					for (keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
						var key = groupKeys[keyIdx];
						if (/^[a-zA-Z]\w*$/.test(key) &amp;&amp; key != 'X') {
							result.metadata.put(key, match.groups[key].value.toString());
						}
					}
				}

				results.addResult(result);
			}
		}
	}
}
</source>
                    <param id="filters.alignedGroup.patternFilter.filterType">Plain text</param>
                    <param id="filters.alignedWord.patternFilter.filterType">Plain text</param>
                    <param id="filters.groupPattern.filterType">Plain text</param>
                    <param id="filters.primary_target.filter">\w</param>
                    <param id="filters.primary_target.filterType">Phonex</param>
                    <param id="filters.searchBy.searchBy">Word</param>
                    <param id="filters.speaker.age1Comparator">equal to</param>
                    <param id="filters.speaker.age2Comparator">equal to</param>
                    <param id="filters.speaker.ageOperator">(select operator)</param>
                    <param id="filters.speaker.participantRole">(select role)</param>
                    <param id="filters.syllable.otherSyllTypePattern.filterType">Plain text</param>
                    <param id="filters.syllable.syllableType">Any syllable</param>
                    <param id="filters.wordPattern.filterType">Plain text</param>
                    <param id="includeAligned">false</param>
                </script>
            </qry:query>
            <extensions>
                <oga:settings/>
                <oga:meta x="352" y="15"/>
            </extensions>
        </opqry:queryNode>
        <opqry:queryNode id="34c3c8ef8e8547ce" type="ca.phon.app.opgraph.nodes.query.QueryNode">
            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2020-10-15T09:20:06.547-02:30" name="Query Node" uuid="9e0129bf-7179-4cfd-a80c-acf3cce0a8de">
                <script>
                    <source>/*
params =
{enum, searchTier, "IPA Target"|"IPA Actual", 0, "Search Tier"}
;
 */

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var TierList = require("lib/TierList").TierList;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var ResultType = require("lib/PhonScriptConstants").ResultType;
var SearchByOptions = require("lib/SearchByOptions").SearchByOptions;

/********************************
 * Setup params
 *******************************/

var filters = {
	"primary_actual": new PatternFilter("filters.primary_actual"),
	"searchBy": new SearchByOptions("filters.searchBy"),
	"targetResultFilter": new PatternFilter("filters.targetResultFilter"),
	"actualResultFilter": new PatternFilter("filters.actualResultFilter"),
	"group": new GroupFilter("filters.group"),
	"groupTiers": new TierList("filters.groupTiers"),
	"groupPattern": new PatternFilter("filters.groupPattern"),
	"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
	"word": new WordFilter("filters.word"),
	"wordTiers": new TierList("filters.wordTiers"),
	"wordPattern": new PatternFilter("filters.wordPattern"),
	"alignedWord": new AlignedWordFilter("filters.alignedWord"),
	"syllable": new SyllableFilter("filters.syllable"),
	"speaker": new ParticipantFilter("filters.speaker")
};

var includeAlignedParamInfo = {
	"id": "includeAligned",
	"title": "",
	"desc": "Include aligned phones",
	"def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {
	filters.primary = filters.primary_actual;
	
	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	var insertIdx = 1;

	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");

	includeAlignedParam = new BooleanScriptParam(
	includeAlignedParamInfo.id,
	includeAlignedParamInfo.desc,
	includeAlignedParamInfo.title,
	includeAlignedParamInfo.def);

	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);

	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);

	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Add Aligned Groups&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.groupTiers.param_setup(params);
	var sep2 = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group Filter&lt;/b&gt;&lt;/html&gt;");
	params.add(sep2);
	filters.alignedGroup.param_setup(params);

	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
	filters.wordPattern.setEnabled(false);

	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Add Aligned Words&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.wordTiers.param_setup(params);

	var wordsep2 = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word Filter&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep2);
	filters.alignedWord.param_setup(params);
	var searchByWordListener = new java.beans.PropertyChangeListener {
		propertyChange: function (e) {
			var enabled = e.source.getValue(e.source.paramId);
			filters.wordPattern.setEnabled(enabled);
			filters.alignedWord.setEnabled(enabled);
		}
	};
	filters.word.searchByWordParam.addPropertyChangeListener(filters.word.searchByWordParam.paramId, searchByWordListener);
	var enabled = filters.word.searchByWordParam.getValue(filters.word.searchByWordParam.paramId);
	filters.wordPattern.setEnabled(enabled);
	filters.alignedWord.setEnabled(enabled);

	filters.syllable.param_setup(params);
	
	filters.searchBy.includeSyllableOption = true;
	filters.searchBy.param_setup(params, filters.word.searchByWordParam, filters.syllable.searchBySyllableParam, insertIdx);
	
	filters.speaker.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
	session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
	filters.primary = filters.primary_actual;
	
	// check participant filter
	if (! filters.speaker.check_speaker(record.speaker)) return;

	// check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
	if (filters.groupPattern.isUseFilter()) {
		groups = filters.groupPattern.filter_groups(groups, searchTier);
	}

	// check aligned group for each group returned
	if (filters.alignedGroup.isUseFilter()) {
		groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for (var i = 0; i &lt; groups.length; i++) {
		var group = groups[i];

		var groupAlignedData = filters.groupTiers.getAlignedTierData(record, group, "Group");

		var groupAlignedResults = groupAlignedData[0];
		var groupAlignedMeta = groupAlignedData[1];

		if (filters.alignedGroup.isUseFilter()) {
			var tierList = new TierList("group");
			tierList.setTiers(filters.alignedGroup.tier);

			var alignedGroupData = tierList.getAlignedTierData(record, group, "Group");
			for(var j = 0; j &lt; alignedGroupData[0].length; j++) {
				groupAlignedResults.push(alignedGroupData[0][j]);
			}
		}

		var ipa = (searchTier == "IPA Target" ? group.IPATarget: group.IPAActual);
		var phoneMap = group.phoneAlignment;

		var toSearch = new Array();
		toSearch.push([ipa, groupAlignedResults, groupAlignedMeta]);

		// search by word?
		if (filters.word.isUseFilter()) {
			toSearch.length = 0;
			var selectedWords = filters.word.getRequestedWords(group, searchTier);
			for (j = 0; j &lt; selectedWords.length; j++) {
				var word = selectedWords[j];

				var wordAlignedMeta = new java.util.LinkedHashMap();
				wordAlignedMeta.putAll(groupAlignedMeta);

				var wordAlignedResults = new Array();
				for(var k = 0; k &lt; groupAlignedResults.length; k++) {
					wordAlignedResults.push(groupAlignedResults[k]);
				}

				var wordAlignedData = filters.wordTiers.getAlignedTierData(record, word, "Word");
				for(var k = 0; k &lt; wordAlignedData[0].length; k++) {
					wordAlignedResults.push(wordAlignedData[0][k]);
				}
				wordAlignedMeta.putAll(wordAlignedData[1]);

				var wordIpa = (searchTier == "IPA Target" ? word.IPATarget: word.IPAActual);
				var addWord = (wordIpa != null);
				// check word pattern if necessary
				if (filters.wordPattern.isUseFilter()) {
					addWord = filters.wordPattern.check_filter(wordIpa);
				}

				// check aligned word pattern if necessary
				if (filters.alignedWord.isUseFilter()) {
					addWord = filters.alignedWord.check_word(word);

					var tierList = new TierList("word");
					tierList.setTiers(filters.alignedWord.tier);

					var alignedWordData = tierList.getAlignedTierData(record, word, "Word");
					for(var k = 0; k &lt; alignedWordData[0].length; k++) {
						wordAlignedResults.push(alignedWordData[0][k]);
					}
				}

				if (addWord == true) {
					toSearch.push([wordIpa, wordAlignedResults, wordAlignedMeta]);
				}
			}
		}

		// search by syllable?
		if (filters.syllable.isUseFilter()) {
			var syllList = new Array();
			for (j = 0; j &lt; toSearch.length; j++) {
				var obj = toSearch[j][0];
				var aligned = (phoneMap != null ? phoneMap: new Packages.ca.phon.ipa.alignment.PhoneMap());
				var sylls = filters.syllable.getRequestedSyllables(obj, aligned);

				for (k = 0; k &lt; sylls.length; k++) {
					syllList.push([sylls[k], toSearch[j][1], toSearch[j][2]]);
				}
			}
			toSearch = syllList;
		}

		for (j = 0; j &lt; toSearch.length; j++) {
			var obj = toSearch[j][0];
			var alignedResults = toSearch[j][1];
			var alignedMetadata = toSearch[j][2];
			var matches = filters.primary.find_pattern(obj);
			var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter: filters.actualResultFilter);
			var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter: filters.targetResultFilter);

			for (k = 0; k &lt; matches.length; k++) {
				var match = matches[k];

				if (match.groups) {
					var xgrp = match.groups[ "X"];
					if (xgrp) {
						var newMatch = {
							start: xgrp.start,
							end: xgrp.end,
							value: xgrp.value,
							groups: match.groups
						};
						match = newMatch;
					}
				}

				if (primaryFilter.isUseFilter()) {
					if (! primaryFilter.check_filter(new IPATranscript(match.value))) {
						continue;
					}
				}

				var result = factory.createResult();
				// calculate start/end positions of data in text
				var startIndex = ipa.stringIndexOf(match.value);
				var length = match.value.toString().length();

				result.recordIndex = recordIndex;
				result.schema = "LINEAR";

				var rv = factory.createResultValue();
				rv.tierName = searchTier;
				rv.groupIndex = group.groupIndex;
				rv.range = new Range(startIndex, startIndex + length, false);
				rv.data = (match.value != null ? new IPATranscript(match.value): new IPATranscript());
				result.addResultValue(rv);

				var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual(): group.getIPATarget());
				var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()): null);
				var alignedIpaElements = (aligned != null ? new IPATranscript(aligned): new IPATranscript());


				// find location of aligned value in group
				var groupStartIdx =
				(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)): 0);
				var groupEndIdx =
				(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length() -1)): 0);
				var alignedIpa =
				(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx + 1): new IPATranscript());

				if (alignedFilter.isUseFilter()) {
					if (! alignedFilter.check_filter(alignedIpa)) {
						continue;
					}
				}

				if (includeAligned == true) {
					var alignedRv = factory.createResultValue();
					alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual": "IPA Target");
					alignedRv.groupIndex = group.groupIndex;
					if (aligned != null &amp;&amp; aligned.size() &gt; 0) {
						var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
						var alignedLength = alignedIpa.toString().length();

						alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
						alignedRv.data = alignedIpa;
					} else {
						alignedRv.range = new Range(0, 0, true);
						alignedRv.data = "";
					}

					result.addResultValue(alignedRv);
					result.schema = "ALIGNED";
				}

				for(var alignedResultIdx = 0; alignedResultIdx &lt; alignedResults.length; alignedResultIdx++) {
					result.addResultValue(alignedResults[alignedResultIdx]);
				}
				result.metadata.putAll(alignedMetadata);

				// append named-group information (if any)
				if (match.groups) {
					groupKeys = Object.keys(match.groups);
					for (keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
						var key = groupKeys[keyIdx];
						if (/^[a-zA-Z]\w*$/.test(key) &amp;&amp; key != 'X') {
							result.metadata.put(key, match.groups[key].value.toString());
						}
					}
				}

				results.addResult(result);
			}
		}
	}
}
</source>
                    <param id="filters.alignedGroup.patternFilter.filterType">Plain text</param>
                    <param id="filters.alignedWord.patternFilter.filterType">Plain text</param>
                    <param id="filters.groupPattern.filterType">Plain text</param>
                    <param id="filters.primary_actual.filter">\w</param>
                    <param id="filters.primary_actual.filterType">Phonex</param>
                    <param id="filters.searchBy.searchBy">Word</param>
                    <param id="filters.speaker.age1Comparator">equal to</param>
                    <param id="filters.speaker.age2Comparator">equal to</param>
                    <param id="filters.speaker.ageOperator">(select operator)</param>
                    <param id="filters.speaker.participantRole">(select role)</param>
                    <param id="filters.syllable.otherSyllTypePattern.filterType">Plain text</param>
                    <param id="filters.syllable.syllableType">Any syllable</param>
                    <param id="filters.wordPattern.filterType">Plain text</param>
                    <param id="includeAligned">false</param>
                    <param id="searchTier">IPA Actual</param>
                </script>
            </qry:query>
            <extensions>
                <oga:settings/>
                <oga:meta x="354" y="225"/>
            </extensions>
        </opqry:queryNode>
        <ogcn:macro id="d4e5e1df1bf7410b" name="Get Report Name" type="ca.phon.opgraph.nodes.general.MacroNode">
            <graph id="16b062d8">
                <node id="d4c390a1e5434491" name="String#&lt;init&gt;(String)" type="class:ca.phon.opgraph.nodes.reflect.ConstructorNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.classMember"><![CDATA[<init>(java.lang.String)]]></oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.declaredClass"><![CDATA[java.lang.String]]></oga:property>
                        </oga:settings>
                        <oga:meta x="78" y="88">
                            <oga:default for="arg1" type="java.lang.String">reportTitle</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <node id="21b928ef08ad49aa" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[get(java.lang.Object)]]></oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                        </oga:settings>
                        <oga:meta x="236" y="91"/>
                    </extensions>
                </node>
                <node id="e9126128412b4f05" name="Object#toString()" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                        </oga:settings>
                        <oga:meta x="393" y="100"/>
                    </extensions>
                </node>
                <link dest="21b928ef08ad49aa" destField="arg1" source="d4c390a1e5434491" sourceField="value"/>
                <link dest="e9126128412b4f05" destField="obj" source="21b928ef08ad49aa" sourceField="value"/>
            </graph>
            <ogcn:published_input field="obj" name="parameters" ref="21b928ef08ad49aa"/>
            <ogcn:published_output field="value" name="value" ref="e9126128412b4f05"/>
            <extensions>
                <oga:meta x="327" y="511"/>
            </extensions>
        </ogcn:macro>
        <node id="aeff2945c484cef" type="class:ca.phon.app.opgraph.nodes.log.PrintScriptParameters">
            <extensions>
                <oga:settings>
                    <oga:property key="excludes"><![CDATA[@General]]></oga:property>
                    <oga:property key="printOnlyChanged"><![CDATA[true]]></oga:property>
                    <oga:property key="includes"><![CDATA[@IPA Target Options
@IPA Actual Options]]></oga:property>
                </oga:settings>
                <oga:meta x="553" y="622"/>
            </extensions>
        </node>
        <node id="7df461c2" type="class:ca.phon.app.opgraph.nodes.table.ResultsToTableNode">
            <extensions>
                <oga:settings>
                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                </oga:settings>
                <oga:meta x="589" y="15"/>
            </extensions>
        </node>
        <node id="6dfac37ee1204f60" type="class:ca.phon.app.opgraph.nodes.table.ResultsToTableNode">
            <extensions>
                <oga:settings>
                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                </oga:settings>
                <oga:meta x="593" y="234"/>
            </extensions>
        </node>
        <node id="5f935232" type="class:ca.phon.app.opgraph.nodes.report.NewReportNode">
            <extensions>
                <oga:settings/>
                <oga:meta x="551" y="515"/>
            </extensions>
        </node>
        <node id="7ebf94c11c254b8a" name="Split Table by Speaker" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
            <output name="keySet" type="java.util.Set">Unique values from given column name</output>
            <output name="tableMap" type="java.util.Map">Map of key -&gt; table values</output>
            <extensions>
                <oga:settings>
                    <oga:property key="__script"><![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

 /**
  * Split Table.js
  *
  * Script for use with ca.phon.app.opgraph.nodes.table.TableScriptNode
  *
  * Split table based on column name.  Two outputs
  * are produced, a set of keys from the column used in the filter  and a
  * map of key -> table values.
  */

var columnParamInfo = {
	"id": "columnName",
	"title": "Column Name",
	"def": "",
	"prompt": "Enter column name"
}

function setup_params(params) {
	var columnParam = new StringScriptParam(
		columnParamInfo.id,
		columnParamInfo.title,
		columnParamInfo.def);
	columnParam.setPrompt(columnParamInfo.prompt);
	params.add(columnParam);
}

// add custom inputs/outputs here
function init(inputs, outputs) {
	outputs.add("keySet", "Unique values from given column name", false, java.util.Set);
	outputs.add("tableMap", "Map of key -> table values", false, java.util.Map);
}

/*
 * Create a new table with the same schema as the inputTable
 */
function setupTable(inputTable) {
    var table = new DefaultTableDataSource();
    for(c = 0; c < inputTable.columnCount; c++) {
	    var colTitle = inputTable.getColumnTitle(c);
	    table.setColumnTitle(c, colTitle);
	}
	return table;
}

// run operation on table
function tableOp(context, table) {
	// find table column index
	col = table.getColumnIndex(columnName);

	if(col < 0)
		return; // column not found

	var tableMap = new java.util.LinkedHashMap();

	for(row = 0; row < table.rowCount; row++) {
	    // use string value as row key
		var rowKey = Packages.ca.phon.formatter.FormatterUtil.format(table.getValueAt(row, col));

		var keyTable = tableMap.get(rowKey);
		if(keyTable == null) {
		    keyTable = setupTable(table);
		    tableMap.put(rowKey, keyTable);
		}
		keyTable.addRow(table.getRow(row));
	}

	context.put("keySet", tableMap.keySet());
	context.put("tableMap", tableMap);
}
]]></oga:property>
                    <oga:property key="columnName"><![CDATA[Speaker]]></oga:property>
                </oga:settings>
                <oga:meta x="786" y="15"/>
            </extensions>
        </node>
        <node id="132ebfd991bc4754" name="Split Table by Speaker" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
            <output name="keySet" type="java.util.Set">Unique values from given column name</output>
            <output name="tableMap" type="java.util.Map">Map of key -&gt; table values</output>
            <extensions>
                <oga:settings>
                    <oga:property key="__script"><![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

 /**
  * Split Table.js
  *
  * Script for use with ca.phon.app.opgraph.nodes.table.TableScriptNode
  *
  * Split table based on column name.  Two outputs
  * are produced, a set of keys from the column used in the filter  and a
  * map of key -> table values.
  */

var columnParamInfo = {
	"id": "columnName",
	"title": "Column Name",
	"def": "",
	"prompt": "Enter column name"
}

function setup_params(params) {
	var columnParam = new StringScriptParam(
		columnParamInfo.id,
		columnParamInfo.title,
		columnParamInfo.def);
	columnParam.setPrompt(columnParamInfo.prompt);
	params.add(columnParam);
}

// add custom inputs/outputs here
function init(inputs, outputs) {
	outputs.add("keySet", "Unique values from given column name", false, java.util.Set);
	outputs.add("tableMap", "Map of key -> table values", false, java.util.Map);
}

/*
 * Create a new table with the same schema as the inputTable
 */
function setupTable(inputTable) {
    var table = new DefaultTableDataSource();
    for(c = 0; c < inputTable.columnCount; c++) {
	    var colTitle = inputTable.getColumnTitle(c);
	    table.setColumnTitle(c, colTitle);
	}
	return table;
}

// run operation on table
function tableOp(context, table) {
	// find table column index
	col = table.getColumnIndex(columnName);

	if(col < 0)
		return; // column not found

	var tableMap = new java.util.LinkedHashMap();

	for(row = 0; row < table.rowCount; row++) {
	    // use string value as row key
		var rowKey = Packages.ca.phon.formatter.FormatterUtil.format(table.getValueAt(row, col));

		var keyTable = tableMap.get(rowKey);
		if(keyTable == null) {
		    keyTable = setupTable(table);
		    tableMap.put(rowKey, keyTable);
		}
		keyTable.addRow(table.getRow(row));
	}

	context.put("keySet", tableMap.keySet());
	context.put("tableMap", tableMap);
}
]]></oga:property>
                    <oga:property key="columnName"><![CDATA[Speaker]]></oga:property>
                </oga:settings>
                <oga:meta x="788" y="245"/>
            </extensions>
        </node>
        <node id="6e83912c" type="class:ca.phon.app.opgraph.nodes.report.TextSectionNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.phon.app.opgraph.nodes.report.TextSectionNode.text"/>
                </oga:settings>
                <oga:meta x="795" y="513">
                    <oga:default for="sectionName" type="java.lang.String">Parameters</oga:default>
                </oga:meta>
            </extensions>
        </node>
        <node id="500cc6c5" name="Summary Section Header" type="class:ca.phon.app.opgraph.nodes.report.ReportSectionHeaderNode">
            <extensions>
                <oga:meta x="794" y="689">
                    <oga:default for="sectionName" type="java.lang.String">Summary</oga:default>
                </oga:meta>
            </extensions>
        </node>
        <node id="523fab4720824204" name="Aggregate Section Header" type="class:ca.phon.app.opgraph.nodes.report.ReportSectionHeaderNode">
            <extensions>
                <oga:meta x="798" y="838">
                    <oga:default for="sectionName" type="java.lang.String">Aggregate</oga:default>
                </oga:meta>
            </extensions>
        </node>
        <node id="6d2fd73461774ca5" name="Breakdown Section Header" type="class:ca.phon.app.opgraph.nodes.report.ReportSectionHeaderNode">
            <extensions>
                <oga:meta x="796" y="975">
                    <oga:default for="sectionName" type="java.lang.String">Breakdown</oga:default>
                </oga:meta>
            </extensions>
        </node>
        <ogcn:macro id="737b3ce1" name="For Each Participant" type="ca.phon.opgraph.nodes.reflect.IterableClassNode">
            <graph id="5656392e">
                <node id="57d85ddb" name="Current Object" type="class:ca.phon.opgraph.nodes.reflect.ContextualItemClassNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <node id="98c58a7f658a49d6" name="IPA Target Table Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                        </oga:settings>
                        <oga:meta x="64" y="229"/>
                    </extensions>
                </node>
                <node id="f4a1646672c04d38" name="IPA Actual Table Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                        </oga:settings>
                        <oga:meta x="64" y="330"/>
                    </extensions>
                </node>
                <node id="f1b4eff8ad9f4cb7" name="Selected Sessions" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                        </oga:settings>
                        <oga:meta x="64" y="431"/>
                    </extensions>
                </node>
                <ogcn:macro id="ed7ad328cc134c2b" name="Create Summary Table" type="ca.phon.opgraph.nodes.general.MacroNode">
                    <graph id="4583a65f">
                        <node id="e608a68c057340f5" name="DefaultTableDataSource#&lt;init&gt;()" type="class:ca.phon.opgraph.nodes.reflect.ConstructorNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.classMember"><![CDATA[<init>()]]></oga:property>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <node id="d8cb41011b8a4c18" name="Setup Column Names" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[function tableOp(context, table) {
	// add headers to table
	table.setColumnTitle(0, "Session");
	table.setColumnTitle(1, "Role");
	table.setColumnTitle(2, "Age");
	table.setColumnTitle(3, "Unique Target Consonants");
	table.setColumnTitle(4, "Unique Target Vowels");
	table.setColumnTitle(5, "Unique Actual Consonants");
	table.setColumnTitle(6, "Unique Actual Vowels");
}
]]></oga:property>
                                </oga:settings>
                                <oga:meta x="299" y="15"/>
                            </extensions>
                        </node>
                        <link dest="d8cb41011b8a4c18" destField="table" source="e608a68c057340f5" sourceField="value"/>
                        <extensions>
                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                        </extensions>
                    </graph>
                    <ogcn:published_output field="table" name="table" ref="d8cb41011b8a4c18"/>
                    <extensions>
                        <oga:meta x="407" y="521"/>
                    </extensions>
                </ogcn:macro>
                <node id="4d14b5692fd944a8" name="Summary Node" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]></oga:property>
                        </oga:settings>
                        <oga:meta x="65" y="522"/>
                    </extensions>
                </node>
                <node id="7963b2330cea4be6" name="Breakdown Node" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]></oga:property>
                        </oga:settings>
                        <oga:meta x="62" y="733"/>
                    </extensions>
                </node>
                <node id="ba111f245afc4183" name="Aggregate Node" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]></oga:property>
                        </oga:settings>
                        <oga:meta x="71" y="963"/>
                    </extensions>
                </node>
                <node id="46f9661219824152" name="To Participant Object" type="class:ca.phon.opgraph.nodes.reflect.ObjectCastNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectCastNode.declaredClass"><![CDATA[ca.phon.session.Participant]]></oga:property>
                        </oga:settings>
                        <oga:meta x="212" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="2513d879596a40c8" name="Get Table of Results For Speaker" type="ca.phon.opgraph.nodes.general.MacroNode">
                    <graph id="4bad6243">
                        <node id="15ad0ef235824211" name="Object#toString()" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                                <oga:meta x="105" y="70"/>
                            </extensions>
                        </node>
                        <node id="23a366c1a5eb44fe" name="String" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.lang.String]]></oga:property>
                                </oga:settings>
                                <oga:meta x="48" y="234"/>
                            </extensions>
                        </node>
                        <node id="32fc5e6e24674cc3" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[get(java.lang.Object)]]></oga:property>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                </oga:settings>
                                <oga:meta x="296" y="73"/>
                            </extensions>
                        </node>
                        <node id="7316168d1bd4568" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
                            <input name="table" optional="false"/>
                            <input name="tierName" optional="false"/>
                            <output name="exists" type="java.lang.Boolean">does table exist</output>
                            <output name="table" type="ca.phon.query.report.datasource.DefaultTableDataSource">table if exists, undefined otherwise</output>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[
// setup input/output fields
function init(inputFields, outputFields) {
	inputFields.add("table", "");
	inputFields.add("tierName", "");
	outputFields.add("exists", "does table exist", false, java.lang.Boolean);
	outputFields.add("table", "table if exists, undefined otherwise", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
}

function run(context) {
	var table = context.get("table");
	var tierName = context.get("tierName");

	context.put("exists", (table != null));

	if(table == null) {
		table = new Packages.ca.phon.query.report.datasource.DefaultTableDataSource();
		table.setColumnTitle(0, "Session");
		table.setColumnTitle(1, tierName);
	}
	context.put("table", table);
}
]]></oga:property>
                                </oga:settings>
                                <oga:meta x="514" y="94"/>
                            </extensions>
                        </node>
                        <link dest="32fc5e6e24674cc3" destField="arg1" source="15ad0ef235824211" sourceField="value"/>
                        <link dest="7316168d1bd4568" destField="table" source="32fc5e6e24674cc3" sourceField="value"/>
                        <link dest="7316168d1bd4568" destField="tierName" source="23a366c1a5eb44fe" sourceField="obj"/>
                        <extensions>
                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                        </extensions>
                    </graph>
                    <ogcn:published_input field="obj" name="speaker" ref="15ad0ef235824211"/>
                    <ogcn:published_input field="obj" name="tableMap" ref="32fc5e6e24674cc3"/>
                    <ogcn:published_input field="obj" name="tierName" ref="23a366c1a5eb44fe"/>
                    <ogcn:published_output field="exists" name="exists" ref="7316168d1bd4568"/>
                    <ogcn:published_output field="table" name="table" ref="7316168d1bd4568"/>
                    <extensions>
                        <oga:meta x="402" y="207">
                            <oga:default for="tierName" type="java.lang.String">IPA Target</oga:default>
                        </oga:meta>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="f7b580dcd80049d7" name="Get Table of Results For Speaker" type="ca.phon.opgraph.nodes.general.MacroNode">
                    <graph id="5da1eb4f">
                        <node id="a59f33a7a0e54a94" name="Object#toString()" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                                <oga:meta x="105" y="70"/>
                            </extensions>
                        </node>
                        <node id="3e219cb5237f46c3" name="String" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.lang.String]]></oga:property>
                                </oga:settings>
                                <oga:meta x="48" y="234"/>
                            </extensions>
                        </node>
                        <node id="95d1c5c589434ff0" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[get(java.lang.Object)]]></oga:property>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                </oga:settings>
                                <oga:meta x="296" y="73"/>
                            </extensions>
                        </node>
                        <node id="76904a67ef1241e8" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
                            <input name="table" optional="false"/>
                            <input name="tierName" optional="false"/>
                            <output name="exists" type="java.lang.Boolean">does table exist</output>
                            <output name="table" type="ca.phon.query.report.datasource.DefaultTableDataSource">table if exists, undefined otherwise</output>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[
// setup input/output fields
function init(inputFields, outputFields) {
	inputFields.add("table", "");
	inputFields.add("tierName", "");
	outputFields.add("exists", "does table exist", false, java.lang.Boolean);
	outputFields.add("table", "table if exists, undefined otherwise", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
}

function run(context) {
	var table = context.get("table");
	var tierName = context.get("tierName");

	context.put("exists", (table != null));

	if(table == null) {
		table = new Packages.ca.phon.query.report.datasource.DefaultTableDataSource();
		table.setColumnTitle(0, "Session");
		table.setColumnTitle(1, tierName);
	}
	context.put("table", table);
}
]]></oga:property>
                                </oga:settings>
                                <oga:meta x="514" y="94"/>
                            </extensions>
                        </node>
                        <link dest="95d1c5c589434ff0" destField="arg1" source="a59f33a7a0e54a94" sourceField="value"/>
                        <link dest="76904a67ef1241e8" destField="table" source="95d1c5c589434ff0" sourceField="value"/>
                        <link dest="76904a67ef1241e8" destField="tierName" source="3e219cb5237f46c3" sourceField="obj"/>
                        <extensions>
                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                        </extensions>
                    </graph>
                    <ogcn:published_input field="obj" name="speaker" ref="a59f33a7a0e54a94"/>
                    <ogcn:published_input field="obj" name="tableMap" ref="95d1c5c589434ff0"/>
                    <ogcn:published_input field="obj" name="tierName" ref="3e219cb5237f46c3"/>
                    <ogcn:published_output field="exists" name="exists" ref="76904a67ef1241e8"/>
                    <ogcn:published_output field="table" name="table" ref="76904a67ef1241e8"/>
                    <extensions>
                        <oga:meta x="404" y="367">
                            <oga:default for="tierName" type="java.lang.String">IPA Actual</oga:default>
                        </oga:meta>
                    </extensions>
                </ogcn:macro>
                <node id="32a74feb" type="class:ca.phon.opgraph.nodes.general.ArrayNode">
                    <input name="object1" optional="false">object in array</input>
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.general.ArrayNode.numObjects"><![CDATA[1]]></oga:property>
                        </oga:settings>
                        <oga:meta x="708" y="547"/>
                    </extensions>
                </node>
                <node id="1bd946c2" type="class:ca.phon.opgraph.nodes.logic.LogicalOrNode">
                    <extensions>
                        <oga:meta x="751" y="308"/>
                    </extensions>
                </node>
                <node id="7331a357" type="class:ca.phon.opgraph.nodes.general.TextNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.general.TextNode.text"><![CDATA[%s]]></oga:property>
                        </oga:settings>
                        <oga:meta x="908" y="545"/>
                    </extensions>
                </node>
                <ogcn:macro id="4a1ba1f0" name="If Speaker has Results" type="ca.phon.opgraph.nodes.general.MacroNode">
                    <graph id="614056ca">
                        <node id="37d2f72f" name="IPA Target Table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]></oga:property>
                                </oga:settings>
                                <oga:meta x="54" y="82"/>
                            </extensions>
                        </node>
                        <node id="31a55968" name="IPA Actual Table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]></oga:property>
                                </oga:settings>
                                <oga:meta x="54" y="243"/>
                            </extensions>
                        </node>
                        <node id="61cb565b6af4417d" name="Selected Sessions" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="54" y="404"/>
                            </extensions>
                        </node>
                        <node id="6440bd3329664caa" name="Participant" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.session.Participant]]></oga:property>
                                </oga:settings>
                                <oga:meta x="54" y="505"/>
                            </extensions>
                        </node>
                        <node id="c8ff0dae984a4ddb" name="Summary Table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.TableDataSource]]></oga:property>
                                </oga:settings>
                                <oga:meta x="54" y="826"/>
                            </extensions>
                        </node>
                        <node id="16e33d770ac24d15" name="Breakdown Node" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]></oga:property>
                                </oga:settings>
                                <oga:meta x="57" y="982"/>
                            </extensions>
                        </node>
                        <node id="8d2876242b8a4bec" name="Aggregate Node" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]></oga:property>
                                </oga:settings>
                                <oga:meta x="61" y="1205"/>
                            </extensions>
                        </node>
                        <node id="41e09b53d3be45f9" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:automaticConfiguration configureAutomatically="false">
                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                        <opqry:autoColumns caseSensitive="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                    </opqry:automaticConfiguration>
                                    <opqry:groupBy caseSensitive="false" column="Session">
                                        <opqry:ignoreDiacritics ignore="true" onlyOrExcept="except"/>
                                    </opqry:groupBy>
                                    <opqry:column caseSensitive="false" column="IPA Target">
                                        <opqry:ignoreDiacritics ignore="true" onlyOrExcept="except"/>
                                    </opqry:column>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="434" y="129"/>
                            </extensions>
                        </node>
                        <node id="c226d4ebdadc4810" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:automaticConfiguration configureAutomatically="false">
                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                        <opqry:autoColumns caseSensitive="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                    </opqry:automaticConfiguration>
                                    <opqry:groupBy caseSensitive="false" column="Session">
                                        <opqry:ignoreDiacritics ignore="true" onlyOrExcept="except"/>
                                    </opqry:groupBy>
                                    <opqry:column caseSensitive="false" column="IPA Actual">
                                        <opqry:ignoreDiacritics ignore="true" onlyOrExcept="except"/>
                                    </opqry:column>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="435" y="254"/>
                            </extensions>
                        </node>
                        <node id="d42e2b2ff5214392" name="Split Table by Session" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                            <output name="keySet" type="java.util.Set">Unique values from given column name</output>
                            <output name="tableMap" type="java.util.Map">Map of key -&gt; table values</output>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

 /**
  * Split Table.js
  *
  * Script for use with ca.phon.app.opgraph.nodes.table.TableScriptNode
  *
  * Split table based on column name.  Two outputs
  * are produced, a set of keys from the column used in the filter  and a
  * map of key -> table values.
  */

var columnParamInfo = {
	"id": "columnName",
	"title": "Column Name",
	"def": "",
	"prompt": "Enter column name"
}

function setup_params(params) {
	var columnParam = new StringScriptParam(
		columnParamInfo.id,
		columnParamInfo.title,
		columnParamInfo.def);
	columnParam.setPrompt(columnParamInfo.prompt);
	params.add(columnParam);
}

// add custom inputs/outputs here
function init(inputs, outputs) {
	outputs.add("keySet", "Unique values from given column name", false, java.util.Set);
	outputs.add("tableMap", "Map of key -> table values", false, java.util.Map);
}

/*
 * Create a new table with the same schema as the inputTable
 */
function setupTable(inputTable) {
    var table = new DefaultTableDataSource();
    for(c = 0; c < inputTable.columnCount; c++) {
	    var colTitle = inputTable.getColumnTitle(c);
	    table.setColumnTitle(c, colTitle);
	}
	return table;
}

// run operation on table
function tableOp(context, table) {
	// find table column index
	col = table.getColumnIndex(columnName);

	if(col < 0)
		return; // column not found

	var tableMap = new java.util.LinkedHashMap();

	for(row = 0; row < table.rowCount; row++) {
	    // use string value as row key
		var rowKey = Packages.ca.phon.formatter.FormatterUtil.format(table.getValueAt(row, col));

		var keyTable = tableMap.get(rowKey);
		if(keyTable == null) {
		    keyTable = setupTable(table);
		    tableMap.put(rowKey, keyTable);
		}
		keyTable.addRow(table.getRow(row));
	}

	context.put("keySet", tableMap.keySet());
	context.put("tableMap", tableMap);
}
]]></oga:property>
                                    <oga:property key="columnName"><![CDATA[Session]]></oga:property>
                                </oga:settings>
                                <oga:meta x="428" y="451"/>
                            </extensions>
                        </node>
                        <node id="c28535f22344300" name="Split Table by Session" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                            <output name="keySet" type="java.util.Set">Unique values from given column name</output>
                            <output name="tableMap" type="java.util.Map">Map of key -&gt; table values</output>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

 /**
  * Split Table.js
  *
  * Script for use with ca.phon.app.opgraph.nodes.table.TableScriptNode
  *
  * Split table based on column name.  Two outputs
  * are produced, a set of keys from the column used in the filter  and a
  * map of key -> table values.
  */

var columnParamInfo = {
	"id": "columnName",
	"title": "Column Name",
	"def": "",
	"prompt": "Enter column name"
}

function setup_params(params) {
	var columnParam = new StringScriptParam(
		columnParamInfo.id,
		columnParamInfo.title,
		columnParamInfo.def);
	columnParam.setPrompt(columnParamInfo.prompt);
	params.add(columnParam);
}

// add custom inputs/outputs here
function init(inputs, outputs) {
	outputs.add("keySet", "Unique values from given column name", false, java.util.Set);
	outputs.add("tableMap", "Map of key -> table values", false, java.util.Map);
}

/*
 * Create a new table with the same schema as the inputTable
 */
function setupTable(inputTable) {
    var table = new DefaultTableDataSource();
    for(c = 0; c < inputTable.columnCount; c++) {
	    var colTitle = inputTable.getColumnTitle(c);
	    table.setColumnTitle(c, colTitle);
	}
	return table;
}

// run operation on table
function tableOp(context, table) {
	// find table column index
	col = table.getColumnIndex(columnName);

	if(col < 0)
		return; // column not found

	var tableMap = new java.util.LinkedHashMap();

	for(row = 0; row < table.rowCount; row++) {
	    // use string value as row key
		var rowKey = Packages.ca.phon.formatter.FormatterUtil.format(table.getValueAt(row, col));

		var keyTable = tableMap.get(rowKey);
		if(keyTable == null) {
		    keyTable = setupTable(table);
		    tableMap.put(rowKey, keyTable);
		}
		keyTable.addRow(table.getRow(row));
	}

	context.put("keySet", tableMap.keySet());
	context.put("tableMap", tableMap);
}
]]></oga:property>
                                    <oga:property key="columnName"><![CDATA[Session]]></oga:property>
                                </oga:settings>
                                <oga:meta x="428" y="615"/>
                            </extensions>
                        </node>
                        <node id="c6adbd9781a24f72" name="Object#toString()" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                                <oga:meta x="447" y="1017"/>
                            </extensions>
                        </node>
                        <node id="646e8104067d49ab" name="Object#toString()" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                </oga:settings>
                                <oga:meta x="451" y="1224"/>
                            </extensions>
                        </node>
                        <node id="dc7c7aee5bd44dd5" type="class:ca.phon.app.opgraph.nodes.table.SortNode">
                            <extensions>
                                <opqry:sortoptions autoSortOrder="ascending" configureAutomatically="false">
                                    <opqry:sortBy column="IPA Target" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="650" y="133"/>
                            </extensions>
                        </node>
                        <node id="26a258bf1bf4454" type="class:ca.phon.app.opgraph.nodes.table.SortNode">
                            <extensions>
                                <opqry:sortoptions autoSortOrder="ascending" configureAutomatically="false">
                                    <opqry:sortBy column="IPA Actual" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="649" y="257"/>
                            </extensions>
                        </node>
                        <node id="1817421b" type="class:ca.phon.app.opgraph.nodes.report.ReportSectionHeaderNode">
                            <extensions>
                                <oga:meta x="650" y="1020"/>
                            </extensions>
                        </node>
                        <node id="ea86304fd2194726" type="class:ca.phon.app.opgraph.nodes.report.ReportSectionHeaderNode">
                            <extensions>
                                <oga:meta x="654" y="1227"/>
                            </extensions>
                        </node>
                        <node id="3fdfe6c4" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                                </oga:settings>
                                <oga:meta x="1046" y="101">
                                    <oga:default for="sectionName" type="java.lang.String">IPA Target Inventory</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <node id="2bc9f6a39e244668" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                                </oga:settings>
                                <oga:meta x="1051" y="273">
                                    <oga:default for="sectionName" type="java.lang.String">IPA Actual Inventory</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <ogcn:macro id="153d8dd0" name="For Each Session" type="ca.phon.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="3165774a">
                                <node id="63a39ca2" name="Current Object" type="class:ca.phon.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <node id="179acc7669ef462f" name="IPA Target Table Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="62" y="178"/>
                                    </extensions>
                                </node>
                                <node id="948f9298e2ca4925" name="IPA Actual Table Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="62" y="279"/>
                                    </extensions>
                                </node>
                                <node id="638e4150ec754d7b" name="Participant" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.session.Participant]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="62" y="380"/>
                                    </extensions>
                                </node>
                                <node id="9b97934357e64d50" name="Summary Table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.TableDataSource]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="62" y="701"/>
                                    </extensions>
                                </node>
                                <node id="9e3101f5d3ce463f" name="ReportTreeNode" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="58" y="838"/>
                                    </extensions>
                                </node>
                                <node id="74aba9533824b41" name="Object#toString()" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="212" y="15"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="5200f04eaf4b41b8" name="Get Table for Session" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="48471dc0">
                                        <node id="cd727de3e6764379" name="Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="244" y="68"/>
                                            </extensions>
                                        </node>
                                        <node id="d46b785" name="Tier Name" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.lang.String]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="78" y="247"/>
                                            </extensions>
                                        </node>
                                        <node id="84d8e7c095354d94" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[get(java.lang.Object)]]></oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="401" y="69"/>
                                            </extensions>
                                        </node>
                                        <node id="83c6188063a4a61" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
                                            <input name="table" optional="false"/>
                                            <input name="tierName" optional="false"/>
                                            <output name="exists" type="java.lang.Boolean">does table exist</output>
                                            <output name="table" type="ca.phon.query.report.datasource.DefaultTableDataSource">table if exists, undefined otherwise</output>
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="__script"><![CDATA[
// setup input/output fields
function init(inputFields, outputFields) {
	inputFields.add("table", "");
	inputFields.add("tierName", "");
	outputFields.add("exists", "does table exist", false, java.lang.Boolean);
	outputFields.add("table", "table if exists, undefined otherwise", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
}

function run(context) {
	var table = context.get("table");
	var tierName = context.get("tierName");

	context.put("exists", (table != null));

	if(table == null) {
		table = new Packages.ca.phon.query.report.datasource.DefaultTableDataSource();
		table.setColumnTitle(0, "Session");
		table.setColumnTitle(1, tierName);
	}
	context.put("table", table);
}
]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="590" y="73"/>
                                            </extensions>
                                        </node>
                                        <link dest="84d8e7c095354d94" destField="obj" source="cd727de3e6764379" sourceField="obj"/>
                                        <link dest="83c6188063a4a61" destField="table" source="84d8e7c095354d94" sourceField="value"/>
                                        <link dest="83c6188063a4a61" destField="tierName" source="d46b785" sourceField="obj"/>
                                        <extensions>
                                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                                        </extensions>
                                    </graph>
                                    <ogcn:published_input field="arg1" name="sessionName" ref="84d8e7c095354d94"/>
                                    <ogcn:published_input field="obj" name="tableMap" ref="cd727de3e6764379"/>
                                    <ogcn:published_input field="obj" name="tierName" ref="d46b785"/>
                                    <ogcn:published_output field="exists" name="exists" ref="83c6188063a4a61"/>
                                    <ogcn:published_output field="table" name="table" ref="83c6188063a4a61"/>
                                    <extensions>
                                        <oga:meta x="430" y="246">
                                            <oga:default for="tierName" type="java.lang.String">IPA Target</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </ogcn:macro>
                                <ogcn:macro id="2e806ecc316b48cf" name="Get Table for Session" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="594d6dd5">
                                        <node id="7f2a0eb56dd84111" name="Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="244" y="68"/>
                                            </extensions>
                                        </node>
                                        <node id="8be533b036684020" name="Tier Name" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.lang.String]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="78" y="247"/>
                                            </extensions>
                                        </node>
                                        <node id="89bbcaf0b2214cfb" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[get(java.lang.Object)]]></oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="401" y="69"/>
                                            </extensions>
                                        </node>
                                        <node id="844e9a2c7d5406c" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
                                            <input name="table" optional="false"/>
                                            <input name="tierName" optional="false"/>
                                            <output name="exists" type="java.lang.Boolean">does table exist</output>
                                            <output name="table" type="ca.phon.query.report.datasource.DefaultTableDataSource">table if exists, undefined otherwise</output>
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="__script"><![CDATA[
// setup input/output fields
function init(inputFields, outputFields) {
	inputFields.add("table", "");
	inputFields.add("tierName", "");
	outputFields.add("exists", "does table exist", false, java.lang.Boolean);
	outputFields.add("table", "table if exists, undefined otherwise", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
}

function run(context) {
	var table = context.get("table");
	var tierName = context.get("tierName");

	context.put("exists", (table != null));

	if(table == null) {
		table = new Packages.ca.phon.query.report.datasource.DefaultTableDataSource();
		table.setColumnTitle(0, "Session");
		table.setColumnTitle(1, tierName);
	}
	context.put("table", table);
}
]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="590" y="72"/>
                                            </extensions>
                                        </node>
                                        <link dest="89bbcaf0b2214cfb" destField="obj" source="7f2a0eb56dd84111" sourceField="obj"/>
                                        <link dest="844e9a2c7d5406c" destField="table" source="89bbcaf0b2214cfb" sourceField="value"/>
                                        <link dest="844e9a2c7d5406c" destField="tierName" source="8be533b036684020" sourceField="obj"/>
                                        <extensions>
                                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                                        </extensions>
                                    </graph>
                                    <ogcn:published_input field="arg1" name="sessionName" ref="89bbcaf0b2214cfb"/>
                                    <ogcn:published_input field="obj" name="tableMap" ref="7f2a0eb56dd84111"/>
                                    <ogcn:published_input field="obj" name="tierName" ref="8be533b036684020"/>
                                    <ogcn:published_output field="exists" name="exists" ref="844e9a2c7d5406c"/>
                                    <ogcn:published_output field="table" name="table" ref="844e9a2c7d5406c"/>
                                    <extensions>
                                        <oga:meta x="426" y="403">
                                            <oga:default for="tierName" type="java.lang.String">IPA Actual</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </ogcn:macro>
                                <node id="127f8686" type="class:ca.phon.opgraph.nodes.logic.LogicalOrNode">
                                    <extensions>
                                        <oga:meta x="698" y="321"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="79c23a8b" name="If Speaker has Results for Session" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="7d00ba13">
                                        <node id="7f0afc8c" name="IPA Target Table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="63" y="96"/>
                                            </extensions>
                                        </node>
                                        <node id="1f1f5d31" name="IPA Actual Table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="63" y="257"/>
                                            </extensions>
                                        </node>
                                        <node id="5ded2c0b0e06418c" name="Participant" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.session.Participant]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="63" y="418"/>
                                            </extensions>
                                        </node>
                                        <node id="1553be736ae40bf" name="Session Path" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="63" y="739"/>
                                            </extensions>
                                        </node>
                                        <node id="256ab4efb46c4984" name="Summary Table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.TableDataSource]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="63" y="840"/>
                                            </extensions>
                                        </node>
                                        <node id="5e6a9c8c" name="ReportTreeNode" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="57" y="982"/>
                                            </extensions>
                                        </node>
                                        <node id="535b6fe5" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                                            <extensions>
                                                <opqry:inventoryoptions>
                                                    <opqry:automaticConfiguration configureAutomatically="false">
                                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                                        <opqry:autoColumns caseSensitive="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                                    </opqry:automaticConfiguration>
                                                    <opqry:column caseSensitive="false" column="IPA Target">
                                                        <opqry:ignoreDiacritics ignore="true" onlyOrExcept="except"/>
                                                    </opqry:column>
                                                </opqry:inventoryoptions>
                                                <oga:settings/>
                                                <oga:meta x="365" y="99"/>
                                            </extensions>
                                        </node>
                                        <node id="aa13f4447f974342" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                                            <extensions>
                                                <opqry:inventoryoptions>
                                                    <opqry:automaticConfiguration configureAutomatically="false">
                                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                                        <opqry:autoColumns caseSensitive="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                                    </opqry:automaticConfiguration>
                                                    <opqry:column caseSensitive="false" column="IPA Actual">
                                                        <opqry:ignoreDiacritics ignore="true" onlyOrExcept="except"/>
                                                    </opqry:column>
                                                </opqry:inventoryoptions>
                                                <oga:settings/>
                                                <oga:meta x="365" y="231"/>
                                            </extensions>
                                        </node>
                                        <node id="6b850613" name="Object#toString()" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="742" y="268"/>
                                            </extensions>
                                        </node>
                                        <node id="11e6fe5b" type="class:ca.phon.app.opgraph.nodes.table.MergeTablesNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="keyColumnName"><![CDATA[Phone]]></oga:property>
                                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                                    <oga:property key="table1ColumnSuffix"/>
                                                    <oga:property key="table2ColumnPrefix"><![CDATA[IPA Actual ]]></oga:property>
                                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                                    <oga:property key="table1ColumnPrefix"><![CDATA[IPA Target ]]></oga:property>
                                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                                    <oga:property key="table2ColumnSuffix"/>
                                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="557" y="147"/>
                                            </extensions>
                                        </node>
                                        <node id="49920ed8" name="Partition Table" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                                            <output name="trueTable" type="ca.phon.query.report.datasource.DefaultTableDataSource">Table of rows from input table which match filter</output>
                                            <output name="falseTable" type="ca.phon.query.report.datasource.DefaultTableDataSource">Table of rows from output table which do not match the filter</output>
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="filters.column.filter"><![CDATA[\c]]></oga:property>
                                                    <oga:property key="filters.column.filterType"><![CDATA[Phonex]]></oga:property>
                                                    <oga:property key="__script"><![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 201, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

 /**
  * Partition Table.js
  *
  * Script for use with ca.phon.app.opgraph.nodes.table.TableScriptNode
  *
  * Partition table using a standard query filter and column name.
  */
var PatternFilter = require("lib/PatternFilter").PatternFilter;

var columnParamInfo = {
	"id": "columnName",
	"title": "Column Name",
	"def": "",
	"prompt": "Enter column name"
}

var filters = {
    "column": new PatternFilter("filters.column")
}

function setup_params(params) {
	var columnParam = new StringScriptParam(
		columnParamInfo.id,
		columnParamInfo.title,
		columnParamInfo.def);
	columnParam.setPrompt(columnParamInfo.prompt);
	params.add(columnParam);

	filters.column.param_setup(params);
}

// add custom inputs/outputs here
function init(inputs, outputs) {
	outputs.add("trueTable", "Table of rows from input table which match filter", false, DefaultTableDataSource);
	outputs.add("falseTable", "Table of rows from output table which do not match the filter", false, DefaultTableDataSource);
}

// run operation on table
function tableOp(context, table) {
	// find table column index
	col = table.getColumnIndex(columnName);
	if(col < 0)
		return; // column not found

	// create output tables
	trueTable = new DefaultTableDataSource();
	falseTable = new DefaultTableDataSource();
	for(c = 0; c < table.columnCount; c++) {
	    var colTitle = table.getColumnTitle(c);
	    trueTable.setColumnTitle(c, colTitle);
	    falseTable.setColumnTitle(c, colTitle);
	}

	for(row = 0; row < table.rowCount; row++) {
		rowData = table.getRow(row);
		rowMatches = filterRow(table, row, col);

		if(rowMatches == true) {
			trueTable.addRow(rowData);
		} else {
			falseTable.addRow(rowData);
		}
	}

	context.put("trueTable", trueTable);
	context.put("falseTable", falseTable);
}

function filterRow(table, row, col) {
	var value = table.getValueAt(row, col);
	if(value == null) return false;

	return filters.column.check_filter(value);
}
]]></oga:property>
                                                    <oga:property key="columnName"><![CDATA[IPA Target]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="459" y="549"/>
                                            </extensions>
                                        </node>
                                        <node id="5246cb17" name="Partition Table" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                                            <output name="trueTable" type="ca.phon.query.report.datasource.DefaultTableDataSource">Table of rows from input table which match filter</output>
                                            <output name="falseTable" type="ca.phon.query.report.datasource.DefaultTableDataSource">Table of rows from output table which do not match the filter</output>
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="filters.column.filter"><![CDATA[\c]]></oga:property>
                                                    <oga:property key="filters.column.filterType"><![CDATA[Phonex]]></oga:property>
                                                    <oga:property key="__script"><![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 201, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

 /**
  * Partition Table.js
  *
  * Script for use with ca.phon.app.opgraph.nodes.table.TableScriptNode
  *
  * Partition table using a standard query filter and column name.
  */
var PatternFilter = require("lib/PatternFilter").PatternFilter;

var columnParamInfo = {
	"id": "columnName",
	"title": "Column Name",
	"def": "",
	"prompt": "Enter column name"
}

var filters = {
    "column": new PatternFilter("filters.column")
}

function setup_params(params) {
	var columnParam = new StringScriptParam(
		columnParamInfo.id,
		columnParamInfo.title,
		columnParamInfo.def);
	columnParam.setPrompt(columnParamInfo.prompt);
	params.add(columnParam);

	filters.column.param_setup(params);
}

// add custom inputs/outputs here
function init(inputs, outputs) {
	outputs.add("trueTable", "Table of rows from input table which match filter", false, DefaultTableDataSource);
	outputs.add("falseTable", "Table of rows from output table which do not match the filter", false, DefaultTableDataSource);
}

// run operation on table
function tableOp(context, table) {
	// find table column index
	col = table.getColumnIndex(columnName);
	if(col < 0)
		return; // column not found

	// create output tables
	trueTable = new DefaultTableDataSource();
	falseTable = new DefaultTableDataSource();
	for(c = 0; c < table.columnCount; c++) {
	    var colTitle = table.getColumnTitle(c);
	    trueTable.setColumnTitle(c, colTitle);
	    falseTable.setColumnTitle(c, colTitle);
	}

	for(row = 0; row < table.rowCount; row++) {
		rowData = table.getRow(row);
		rowMatches = filterRow(table, row, col);

		if(rowMatches == true) {
			trueTable.addRow(rowData);
		} else {
			falseTable.addRow(rowData);
		}
	}

	context.put("trueTable", trueTable);
	context.put("falseTable", falseTable);
}

function filterRow(table, row, col) {
	var value = table.getValueAt(row, col);
	if(value == null) return false;

	return filters.column.check_filter(value);
}
]]></oga:property>
                                                    <oga:property key="columnName"><![CDATA[IPA Actual]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="459" y="691"/>
                                            </extensions>
                                        </node>
                                        <node id="5a8b5160" type="class:ca.phon.app.opgraph.nodes.table.SortNode">
                                            <extensions>
                                                <opqry:sortoptions autoSortOrder="ascending" configureAutomatically="false">
                                                    <opqry:sortBy column="Phone" order="ascending" type="ipa"/>
                                                </opqry:sortoptions>
                                                <oga:settings/>
                                                <oga:meta x="736" y="147"/>
                                            </extensions>
                                        </node>
                                        <node id="d938ef2406fb4993" name="Add row to Session Summary" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                                            <input name="speaker" optional="false">speaker</input>
                                            <input name="sessionPath" optional="false">session</input>
                                            <input name="targetConsonants" optional="false"/>
                                            <input name="targetVowels" optional="false"/>
                                            <input name="actualConsonants" optional="false"/>
                                            <input name="actualVowels" optional="false"/>
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="__script"><![CDATA[function init(inputs, outputs) {
	inputs.add("speaker", "speaker", false, false);
	inputs.add("sessionPath", "session", false, false);
	inputs.add("targetConsonants", "", false, false);
	inputs.add("targetVowels", "", false, false);
	inputs.add("actualConsonants", "", false, false);
	inputs.add("actualVowels", "", false, false);
}

function tableOp(context, table) {
	var row = [];

	var speaker = context.get("speaker");
	var sessionPath = context.get("sessionPath");
	var history = speaker.getExtension(Packages.ca.phon.project.ParticipantHistory);
	var targetConsonants = context.get("targetConsonants");
	var targetVowels = context.get("targetVowels");
	var actualConsonants = context.get("actualConsonants");
	var actualVowels = context.get("actualVowels");

	row[0] = sessionPath;
	row[1] = speaker.role;
	row[2] = history.getAgeForSession(sessionPath);
	row[3] = new java.lang.Integer(targetConsonants.rowCount);
	row[4] = new java.lang.Integer(targetVowels.rowCount);
	row[5] = new java.lang.Integer(actualConsonants.rowCount);
	row[6] = new java.lang.Integer(actualVowels.rowCount);

	table.addRow(row);
}
]]></oga:property>
                                                </oga:settings>
                                                <oga:meta x="835" y="593"/>
                                            </extensions>
                                        </node>
                                        <node id="73c40aa5" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns"><![CDATA[true]]></oga:property>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                                                </oga:settings>
                                                <oga:meta x="930" y="150"/>
                                            </extensions>
                                        </node>
                                        <link dest="535b6fe5" destField="table" source="7f0afc8c" sourceField="obj"/>
                                        <link dest="aa13f4447f974342" destField="table" source="1f1f5d31" sourceField="obj"/>
                                        <link dest="11e6fe5b" destField="table1" source="535b6fe5" sourceField="table"/>
                                        <link dest="11e6fe5b" destField="table2" source="aa13f4447f974342" sourceField="table"/>
                                        <link dest="5a8b5160" destField="table" source="11e6fe5b" sourceField="table"/>
                                        <link dest="d938ef2406fb4993" destField="speaker" source="5ded2c0b0e06418c" sourceField="obj"/>
                                        <link dest="d938ef2406fb4993" destField="sessionPath" source="1553be736ae40bf" sourceField="obj"/>
                                        <link dest="49920ed8" destField="table" source="535b6fe5" sourceField="table"/>
                                        <link dest="d938ef2406fb4993" destField="targetConsonants" source="49920ed8" sourceField="trueTable"/>
                                        <link dest="d938ef2406fb4993" destField="targetVowels" source="49920ed8" sourceField="falseTable"/>
                                        <link dest="5246cb17" destField="table" source="aa13f4447f974342" sourceField="table"/>
                                        <link dest="d938ef2406fb4993" destField="actualConsonants" source="5246cb17" sourceField="trueTable"/>
                                        <link dest="d938ef2406fb4993" destField="actualVowels" source="5246cb17" sourceField="falseTable"/>
                                        <link dest="d938ef2406fb4993" destField="table" source="256ab4efb46c4984" sourceField="obj"/>
                                        <link dest="73c40aa5" destField="table" source="5a8b5160" sourceField="table"/>
                                        <link dest="73c40aa5" destField="parent" source="5e6a9c8c" sourceField="obj"/>
                                        <link dest="6b850613" destField="obj" source="1553be736ae40bf" sourceField="obj"/>
                                        <link dest="73c40aa5" destField="sectionName" source="6b850613" sourceField="value"/>
                                        <extensions>
                                            <oga:notes>
                                                <oga:note color="0xffff96" height="1182" title="Inputs" width="317" x="28" y="41"/>
                                            </oga:notes>
                                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                                        </extensions>
                                    </graph>
                                    <ogcn:published_input field="obj" name="ipaTargetTable" ref="7f0afc8c"/>
                                    <ogcn:published_input field="obj" name="ipaActualTable" ref="1f1f5d31"/>
                                    <ogcn:published_input field="obj" name="speaker" ref="5ded2c0b0e06418c"/>
                                    <ogcn:published_input field="obj" name="sessionPath" ref="1553be736ae40bf"/>
                                    <ogcn:published_input field="obj" name="summaryTable" ref="256ab4efb46c4984"/>
                                    <ogcn:published_input field="obj" name="reportNode" ref="5e6a9c8c"/>
                                    <extensions>
                                        <oga:meta x="916" y="292"/>
                                    </extensions>
                                </ogcn:macro>
                                <link dest="74aba9533824b41" destField="obj" source="63a39ca2" sourceField="obj"/>
                                <link dest="5200f04eaf4b41b8" destField="sessionName" source="74aba9533824b41" sourceField="value"/>
                                <link dest="5200f04eaf4b41b8" destField="tableMap" source="179acc7669ef462f" sourceField="obj"/>
                                <link dest="2e806ecc316b48cf" destField="tableMap" source="948f9298e2ca4925" sourceField="obj"/>
                                <link dest="2e806ecc316b48cf" destField="sessionName" source="74aba9533824b41" sourceField="value"/>
                                <link dest="127f8686" destField="x" source="5200f04eaf4b41b8" sourceField="exists"/>
                                <link dest="127f8686" destField="y" source="2e806ecc316b48cf" sourceField="exists"/>
                                <link dest="79c23a8b" destField="ipaTargetTable" source="5200f04eaf4b41b8" sourceField="table"/>
                                <link dest="79c23a8b" destField="ipaActualTable" source="2e806ecc316b48cf" sourceField="table"/>
                                <link dest="79c23a8b" destField="speaker" source="638e4150ec754d7b" sourceField="obj"/>
                                <link dest="79c23a8b" destField="sessionPath" source="63a39ca2" sourceField="obj"/>
                                <link dest="79c23a8b" destField="summaryTable" source="9b97934357e64d50" sourceField="obj"/>
                                <link dest="79c23a8b" destField="enabled" source="127f8686" sourceField="result"/>
                                <link dest="79c23a8b" destField="reportNode" source="9e3101f5d3ce463f" sourceField="obj"/>
                                <extensions>
                                    <oga:notes>
                                        <oga:note color="0xffff96" height="932" title="Inputs" width="313" x="24" y="150"/>
                                    </oga:notes>
                                    <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                                </extensions>
                            </graph>
                            <ogcn:published_input field="obj" name="ipaTargetTableMap" ref="179acc7669ef462f"/>
                            <ogcn:published_input field="obj" name="ipaActualTableMap" ref="948f9298e2ca4925"/>
                            <ogcn:published_input field="obj" name="speaker" ref="638e4150ec754d7b"/>
                            <ogcn:published_input field="obj" name="summaryTable" ref="9b97934357e64d50"/>
                            <ogcn:published_input field="obj" name="reportNode" ref="9e3101f5d3ce463f"/>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="708" y="486"/>
                            </extensions>
                        </ogcn:macro>
                        <link dest="153d8dd0" destField="collection" source="61cb565b6af4417d" sourceField="obj"/>
                        <link dest="d42e2b2ff5214392" destField="table" source="37d2f72f" sourceField="obj"/>
                        <link dest="c28535f22344300" destField="table" source="31a55968" sourceField="obj"/>
                        <link dest="153d8dd0" destField="ipaTargetTableMap" source="d42e2b2ff5214392" sourceField="tableMap"/>
                        <link dest="153d8dd0" destField="ipaActualTableMap" source="c28535f22344300" sourceField="tableMap"/>
                        <link dest="153d8dd0" destField="speaker" source="6440bd3329664caa" sourceField="obj"/>
                        <link dest="153d8dd0" destField="summaryTable" source="c8ff0dae984a4ddb" sourceField="obj"/>
                        <link dest="41e09b53d3be45f9" destField="table" source="37d2f72f" sourceField="obj"/>
                        <link dest="26a258bf1bf4454" destField="table" source="c226d4ebdadc4810" sourceField="table"/>
                        <link dest="c226d4ebdadc4810" destField="table" source="31a55968" sourceField="obj"/>
                        <link dest="1817421b" destField="sectionName" source="c6adbd9781a24f72" sourceField="value"/>
                        <link dest="153d8dd0" destField="reportNode" source="1817421b" sourceField="section"/>
                        <link dest="3fdfe6c4" destField="table" source="dc7c7aee5bd44dd5" sourceField="table"/>
                        <link dest="2bc9f6a39e244668" destField="table" source="26a258bf1bf4454" sourceField="table"/>
                        <link dest="ea86304fd2194726" destField="sectionName" source="646e8104067d49ab" sourceField="value"/>
                        <link dest="ea86304fd2194726" destField="parent" source="8d2876242b8a4bec" sourceField="obj"/>
                        <link dest="3fdfe6c4" destField="parent" source="ea86304fd2194726" sourceField="section"/>
                        <link dest="2bc9f6a39e244668" destField="parent" source="ea86304fd2194726" sourceField="section"/>
                        <link dest="646e8104067d49ab" destField="obj" source="6440bd3329664caa" sourceField="obj"/>
                        <link dest="c6adbd9781a24f72" destField="obj" source="6440bd3329664caa" sourceField="obj"/>
                        <link dest="1817421b" destField="parent" source="16e33d770ac24d15" sourceField="obj"/>
                        <link dest="dc7c7aee5bd44dd5" destField="table" source="41e09b53d3be45f9" sourceField="table"/>
                        <extensions>
                            <oga:notes>
                                <oga:note color="0xffff96" height="1437" title="Inputs" width="333" x="24" y="19"/>
                            </oga:notes>
                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                        </extensions>
                    </graph>
                    <ogcn:published_input field="obj" name="ipaTargetTable" ref="37d2f72f"/>
                    <ogcn:published_input field="obj" name="ipaActualTable" ref="31a55968"/>
                    <ogcn:published_input field="obj" name="selectedSessions" ref="61cb565b6af4417d"/>
                    <ogcn:published_input field="obj" name="speaker" ref="6440bd3329664caa"/>
                    <ogcn:published_input field="obj" name="summaryTable" ref="c8ff0dae984a4ddb"/>
                    <ogcn:published_input field="obj" name="breakdownNode" ref="16e33d770ac24d15"/>
                    <ogcn:published_input field="obj" name="aggregateNode" ref="8d2876242b8a4bec"/>
                    <ogcn:published_output field="collection" name="collection" ref="153d8dd0"/>
                    <extensions>
                        <oga:meta x="966" y="298"/>
                    </extensions>
                </ogcn:macro>
                <node id="4ef17a0e" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns"><![CDATA[true]]></oga:property>
                            <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                        </oga:settings>
                        <oga:meta x="1114" y="516"/>
                    </extensions>
                </node>
                <link dest="46f9661219824152" destField="obj" source="57d85ddb" sourceField="obj"/>
                <link dest="2513d879596a40c8" destField="tableMap" source="98c58a7f658a49d6" sourceField="obj"/>
                <link dest="2513d879596a40c8" destField="speaker" source="46f9661219824152" sourceField="obj"/>
                <link dest="f7b580dcd80049d7" destField="tableMap" source="f4a1646672c04d38" sourceField="obj"/>
                <link dest="f7b580dcd80049d7" destField="speaker" source="46f9661219824152" sourceField="obj"/>
                <link dest="1bd946c2" destField="x" source="2513d879596a40c8" sourceField="exists"/>
                <link dest="1bd946c2" destField="y" source="f7b580dcd80049d7" sourceField="exists"/>
                <link dest="4a1ba1f0" destField="ipaTargetTable" source="2513d879596a40c8" sourceField="table"/>
                <link dest="4a1ba1f0" destField="ipaActualTable" source="f7b580dcd80049d7" sourceField="table"/>
                <link dest="4a1ba1f0" destField="enabled" source="1bd946c2" sourceField="result"/>
                <link dest="4a1ba1f0" destField="selectedSessions" source="f1b4eff8ad9f4cb7" sourceField="obj"/>
                <link dest="4a1ba1f0" destField="speaker" source="46f9661219824152" sourceField="obj"/>
                <link dest="4a1ba1f0" destField="summaryTable" source="ed7ad328cc134c2b" sourceField="table"/>
                <link dest="4ef17a0e" destField="table" source="ed7ad328cc134c2b" sourceField="table"/>
                <link dest="4ef17a0e" destField="parent" source="4d14b5692fd944a8" sourceField="obj"/>
                <link dest="32a74feb" destField="object1" source="46f9661219824152" sourceField="obj"/>
                <link dest="7331a357" destField="objects" source="32a74feb" sourceField="array"/>
                <link dest="4ef17a0e" destField="sectionName" source="7331a357" sourceField="value"/>
                <link dest="4a1ba1f0" destField="breakdownNode" source="7963b2330cea4be6" sourceField="obj"/>
                <link dest="4a1ba1f0" destField="aggregateNode" source="ba111f245afc4183" sourceField="obj"/>
                <link dest="4ef17a0e" destField="enabled" source="4a1ba1f0" sourceField="finished"/>
                <extensions>
                    <oga:notes>
                        <oga:note color="0xffff96" height="1027" title="Inputs" width="330" x="40" y="150"/>
                    </oga:notes>
                    <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                </extensions>
            </graph>
            <ogcn:published_input field="obj" name="ipaTargetTableMap" ref="98c58a7f658a49d6"/>
            <ogcn:published_input field="obj" name="ipaActualTableMap" ref="f4a1646672c04d38"/>
            <ogcn:published_input field="obj" name="selectedSessions" ref="f1b4eff8ad9f4cb7"/>
            <ogcn:published_input field="obj" name="summaryNode" ref="4d14b5692fd944a8"/>
            <ogcn:published_input field="obj" name="breakdownNode" ref="7963b2330cea4be6"/>
            <ogcn:published_input field="obj" name="aggregateNode" ref="ba111f245afc4183"/>
            <extensions>
                <oga:settings>
                    <oga:property key="ca.phon.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                </oga:settings>
                <oga:meta x="1195" y="270"/>
            </extensions>
        </ogcn:macro>
        <link dest="7ebf94c11c254b8a" destField="table" source="7df461c2" sourceField="table"/>
        <link dest="132ebfd991bc4754" destField="table" source="6dfac37ee1204f60" sourceField="table"/>
        <link dest="737b3ce1" destField="collection" source="3e038096" sourceField="obj"/>
        <link dest="737b3ce1" destField="ipaTargetTableMap" source="7ebf94c11c254b8a" sourceField="tableMap"/>
        <link dest="737b3ce1" destField="ipaActualTableMap" source="132ebfd991bc4754" sourceField="tableMap"/>
        <link dest="737b3ce1" destField="selectedSessions" source="39d161f1" sourceField="obj"/>
        <link dest="230571e9" destField="parameters" source="6df4d2f7" sourceField="parameters"/>
        <link dest="230571e9" destField="project" source="fb2027c" sourceField="obj"/>
        <link dest="230571e9" destField="sessions" source="39d161f1" sourceField="obj"/>
        <link dest="7df461c2" destField="project" source="230571e9" sourceField="project"/>
        <link dest="7df461c2" destField="results" source="230571e9" sourceField="results"/>
        <link dest="6dfac37ee1204f60" destField="project" source="34c3c8ef8e8547ce" sourceField="project"/>
        <link dest="6dfac37ee1204f60" destField="results" source="34c3c8ef8e8547ce" sourceField="results"/>
        <link dest="34c3c8ef8e8547ce" destField="parameters" source="6df4d2f7" sourceField="parameters"/>
        <link dest="34c3c8ef8e8547ce" destField="project" source="fb2027c" sourceField="obj"/>
        <link dest="34c3c8ef8e8547ce" destField="sessions" source="39d161f1" sourceField="obj"/>
        <link dest="d4e5e1df1bf7410b" destField="parameters" source="6df4d2f7" sourceField="parameters"/>
        <link dest="5f935232" destField="reportName" source="d4e5e1df1bf7410b" sourceField="value"/>
        <link dest="aeff2945c484cef" destField="script" source="6df4d2f7" sourceField="script"/>
        <link dest="6e83912c" destField="text" source="aeff2945c484cef" sourceField="text"/>
        <link dest="6e83912c" destField="parent" source="5f935232" sourceField="root"/>
        <link dest="500cc6c5" destField="parent" source="5f935232" sourceField="root"/>
        <link dest="737b3ce1" destField="summaryNode" source="500cc6c5" sourceField="section"/>
        <link dest="523fab4720824204" destField="parent" source="5f935232" sourceField="root"/>
        <link dest="6d2fd73461774ca5" destField="parent" source="5f935232" sourceField="root"/>
        <link dest="737b3ce1" destField="aggregateNode" source="523fab4720824204" sourceField="section"/>
        <link dest="737b3ce1" destField="breakdownNode" source="6d2fd73461774ca5" sourceField="section"/>
        <extensions>
            <opqry:nodewizard type="ca.phon.app.opgraph.analysis.AnalysisWizardExtension">
                <opqry:info format="html" title="Phone Inventory">
                    <opqry:message/>
                </opqry:info>
                <opqry:node ref="6df4d2f7" showAsStep="true">
                    <opqry:info format="html" title="Parameters">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
            </opqry:nodewizard>
            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
        </extensions>
    </graph>
</opgraph>
