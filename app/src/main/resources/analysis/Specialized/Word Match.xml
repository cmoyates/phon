<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<opgraph xmlns="https://www.phon.ca/ns/opgraph" xmlns:nes="https://www.phon.ca/ns/node_editor" xmlns:oga="https://www.phon.ca/ns/opgraph-app" xmlns:ogcn="https://www.phon.ca/ns/opgraph-common-nodes" xmlns:opqry="https://phon.ca/ns/opgraph_query" xmlns:qry="http://phon.ling.mun.ca/ns/query">
    <graph id="root">
        <node id="747f610d" name="Project" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="contextKey">
                        <![CDATA[_project]]>
                    </oga:property>
                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                        <![CDATA[ca.phon.project.Project]]>
                    </oga:property>
                </oga:settings>
                <oga:meta x="38" y="65"/>
            </extensions>
        </node>
        <node id="67ab4a6" name="Selected Sessions" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="contextKey">
                        <![CDATA[_selectedSessions]]>
                    </oga:property>
                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                        <![CDATA[java.util.ArrayList]]>
                    </oga:property>
                </oga:settings>
                <oga:meta x="38" y="306"/>
            </extensions>
        </node>
        <node id="f00dcc378bd645f1" name="Selected Participants" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="contextKey">
                        <![CDATA[_selectedParticipants]]>
                    </oga:property>
                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                        <![CDATA[java.util.ArrayList]]>
                    </oga:property>
                </oga:settings>
                <oga:meta x="38" y="407"/>
            </extensions>
        </node>
        <node id="2a3649f9" name="Parameters" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ignoreTruncated">
                        <![CDATA[false]]>
                    </oga:property>
                    <oga:property key="ignoreDiacritics">
                        <![CDATA[false]]>
                    </oga:property>
                    <oga:property key="includeStressMarkers">
                        <![CDATA[true]]>
                    </oga:property>
                    <oga:property key="includeLength">
                        <![CDATA[true]]>
                    </oga:property>
                    <oga:property key="includeImplicitBoundaries">
                        <![CDATA[false]]>
                    </oga:property>
                    <oga:property key="__script">
                        <![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
params = {label, "", "Whole-word comparison of IPA Actual vs. IPA Target forms."};
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var TierList = require("lib/TierList").TierList;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var ResultType = require("lib/PhonScriptConstants").ResultType;

var filters = {
	"group": new GroupFilter("filters.group"),
	"groupTiers": new TierList("filters.groupTiers"),
	"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
	"word": new WordFilter("filters.word"),
	"wordTiers": new TierList("filters.wordTiers"),
	"alignedWord": new AlignedWordFilter("filters.alignedWord"),
};

var ignoreTruncatedParamInfo = {
	"id": "ignoreTruncated",
	"desc": "Ignore truncated words",
	"title": "",
	"def": true
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

var compTypesParamInfo = {
	"id":["includeExactMatch", "includeCVPatternMatch", "includeSyllableCountMatch", "includeStressPatternMatch"],
	"title": "Comparators:",
	"desc":["Exact match", "CV pattern (see options below)", "Syllable Count", "Stress pattern"],
	"def":[true, true, true, true],
	"numCols":1
};
var compTypesParam;

var includeExactMatch = compTypesParamInfo.def[0];
var includeCVPatternMatch = compTypesParamInfo.def[1];
var includeSyllableCountMatch = compTypesParamInfo.def[2];
var includeStressPatternMatch = compTypesParamInfo.def[3];

var ignoreDiacriticsParamInfo = {
	"id": "ignoreDiacritics",
	"title": "Exact Match Options",
	"desc": "Ignore diacritics",
	"def": true
};
var ignoreDiacriticsParam;
var ignoreDiacritics = ignoreDiacriticsParamInfo.def;

var cvOptionsParamInfo = {
    "id":[ "includeLength", "includeSyllableBoundaries", "includeImplicitBoundaries", "includeStressMarkers"],
    "title": "CV Pattern Options",
    "desc":[ "Include length diacritics", "Include syllable boundaries", "Include implicit boundaries", "Include stress markers"],
    "def":[ true, true, true, true ],
    "numCols": 1
};
var cvOptionsParam;
var includeLength = cvOptionsParamInfo.def[0];
var includeSyllableBoundaries = cvOptionsParamInfo.def[1];
var includeImplicitBoundaries = cvOptionsParamInfo.def[2];
var includeStressMarkers = cvOptionsParamInfo.def[3];

var searchTier = "IPA Target";
var alignedTier = "IPA Actual";

var mdataExactField = "Exact Match";
var mdataCVField = "CV Match";
var mdataStressField = "Stress Match";
var mdataSyllableField = "Syllable Count Match";

var reportTitleParamInfo = {
	"id": "reportTitle",
	"title": "Report Title",
	"def": "Word Match",
	"prompt": "Enter report title"
};
var reportTitleParam;

function setup_params(params) {
	reportTitleParam = new StringScriptParam(
			reportTitleParamInfo.id,
			reportTitleParamInfo.title,
			reportTitleParamInfo.def);
     reportTitleParam.setPrompt(reportTitleParamInfo.prompt);
	params.add(reportTitleParam);

	var cvOptionsSep = new SeparatorScriptParam("Comparison Options", false);
	params.add(cvOptionsSep);

	ignoreTruncatedParam = new BooleanScriptParam(
		ignoreTruncatedParamInfo.id,
		ignoreTruncatedParamInfo.desc,
		ignoreTruncatedParamInfo.title,
		ignoreTruncatedParamInfo.def);
	params.add(ignoreTruncatedParam);

	compTypesParam = new MultiboolScriptParam(
		compTypesParamInfo.id,
		compTypesParamInfo.def,
		compTypesParamInfo.desc,
		compTypesParamInfo.title,
		compTypesParamInfo.numCols);
	params.add(compTypesParam);

	ignoreDiacriticsParam = new BooleanScriptParam(
		ignoreDiacriticsParamInfo.id,
		ignoreDiacriticsParamInfo.desc,
		ignoreDiacriticsParamInfo.title,
		ignoreDiacriticsParamInfo.def);
	params.add(ignoreDiacriticsParam);


	cvOptionsParam = new MultiboolScriptParam(
		cvOptionsParamInfo.id,
		cvOptionsParamInfo.def,
		cvOptionsParamInfo.desc,
		cvOptionsParamInfo.title,
		cvOptionsParamInfo.numCols);
	params.add(cvOptionsParam);

	filters.group.param_setup(params);
	var sep = new LabelScriptParam("", "<html><b>Add Aligned Groups</b></html>");
	params.add(sep);
	filters.groupTiers.param_setup(params);
	var sep = new LabelScriptParam("", "<html><b>Aligned Group</b></html>");
	params.add(sep);
	filters.alignedGroup.param_setup(params);

	filters.word.searchByWordEnabled = false;
	filters.word.param_setup(params);
	var wordsep = new LabelScriptParam("", "<html><b>Add Aligned Words</b></html>");
	params.add(wordsep);
	filters.wordTiers.param_setup(params);
	wordsep = new LabelScriptParam("", "<html><b>Aligned Word</b></html>");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);

	ignoreTruncatedParam = new BooleanScriptParam(ignoreTruncatedParamInfo.id,
		ignoreTruncatedParamInfo.title, ignoreTruncatedParamInfo.desc,
		ignoreTruncatedParamInfo.def);
	params.add(ignoreTruncatedParam);
}]]>
                    </oga:property>
                    <oga:property key="includeSyllableBoundaries">
                        <![CDATA[false]]>
                    </oga:property>
                </oga:settings>
                <oga:meta x="38" y="623"/>
            </extensions>
        </node>
        <opqry:queryNode id="78e659da" name="Query: Word Match" type="ca.phon.app.opgraph.nodes.query.QueryNode">
            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2018-04-19T17:05:04.857-02:30" name="Query: Word Match" uuid="042a5de9-bfcc-4a0a-abe9-2aac76b988a4">
                <script>
                    <source>/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund &lt;ghedlund@mun.ca&gt; and Yvan Rose &lt;yrose@mun.ca&gt;
 * Dept of Linguistics, Memorial University &lt;https://phon.ca&gt;
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */

/*
params = {label, "", "Whole-word comparison of IPA Actual vs. IPA Target forms."};
 */

importClass(Packages.ca.phon.syllable.SyllableConstituentType)
importClass(Packages.ca.phon.orthography.Orthography)

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var TierList = require("lib/TierList").TierList;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var ResultType = require("lib/PhonScriptConstants").ResultType;

var filters = {
    "group": new GroupFilter("filters.group"),
    "groupTiers": new TierList("filters.groupTiers"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordTiers": new TierList("filters.wordTiers"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var ignoreTruncatedParamInfo = {
    "id": "ignoreTruncated",
    "desc": "Ignore truncated words",
    "title": "",
    "def": true
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

var compTypesParamInfo = {
    "id":[ "includeExactMatch", "includeCVPatternMatch", "includeSyllableCountMatch", "includeStressPatternMatch"],
    "title": "Comparators:",
    "desc":[ "Exact match", "CV pattern (see options below)", "Syllable Count", "Stress pattern"],
    "def":[ true, true, true, true],
    "numCols": 1
};
var compTypesParam;

var includeExactMatch = compTypesParamInfo.def[0];
var includeCVPatternMatch = compTypesParamInfo.def[1];
var includeSyllableCountMatch = compTypesParamInfo.def[2];
var includeStressPatternMatch = compTypesParamInfo.def[3];

var ignoreDiacriticsParamInfo = {
    "id": "ignoreDiacritics",
    "title": "Exact Match Options",
    "desc": "Ignore diacritics",
    "def": true
};
var ignoreDiacriticsParam;
var ignoreDiacritics = ignoreDiacriticsParamInfo.def;

var cvOptionsParamInfo = {
    "id":["includeLength", "includeSyllableBoundaries", "includeImplicitBoundaries", "includeStressMarkers"],
    "title": "CV Pattern Options",
    "desc":[ "Include length diacritics", "Include syllable boundaries", "Include implicit boundaries", "Include stress markers"],
    "def":[ true, true, true, true],
    "numCols": 1
};
var cvOptionsParam;
var includeLength = cvOptionsParamInfo.def[0];
var includeSyllableBoundaries = cvOptionsParamInfo.def[1];
var includeImplicitBoundaries = cvOptionsParamInfo.def[2];
var includeStressMarkers = cvOptionsParamInfo.def[3];

var searchTier = "IPA Target";
var alignedTier = "IPA Actual";

var mdataExactField = "Exact Match";
var mdataCVField = "CV Match";
var mdataStressField = "Stress Match";
var mdataSyllableField = "Syllable Count Match";

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}

function setup_params(params) {
    var cvOptionsSep = new SeparatorScriptParam("Comparison Options", false);
    params.add(cvOptionsSep);
    
    ignoreTruncatedParam = new BooleanScriptParam(
    ignoreTruncatedParamInfo.id,
    ignoreTruncatedParamInfo.desc,
    ignoreTruncatedParamInfo.title,
    ignoreTruncatedParamInfo.def);
    params.add(ignoreTruncatedParam);
    
    compTypesParam = new MultiboolScriptParam(
    compTypesParamInfo.id,
    compTypesParamInfo.def,
    compTypesParamInfo.desc,
    compTypesParamInfo.title,
    compTypesParamInfo.numCols);
    params.add(compTypesParam);
    
    ignoreDiacriticsParam = new BooleanScriptParam(
    ignoreDiacriticsParamInfo.id,
    ignoreDiacriticsParamInfo.desc,
    ignoreDiacriticsParamInfo.title,
    ignoreDiacriticsParamInfo.def);
    params.add(ignoreDiacriticsParam);
    
    cvOptionsParam = new MultiboolScriptParam(
    cvOptionsParamInfo.id,
    cvOptionsParamInfo.def,
    cvOptionsParamInfo.desc,
    cvOptionsParamInfo.title,
    cvOptionsParamInfo.numCols);
    params.add(cvOptionsParam);
    
    filters.group.param_setup(params);
    var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Add Aligned Groups&lt;/b&gt;&lt;/html&gt;");
    params.add(sep);
    filters.groupTiers.param_setup(params);
    sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
    params.add(sep);
    filters.alignedGroup.param_setup(params);
    
    filters.word.searchByWordEnabled = false;
    filters.word.param_setup(params);
    var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Add Aligned Words&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.wordTiers.param_setup(params);
    wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    
    ignoreTruncatedParam = new BooleanScriptParam(ignoreTruncatedParamInfo.id,
    ignoreTruncatedParamInfo.title, ignoreTruncatedParamInfo.desc,
    ignoreTruncatedParamInfo.def);
    params.add(ignoreTruncatedParam);
    
    filters.speaker.param_setup(params);
}

/********************************
 * query_record (required)
 *
 * Called for each record in a session.
 * Perform search operations here.
 *
 * params:
 *  recordIndex - current record index
 *	record - current record
 * returns:
 *	void
 *******************************/
function query_record(recordIndex, record) {
    if (! filters.speaker.check_speaker(record.speaker)) return;
    
    var searchObjects = filters.group.getRequestedGroups(record);
    // check aligned group for each group returned
    if (filters.alignedGroup.isUseFilter()) {
        searchObjects = filters.alignedGroup.filter_groups(record, searchObjects);
    }
    
    for (var gIdx = 0; gIdx &lt; searchObjects.length; gIdx++) {
        var group = searchObjects[gIdx];
        var words = filters.word.getRequestedWords(group, "IPA Target");
        
        for (var wIdx = 0; wIdx &lt; words.length; wIdx++) {
            var word = words[wIdx];
            if (filters.alignedWord.isUseFilter()) {
                var alignedWord = word.getTier(filters.alignedWord.tier);
                if (! filters.alignedWord.patternFilter.check_filter(alignedWord)) continue;
            }
            
            checkWordMatch(recordIndex, record, word);
        }
    }
}

function checkWordMatch(recordIndex, record, obj) {
    var word = (obj.IPATarget != null ? obj.IPATarget: new IPATranscript());
    var aligned = (obj.IPAActual != null ? obj.IPAActual: new IPATranscript());
    var ortho = (obj.orthography != null ? obj.orthography: new Orthography());
    
    if ((aligned == null || aligned.length() == 0) &amp;&amp; ignoreTruncated == true) {
        return;
    }
    
    var result = factory.createResult();
    result.recordIndex = recordIndex;
    result.schema = "ALIGNED";
    
    var orthoVal = factory.createResultValue();
    orthoVal.tierName = "Orthography";
    orthoVal.groupIndex = obj.group.groupIndex;
    var startIndex = obj.getOrthographyWordLocation();
    var length = ortho.toString().length();
    orthoVal.range = new Range(startIndex, startIndex + length, false);
    orthoVal.data = ortho;
    result.addResultValue(orthoVal);
    
    var rv = factory.createResultValue();
    rv.tierName = searchTier;
    rv.groupIndex = obj.group.groupIndex;
    var startIndex = obj.getIPATargetWordLocation();
    var length = word.toString().length();
    rv.range = new Range(startIndex, startIndex + length, false);
    rv.data = word;
    result.addResultValue(rv);
    
    rv = factory.createResultValue();
    rv.tierName = alignedTier;
    rv.groupIndex = obj.group.groupIndex;
    var startIndex = obj.getIPAActualWordLocation();
    var length = aligned.toString().length();
    rv.range = new Range(startIndex, startIndex + length, false);
    rv.data = aligned;
    result.addResultValue(rv);
    
    if (filters.alignedGroup.isUseFilter()) {
        var alignedGroup = record.getGroup(obj.group.groupIndex).getTier(filters.alignedGroup.tier);
        var alignedGroupRV = factory.createResultValue();
        alignedGroupRV.name = filters.alignedGroup.tier + " (Group)";
        alignedGroupRV.tierName = filters.alignedGroup.tier;
        alignedGroupRV.groupIndex = obj.group.groupIndex;
        alignedGroupRV.range = new Range(0, alignedGroup.toString().length());
        alignedGroupRV.data = alignedGroup;
        result.addResultValue(alignedGroupRV);
    }
    var alignedGroupData = filters.groupTiers.getAlignedTierData(record, obj.group, "Group");
    for (var i = 0; i &lt; alignedGroupData[0].length; i++) {
        result.addResultValue(alignedGroupData[0][i]);
    }
    result.metadata.putAll(alignedGroupData[1]);
    
    if (filters.alignedWord.isUseFilter()) {
        var alignedWord = obj.getTier(filters.alignedWord.tier);
        var alignedWordRV = factory.createResultValue();
        alignedWordRV.name = filters.alignedWord.tier + " (Word)";
        alignedWordRV.tierName = filters.alignedWord.tier;
        alignedWordRV.groupIndex = obj.group.groupIndex;
        var length = alignedWord.toString().length();
        var startIndex = obj.getTierWordLocation(filters.alignedWord.tier);
        alignedWordRV.range = new Range(startIndex, startIndex + length, false);
        alignedWordRV.data = alignedWord;
        result.addResultValue(alignedWordRV);
    }
    var alignedWordData = filters.wordTiers.getAlignedTierData(record, obj, "Word");
    for (var k = 0; k &lt; alignedWordData[0].length; k++) {
        result.addResultValue(alignedWordData[0][k]);
    }
    result.metadata.putAll(alignedWordData[1]);
    
    if (includeExactMatch == true) {
        var testTarget = (ignoreDiacritics == true ? word.stripDiacritics().removePunctuation().toString(): word.toString());
        var testActual = (ignoreDiacritics == true ? aligned.stripDiacritics().removePunctuation().toString(): aligned.toString());
        result.metadata.put(mdataExactField, testTarget.equals(testActual) + "");
    }

    var symbolMap = "G=\\g; C=\\c; V=\\v";
    symbolMap += "; stress=" + includeStressMarkers.toString();
    symbolMap += "; syllableBoundaries=" + includeSyllableBoundaries.toString();
    symbolMap += "; implicitBoundaries=" + includeImplicitBoundaries.toString();
    symbolMap += "; length=" + includeLength.toString();
    
    if (includeCVPatternMatch == true) {
        var targetCVPattern = word.cover(symbolMap).toString();
        var alignedCVPattern = aligned.cover(symbolMap).toString();
        
        var exactMatch = (targetCVPattern == alignedCVPattern);
        
        result.metadata.put(searchTier + " CV", targetCVPattern);
        result.metadata.put(alignedTier + " CV", alignedCVPattern)
        result.metadata.put(mdataCVField, exactMatch + "");
    }
    
    if (includeSyllableCountMatch == true) {
        var targetSyllables = word.syllables().size();
        var actualSyllables = aligned.syllables().size();
        
        var exactMatch = targetSyllables == actualSyllables;
        
        result.metadata.put(searchTier + " Syllable Count", targetSyllables + "");
        result.metadata.put(alignedTier + " Syllable Count", actualSyllables + "");
        result.metadata.put(mdataSyllableField, exactMatch + "");
    }
    
    if (includeStressPatternMatch == true) {
        var targetStressPattern = word.stressPattern;
        var actualStressPattern = aligned.stressPattern;
        
        var exactMatch = word.matchesStressPattern(actualStressPattern);
        
        result.metadata.put(searchTier + " Stress", targetStressPattern);
        result.metadata.put(alignedTier + " Stress", actualStressPattern);
        result.metadata.put(mdataStressField, exactMatch + "");
    }
    
    results.addResult(result);
}

/**
 * Special CV pattern generator.
 */
function cvPattern2(obj, includeStressMarkers, includeSyllableBoundaries, includeImplicitBoundaries) {
    var retVal = "";
    
    if (includeSyllableBoundaries == true &amp;&amp; includeImplicitBoundaries == true) {
        for (var sIdx = 0; sIdx &lt; obj.syllables().size();
        sIdx++) {
            var syll = obj.syllables().get(sIdx);
            retVal += (sIdx &gt; 0 &amp;&amp; ! syll.matches(".:S.*") ? ".": "") + cvPattern(syll, includeStressMarkers, includeSyllableBoundaries);
        }
    } else {
        retVal = cvPattern(obj, includeStressMarkers, includeSyllableBoundaries);
    }
    
    return retVal;
}

function cvPattern(obj, includeStressMarkers, includeSyllableBoundaries) {
    var retVal = "";
    
    for (var pIdx = 0; pIdx &lt; obj.length();
    pIdx++) {
        var p = obj.elementAt(pIdx);
        
        if (p.getScType() == SyllableConstituentType.SYLLABLEBOUNDARYMARKER) {
            if (includeSyllableBoundaries == true &amp;&amp; pIdx &gt; 0)
            retVal += ".";
            continue;
        } else if (p.getScType() == SyllableConstituentType.SYLLABLESTRESSMARKER) {
            if (includeStressMarkers == true)
            retVal += p.getText();
            continue;
        } else if (p.getScType() == SyllableConstituentType.WORDBOUNDARYMARKER) {
            retVal += " ";
            continue;
        }
        
        if (p.getFeatureSet().hasFeature("Consonant")) {
            retVal += "C";
        } else if (p.getFeatureSet().hasFeature("Vowel")) {
            retVal += "V";
        }
    }
    
    return retVal;
}</source>
                    <param id="filters.alignedGroup.patternFilter.filterType">Plain text</param>
                    <param id="filters.alignedWord.patternFilter.filterType">Plain text</param>
                    <param id="ignoreDiacritics">false</param>
                    <param id="ignoreTruncated">false</param>
                    <param id="includeImplicitBoundaries">false</param>
                    <param id="includeLength">true</param>
                    <param id="includeStressMarkers">true</param>
                    <param id="includeSyllableBoundaries">false</param>
                </script>
            </qry:query>
            <extensions>
                <oga:settings/>
                <oga:meta x="369" y="145"/>
            </extensions>
        </opqry:queryNode>
        <ogcn:macro id="a9b05078292b426b" name="Get Report Name" type="ca.phon.opgraph.nodes.general.MacroNode">
            <graph id="17234b6d">
                <node id="25b4c5ed4b29419a" name="String#&lt;init&gt;(String)" type="class:ca.phon.opgraph.nodes.reflect.ConstructorNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.classMember">
                                <![CDATA[<init>(java.lang.String)]]>
                            </oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.declaredClass">
                                <![CDATA[java.lang.String]]>
                            </oga:property>
                        </oga:settings>
                        <oga:meta x="78" y="88">
                            <oga:default for="arg1" type="java.lang.String">reportTitle</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <node id="7a63bf1530d14961" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember">
                                <![CDATA[get(java.lang.Object)]]>
                            </oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass">
                                <![CDATA[java.util.Map]]>
                            </oga:property>
                        </oga:settings>
                        <oga:meta x="236" y="91"/>
                    </extensions>
                </node>
                <node id="4af3483bec7e43f2" name="Object#toString()" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember">
                                <![CDATA[toString()]]>
                            </oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass">
                                <![CDATA[java.lang.Object]]>
                            </oga:property>
                        </oga:settings>
                        <oga:meta x="393" y="100"/>
                    </extensions>
                </node>
                <link dest="7a63bf1530d14961" destField="arg1" source="25b4c5ed4b29419a" sourceField="value"/>
                <link dest="4af3483bec7e43f2" destField="obj" source="7a63bf1530d14961" sourceField="value"/>
            </graph>
            <ogcn:published_input field="obj" name="parameters" ref="7a63bf1530d14961"/>
            <ogcn:published_output field="value" name="value" ref="4af3483bec7e43f2"/>
            <extensions>
                <oga:meta x="475" y="529"/>
            </extensions>
        </ogcn:macro>
        <node id="d69eef61e1e45f7" type="class:ca.phon.app.opgraph.nodes.log.PrintScriptParameters">
            <extensions>
                <oga:settings>
                    <oga:property key="excludes">
                        <![CDATA[@General]]>
                    </oga:property>
                    <oga:property key="printOnlyChanged">
                        <![CDATA[true]]>
                    </oga:property>
                    <oga:property key="includes">
                        <![CDATA[@Comparison Options]]>
                    </oga:property>
                </oga:settings>
                <oga:meta x="713" y="674"/>
            </extensions>
        </node>
        <node id="3382e2e3" type="class:ca.phon.app.opgraph.nodes.table.ResultsToTableNode">
            <extensions>
                <oga:settings>
                    <oga:property key="includeSessionInfo">
                        <![CDATA[true]]>
                    </oga:property>
                    <oga:property key="includeSpeakerInfo">
                        <![CDATA[true]]>
                    </oga:property>
                    <oga:property key="includeMetadata">
                        <![CDATA[true]]>
                    </oga:property>
                    <oga:property key="includeTierInfo">
                        <![CDATA[true]]>
                    </oga:property>
                </oga:settings>
                <oga:meta x="604" y="145"/>
            </extensions>
        </node>
        <node id="146219e18bcb4ce6" type="class:ca.phon.app.opgraph.nodes.report.NewReportNode">
            <extensions>
                <oga:settings/>
                <oga:meta x="702" y="539"/>
            </extensions>
        </node>
        <node id="409e9fee" name="Split Table by Speaker" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
            <output name="keySet" type="java.util.Set">Unique values from given column name</output>
            <output name="tableMap" type="java.util.Map">Map of key -&gt; table values</output>
            <extensions>
                <oga:settings>
                    <oga:property key="__script">
                        <![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

 /**
  * Split Table.js
  *
  * Script for use with ca.phon.app.opgraph.nodes.table.TableScriptNode
  *
  * Split table based on column name.  Two outputs
  * are produced, a set of keys from the column used in the filter  and a
  * map of key -> table values.
  */

var columnParamInfo = {
	"id": "columnName",
	"title": "Column Name",
	"def": "",
	"prompt": "Enter column name"
}

function setup_params(params) {
	var columnParam = new StringScriptParam(
		columnParamInfo.id,
		columnParamInfo.title,
		columnParamInfo.def);
	columnParam.setPrompt(columnParamInfo.prompt);
	params.add(columnParam);
}

// add custom inputs/outputs here
function init(inputs, outputs) {
	outputs.add("keySet", "Unique values from given column name", false, java.util.Set);
	outputs.add("tableMap", "Map of key -> table values", false, java.util.Map);
}

/*
 * Create a new table with the same schema as the inputTable
 */
function setupTable(inputTable) {
    var table = new DefaultTableDataSource();
    for(c = 0; c < inputTable.columnCount; c++) {
	    var colTitle = inputTable.getColumnTitle(c);
	    table.setColumnTitle(c, colTitle);
	}
	return table;
}

// run operation on table
function tableOp(context, table) {
	// find table column index
	col = table.getColumnIndex(columnName);

	if(col < 0)
		return; // column not found

	var tableMap = new java.util.LinkedHashMap();

	for(row = 0; row < table.rowCount; row++) {
	    // use string value as row key
		var rowKey = Packages.ca.phon.formatter.FormatterUtil.format(table.getValueAt(row, col));

		var keyTable = tableMap.get(rowKey);
		if(keyTable == null) {
		    keyTable = setupTable(table);
		    tableMap.put(rowKey, keyTable);
		}
		keyTable.addRow(table.getRow(row));
	}

	context.put("keySet", tableMap.keySet());
	context.put("tableMap", tableMap);
}
]]>
                    </oga:property>
                    <oga:property key="columnName">
                        <![CDATA[Speaker]]>
                    </oga:property>
                </oga:settings>
                <oga:meta x="798" y="246"/>
            </extensions>
        </node>
        <node id="8d77b2e4041c4de0" type="class:ca.phon.app.opgraph.nodes.report.TextSectionNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.phon.app.opgraph.nodes.report.TextSectionNode.text"/>
                </oga:settings>
                <oga:meta x="1017" y="538">
                    <oga:default for="sectionName" type="java.lang.String">Parameters</oga:default>
                </oga:meta>
            </extensions>
        </node>
        <node id="5d0484ed88ec41fb" name="Summary Section Header" type="class:ca.phon.app.opgraph.nodes.report.ReportSectionHeaderNode">
            <extensions>
                <oga:meta x="1009" y="708">
                    <oga:default for="sectionName" type="java.lang.String">Summary</oga:default>
                </oga:meta>
            </extensions>
        </node>
        <node id="313ec52cb32c4512" name="Aggregate Section Header" type="class:ca.phon.app.opgraph.nodes.report.ReportSectionHeaderNode">
            <extensions>
                <oga:meta x="1013" y="857">
                    <oga:default for="sectionName" type="java.lang.String">Aggregate</oga:default>
                </oga:meta>
            </extensions>
        </node>
        <node id="dcedec3f483945b5" name="Breakdown Section Header" type="class:ca.phon.app.opgraph.nodes.report.ReportSectionHeaderNode">
            <extensions>
                <oga:meta x="1017" y="996">
                    <oga:default for="sectionName" type="java.lang.String">Listing</oga:default>
                </oga:meta>
            </extensions>
        </node>
        <ogcn:macro id="1030eddd" name="For Each Participant" type="ca.phon.opgraph.nodes.reflect.IterableClassNode">
            <graph id="100d6d01">
                <node id="4d78e0c9" name="Current Object" type="class:ca.phon.opgraph.nodes.reflect.ContextualItemClassNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ContextualItemClassNode.key">
                                <![CDATA[currentValue]]>
                            </oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass">
                                <![CDATA[java.lang.Object]]>
                            </oga:property>
                        </oga:settings>
                        <oga:meta x="44" y="24"/>
                    </extensions>
                </node>
                <node id="bd41f2935e8a4dc9" name="Table Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                <![CDATA[java.util.Map]]>
                            </oga:property>
                        </oga:settings>
                        <oga:meta x="104" y="304"/>
                    </extensions>
                </node>
                <node id="3f722f37801e4025" name="Parameters" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                <![CDATA[java.util.Map]]>
                            </oga:property>
                        </oga:settings>
                        <oga:meta x="104" y="405"/>
                    </extensions>
                </node>
                <node id="bb1190d6b6114c23" name="Summary Node" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="contextKey"/>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                <![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]>
                            </oga:property>
                        </oga:settings>
                        <oga:meta x="104" y="506"/>
                    </extensions>
                </node>
                <node id="bbf98ea107574463" name="Aggregate Node" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="contextKey"/>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                <![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]>
                            </oga:property>
                        </oga:settings>
                        <oga:meta x="106" y="730"/>
                    </extensions>
                </node>
                <node id="c395c1491dbb4a9b" name="To Participant Object" type="class:ca.phon.opgraph.nodes.reflect.ObjectCastNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectCastNode.declaredClass">
                                <![CDATA[ca.phon.session.Participant]]>
                            </oga:property>
                        </oga:settings>
                        <oga:meta x="241" y="24"/>
                    </extensions>
                </node>
                <ogcn:macro id="7042cc1b9ceb408c" name="Create Summary Table" type="ca.phon.opgraph.nodes.general.MacroNode">
                    <graph id="67289b0a">
                        <node id="595ffa9c68124e62" name="DefaultTableDataSource#&lt;init&gt;()" type="class:ca.phon.opgraph.nodes.reflect.ConstructorNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.classMember">
                                        <![CDATA[<init>()]]>
                                    </oga:property>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.declaredClass">
                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="37" y="183"/>
                            </extensions>
                        </node>
                        <node id="aaf9c25e9a774554" name="Parameters" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                        <![CDATA[java.util.Map]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="42" y="412"/>
                            </extensions>
                        </node>
                        <node id="99bf33c4c39d4b54" name="Setup Column Names" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script">
                                        <![CDATA[var compTypesParamInfo = {
	"id":["includeExactMatch", "includeCVPatternMatch", "includeSyllableCountMatch", "includeStressPatternMatch"],
	"title": "Comparators:",
	"desc":["Exact match", "CV pattern (see options below)", "Syllable Count", "Stress pattern"],
	"def":[true, true, true, true],
	"numCols":1
};
var compTypesParam;

var includeExactMatch = compTypesParamInfo.def[0];
var includeCVPatternMatch = compTypesParamInfo.def[1];
var includeSyllableCountMatch = compTypesParamInfo.def[2];
var includeStressPatternMatch = compTypesParamInfo.def[3];

function setup_params(params) {
	compTypesParam = new MultiboolScriptParam(
		compTypesParamInfo.id,
		compTypesParamInfo.def,
		compTypesParamInfo.desc,
		compTypesParamInfo.title,
		compTypesParamInfo.numCols);
	params.add(compTypesParam);
}

function tableOp(context, table) {
	// add headers to table
	var row = 0;
	table.setColumnTitle(row++, "Session");
	table.setColumnTitle(row++, "Age");
	table.setColumnTitle(row++, "Word Count");

	if(includeExactMatch == true) {
		table.setColumnTitle(row++, "# Exact Match");
		table.setColumnTitle(row++, "# Exact Mis-match");
		table.setColumnTitle(row++, "Exact Match");
	}

	if(includeCVPatternMatch == true) {
		table.setColumnTitle(row++, "# CV Match");
		table.setColumnTitle(row++, "# CV Mis-match");
		table.setColumnTitle(row++, "% CV Match");
	}

	if(includeSyllableCountMatch == true) {
		table.setColumnTitle(row++, "# Syllable Count Match");
		table.setColumnTitle(row++, "# Syllable Count Mis-match");
		table.setColumnTitle(row++, "% Syllable Count Match");
	}

	if(includeStressPatternMatch == true) {
		table.setColumnTitle(row++, "# Stress Match");
		table.setColumnTitle(row++, "# Stress Mis-match");
		table.setColumnTitle(row++, "% Stress Match");
	}
}
]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="309" y="183"/>
                            </extensions>
                        </node>
                        <node id="5bf134fd" name="To DefaultTableDataSource" type="class:ca.phon.opgraph.nodes.reflect.ObjectCastNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectCastNode.declaredClass">
                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="548" y="198"/>
                            </extensions>
                        </node>
                        <link dest="99bf33c4c39d4b54" destField="table" source="595ffa9c68124e62" sourceField="value"/>
                        <link dest="99bf33c4c39d4b54" destField="parameters" source="aaf9c25e9a774554" sourceField="obj"/>
                        <link dest="5bf134fd" destField="obj" source="99bf33c4c39d4b54" sourceField="table"/>
                        <extensions>
                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                            <oga:notes>
                                <oga:note color="0xffff96" height="558" title="Published Inputs" width="383" x="11" y="350"/>
                            </oga:notes>
                        </extensions>
                    </graph>
                    <ogcn:published_input field="obj" name="parameters" ref="aaf9c25e9a774554"/>
                    <ogcn:published_output field="obj" name="summaryTable" ref="5bf134fd"/>
                    <extensions>
                        <oga:meta x="447" y="427"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="6b5d4572" name="Get Table of Results For Speaker" type="ca.phon.opgraph.nodes.general.MacroNode">
                    <graph id="5ff900b1">
                        <node id="4e580612" name="Object#toString()" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember">
                                        <![CDATA[toString()]]>
                                    </oga:property>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass">
                                        <![CDATA[java.lang.Object]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="105" y="70"/>
                            </extensions>
                        </node>
                        <node id="63011e7b" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember">
                                        <![CDATA[get(java.lang.Object)]]>
                                    </oga:property>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass">
                                        <![CDATA[java.util.Map]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="296" y="73"/>
                            </extensions>
                        </node>
                        <node id="3e8df0d5" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
                            <output name="exists" type="java.lang.Boolean">does table exist</output>
                            <output name="table" type="ca.phon.query.report.datasource.DefaultTableDataSource">table if exists, undefined otherwise</output>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script">
                                        <![CDATA[
// setup input/output fields
function init(inputFields, outputFields) {
	inputFields.add("table", "");
	outputFields.add("exists", "does table exist", false, java.lang.Boolean);
	outputFields.add("table", "table if exists, undefined otherwise", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
}

function run(context) {
	var tableExists =
		(context.containsKey("table") && context.get("table") != null);
	context.put("exists", tableExists);
	context.put("table", context.get("table"));
}
]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="514" y="94"/>
                            </extensions>
                        </node>
                        <link dest="63011e7b" destField="arg1" source="4e580612" sourceField="value"/>
                        <link dest="3e8df0d5" destField="table" source="63011e7b" sourceField="value"/>
                        <extensions>
                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                        </extensions>
                    </graph>
                    <ogcn:published_input field="obj" name="speaker" ref="4e580612"/>
                    <ogcn:published_input field="obj" name="tableMap" ref="63011e7b"/>
                    <ogcn:published_output field="exists" name="exists" ref="3e8df0d5"/>
                    <ogcn:published_output field="table" name="table" ref="3e8df0d5"/>
                    <extensions>
                        <oga:meta x="469" y="102"/>
                    </extensions>
                </ogcn:macro>
                <node id="50b1d209" name="Object#toString()" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember">
                                <![CDATA[toString()]]>
                            </oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass">
                                <![CDATA[java.lang.Object]]>
                            </oga:property>
                        </oga:settings>
                        <oga:meta x="1002" y="424"/>
                    </extensions>
                </node>
                <node id="4a5320f9" type="class:ca.phon.app.opgraph.nodes.report.ReportSectionHeaderNode">
                    <extensions>
                        <oga:meta x="556" y="605"/>
                    </extensions>
                </node>
                <ogcn:macro id="588b604d" name="If Speaker has Results" type="ca.phon.opgraph.nodes.general.MacroNode">
                    <graph id="4b953d4">
                        <node id="eeae57b70e674095" name="Summary Table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="92" y="87"/>
                            </extensions>
                        </node>
                        <node id="d580fc54a5a04182" name="DefaultTableDataSource" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="92" y="248"/>
                            </extensions>
                        </node>
                        <node id="59377617e2b348f4" name="Participant" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                        <![CDATA[ca.phon.session.Participant]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="92" y="409"/>
                            </extensions>
                        </node>
                        <node id="82f0d27258db4e24" name="Parameters" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                        <![CDATA[java.util.Map]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="92" y="730"/>
                            </extensions>
                        </node>
                        <node id="7abc495911424edf" name="Aggregate Node" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="contextKey"/>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                        <![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="86" y="831"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="4e3cfee1" name="Print Aggregate Tables" type="ca.phon.opgraph.nodes.general.MacroNode">
                            <graph id="1c8cb22e">
                                <node id="b33b6cca9203423e" name="DefaultTableDataSource" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                            </oga:property>
                                        </oga:settings>
                                        <oga:meta x="100" y="33"/>
                                    </extensions>
                                </node>
                                <node id="75c582ff12304018" name="Participant" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                <![CDATA[ca.phon.session.Participant]]>
                                            </oga:property>
                                        </oga:settings>
                                        <oga:meta x="100" y="194"/>
                                    </extensions>
                                </node>
                                <node id="51bbd593cb9e4d3d" name="Parameters" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                <![CDATA[java.util.Map]]>
                                            </oga:property>
                                        </oga:settings>
                                        <oga:meta x="100" y="515"/>
                                    </extensions>
                                </node>
                                <node id="85fd62942964689" name="Aggregate Node" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                <![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]>
                                            </oga:property>
                                        </oga:settings>
                                        <oga:meta x="95" y="617"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="15c136ac7b154516" name="param: includeExactMatch" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="10c113f8">
                                        <node id="96e4e968b041478c" name="Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[java.util.Map]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="338" y="473"/>
                                            </extensions>
                                        </node>
                                        <node id="743ca19fa8e847fd" name="String#&lt;init&gt;(String)" type="class:ca.phon.opgraph.nodes.reflect.ConstructorNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.classMember">
                                                        <![CDATA[<init>(java.lang.String)]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.declaredClass">
                                                        <![CDATA[java.lang.String]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="317" y="563">
                                                    <oga:default for="arg1" type="java.lang.String"/>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <node id="fee7c14859948c5" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember">
                                                        <![CDATA[get(java.lang.Object)]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass">
                                                        <![CDATA[java.util.Map]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="493" y="469"/>
                                            </extensions>
                                        </node>
                                        <node id="afa6551fa2c24338" name="To Boolean" type="class:ca.phon.opgraph.nodes.reflect.ObjectCastNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectCastNode.declaredClass">
                                                        <![CDATA[java.lang.Boolean]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="671" y="473"/>
                                            </extensions>
                                        </node>
                                        <link dest="fee7c14859948c5" destField="arg1" source="743ca19fa8e847fd" sourceField="value"/>
                                        <link dest="fee7c14859948c5" destField="obj" source="96e4e968b041478c" sourceField="obj"/>
                                        <link dest="afa6551fa2c24338" destField="obj" source="fee7c14859948c5" sourceField="value"/>
                                    </graph>
                                    <ogcn:published_input field="obj" name="parameters" ref="96e4e968b041478c"/>
                                    <ogcn:published_input field="arg1" name="paramName" ref="743ca19fa8e847fd"/>
                                    <ogcn:published_output field="obj" name="bValue" ref="afa6551fa2c24338"/>
                                    <extensions>
                                        <oga:meta x="908" y="57">
                                            <oga:default for="paramName" type="java.lang.String">includeExactMatch</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </ogcn:macro>
                                <ogcn:macro id="9b468624100249c9" name="param: includeCVPatternMatch" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="3b77b684">
                                        <node id="dd5cf2b0e1f44ac0" name="Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[java.util.Map]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="338" y="473"/>
                                            </extensions>
                                        </node>
                                        <node id="4756afc079014504" name="String#&lt;init&gt;(String)" type="class:ca.phon.opgraph.nodes.reflect.ConstructorNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.classMember">
                                                        <![CDATA[<init>(java.lang.String)]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.declaredClass">
                                                        <![CDATA[java.lang.String]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="317" y="563">
                                                    <oga:default for="arg1" type="java.lang.String"/>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <node id="7b2c8140fad428a" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember">
                                                        <![CDATA[get(java.lang.Object)]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass">
                                                        <![CDATA[java.util.Map]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="493" y="469"/>
                                            </extensions>
                                        </node>
                                        <node id="e57af2f6811a4eb2" name="To Boolean" type="class:ca.phon.opgraph.nodes.reflect.ObjectCastNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectCastNode.declaredClass">
                                                        <![CDATA[java.lang.Boolean]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="671" y="473"/>
                                            </extensions>
                                        </node>
                                        <link dest="7b2c8140fad428a" destField="arg1" source="4756afc079014504" sourceField="value"/>
                                        <link dest="7b2c8140fad428a" destField="obj" source="dd5cf2b0e1f44ac0" sourceField="obj"/>
                                        <link dest="e57af2f6811a4eb2" destField="obj" source="7b2c8140fad428a" sourceField="value"/>
                                    </graph>
                                    <ogcn:published_input field="obj" name="parameters" ref="dd5cf2b0e1f44ac0"/>
                                    <ogcn:published_input field="arg1" name="paramName" ref="4756afc079014504"/>
                                    <ogcn:published_output field="obj" name="bValue" ref="e57af2f6811a4eb2"/>
                                    <extensions>
                                        <oga:meta x="908" y="206">
                                            <oga:default for="paramName" type="java.lang.String">includeCVPatternMatch</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </ogcn:macro>
                                <node id="b88e6f3e63a14dea" name="Word Match Split" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                                    <output name="wordMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word exact matches</output>
                                    <output name="wordMisMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word mis-matches</output>
                                    <output name="wordCVMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word CV matches</output>
                                    <output name="wordCVMisMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word CV mis-matches</output>
                                    <output name="syllableCountMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of syllable count matches</output>
                                    <output name="syllableCountMisMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of syllable count mis-matches</output>
                                    <output name="wordStressMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word stress matches</output>
                                    <output name="wordStressMisMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word stress mis-matches</output>
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="__script">
                                                <![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * This node will create output tables
 * for:
 *  - word matches/mis-matches
 *  - word CV matches/mis-matches
 *  - word stress matches/mis-matches
 */

 var compTypesParamInfo = {
	"id":["includeExactMatch", "includeCVPatternMatch", "includeSyllableCountMatch", "includeStressPatternMatch"],
	"title": "Comparators:",
	"desc":["Exact match", "CV pattern (see options below)", "Syllable Count", "Stress pattern"],
	"def":[true, true, true, true],
	"numCols":1
};
var compTypesParam;

var includeExactMatch = compTypesParamInfo.def[0];
var includeCVPatternMatch = compTypesParamInfo.def[1];
var includeSyllableCountMatch = compTypesParamInfo.def[2];
var includeStressPatternMatch = compTypesParamInfo.def[3];

function setup_params(params) {
	compTypesParam = new MultiboolScriptParam(
		compTypesParamInfo.id,
		compTypesParamInfo.def,
		compTypesParamInfo.desc,
		compTypesParamInfo.title,
		compTypesParamInfo.numCols);
	params.add(compTypesParam);
}

function init(inputFields, outputFields) {
	outputFields.add("wordMatches", "table of word exact matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("wordMisMatches", "table of word mis-matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("wordCVMatches", "table of word CV matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("wordCVMisMatches", "table of word CV mis-matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("syllableCountMatches", "table of syllable count matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("syllableCountMisMatches", "table of syllable count mis-matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("wordStressMatches", "table of word stress matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("wordStressMisMatches", "table of word stress mis-matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
}

/*
 * Create a new table with the same schema as the inputTable
 */
function setupTable(inputTable) {
    var table = new DefaultTableDataSource();
    for(c = 0; c < inputTable.columnCount; c++) {
	    var colTitle = inputTable.getColumnTitle(c);
	    table.setColumnTitle(c, colTitle);
	}
	return table;
}

function tableOp(context, table) {
	// the word-match script has already calculated the matches, use columns provided
	var exactMatchCol = table.getColumnIndex("Exact Match");
	if(includeExactMatch == true && exactMatchCol < 0) {
		java.lang.System.err.println("No word exact match column found");
		return;
	}

	var cvMatchCol = table.getColumnIndex("CV Match");
	if(includeCVPatternMatch == true && cvMatchCol < 0) {
		java.lang.System.err.println("No word CV match column found");
		return;
	}

	var syllableCountMatchCol = table.getColumnIndex("Syllable Count Match");
	if(includeSyllableCountMatch == true && syllableCountMatchCol < 0) {
		java.lang.System.err.println("No syllable count mach column found");
		return;
	}

	var stressMatchCol = table.getColumnIndex("Stress Match");
	if(includeStressPatternMatch == true && stressMatchCol < 0) {
		java.lang.System.err.println("No word stress match column found");
		return;
	}

	var wordMatchTable = setupTable(table);
	var wordMisMatchTable = setupTable(table);
	var wordCVMatchTable = setupTable(table);
	var wordCVMisMatchTable = setupTable(table);
	var syllableCountMatchTable = setupTable(table);
	var syllableCountMisMatchTable = setupTable(table);
	var wordStressMatchTable = setupTable(table);
	var wordStressMisMatchTable = setupTable(table);

	for(row = 0; row < table.getRowCount(); row++) {
		var rowData = table.getRow(row);

		if(includeExactMatch == true) {
			var isExactMatch = java.lang.Boolean.parseBoolean(table.getValueAt(row, exactMatchCol));
			if(isExactMatch == true) {
				wordMatchTable.addRow(rowData);
			} else {
				wordMisMatchTable.addRow(rowData);
			}
		}

		if(includeCVPatternMatch == true) {
			var isCVMatch = java.lang.Boolean.parseBoolean(table.getValueAt(row, cvMatchCol));
			if(isCVMatch == true) {
				wordCVMatchTable.addRow(rowData);
			} else {
				wordCVMisMatchTable.addRow(rowData);
			}
		}

		if(includeSyllableCountMatch == true) {
			var isSyllableCountMatch = java.lang.Boolean.parseBoolean(table.getValueAt(row, syllableCountMatchCol));
			if(isSyllableCountMatch == true) {
				syllableCountMatchTable.addRow(rowData);
			} else {
				syllableCountMisMatchTable.addRow(rowData);
			}
		}

		if(includeStressPatternMatch == true) {
			var isStressMatch = java.lang.Boolean.parseBoolean(table.getValueAt(row, stressMatchCol));
			if(isStressMatch == true) {
				wordStressMatchTable.addRow(rowData);
			} else {
				wordStressMisMatchTable.addRow(rowData);
			}
		}
	}

	context.put("wordMatches", wordMatchTable);
	context.put("wordMisMatches", wordMisMatchTable);
	context.put("wordCVMatches", wordCVMatchTable);
	context.put("wordCVMisMatches", wordCVMisMatchTable);
	context.put("syllableCountMatches", syllableCountMatchTable);
	context.put("syllableCountMisMatches", syllableCountMisMatchTable);
	context.put("wordStressMatches", wordStressMatchTable);
	context.put("wordStressMisMatches", wordStressMisMatchTable);
}
]]>
                                            </oga:property>
                                        </oga:settings>
                                        <oga:meta x="527" y="266"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="c6b82d72ffcd43b2" name="param: includeSyllableCountMatch" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="486040b2">
                                        <node id="5263243fa2f54b43" name="Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[java.util.Map]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="338" y="473"/>
                                            </extensions>
                                        </node>
                                        <node id="9d713e501f12458f" name="String#&lt;init&gt;(String)" type="class:ca.phon.opgraph.nodes.reflect.ConstructorNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.classMember">
                                                        <![CDATA[<init>(java.lang.String)]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.declaredClass">
                                                        <![CDATA[java.lang.String]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="317" y="563">
                                                    <oga:default for="arg1" type="java.lang.String"/>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <node id="9f2303bfe2794e39" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember">
                                                        <![CDATA[get(java.lang.Object)]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass">
                                                        <![CDATA[java.util.Map]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="493" y="469"/>
                                            </extensions>
                                        </node>
                                        <node id="eb668c3d4ac64859" name="To Boolean" type="class:ca.phon.opgraph.nodes.reflect.ObjectCastNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectCastNode.declaredClass">
                                                        <![CDATA[java.lang.Boolean]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="671" y="473"/>
                                            </extensions>
                                        </node>
                                        <link dest="9f2303bfe2794e39" destField="arg1" source="9d713e501f12458f" sourceField="value"/>
                                        <link dest="9f2303bfe2794e39" destField="obj" source="5263243fa2f54b43" sourceField="obj"/>
                                        <link dest="eb668c3d4ac64859" destField="obj" source="9f2303bfe2794e39" sourceField="value"/>
                                    </graph>
                                    <ogcn:published_input field="obj" name="parameters" ref="5263243fa2f54b43"/>
                                    <ogcn:published_input field="arg1" name="paramName" ref="9d713e501f12458f"/>
                                    <ogcn:published_output field="obj" name="bValue" ref="eb668c3d4ac64859"/>
                                    <extensions>
                                        <oga:meta x="894" y="381">
                                            <oga:default for="paramName" type="java.lang.String">includeSyllableCountMatch</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </ogcn:macro>
                                <ogcn:macro id="1b558f53989e4ae9" name="param: includeStressPatternMatch" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="6550d9bc">
                                        <node id="ea202c77fa614818" name="Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[java.util.Map]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="338" y="473"/>
                                            </extensions>
                                        </node>
                                        <node id="44dc4f13ff7044de" name="String#&lt;init&gt;(String)" type="class:ca.phon.opgraph.nodes.reflect.ConstructorNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.classMember">
                                                        <![CDATA[<init>(java.lang.String)]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.declaredClass">
                                                        <![CDATA[java.lang.String]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="317" y="563">
                                                    <oga:default for="arg1" type="java.lang.String"/>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <node id="8e4e70f6dd514466" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember">
                                                        <![CDATA[get(java.lang.Object)]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass">
                                                        <![CDATA[java.util.Map]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="493" y="469"/>
                                            </extensions>
                                        </node>
                                        <node id="6086b951bc164258" name="To Boolean" type="class:ca.phon.opgraph.nodes.reflect.ObjectCastNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectCastNode.declaredClass">
                                                        <![CDATA[java.lang.Boolean]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="671" y="473"/>
                                            </extensions>
                                        </node>
                                        <link dest="8e4e70f6dd514466" destField="arg1" source="44dc4f13ff7044de" sourceField="value"/>
                                        <link dest="8e4e70f6dd514466" destField="obj" source="ea202c77fa614818" sourceField="obj"/>
                                        <link dest="6086b951bc164258" destField="obj" source="8e4e70f6dd514466" sourceField="value"/>
                                    </graph>
                                    <ogcn:published_input field="obj" name="parameters" ref="ea202c77fa614818"/>
                                    <ogcn:published_input field="arg1" name="paramName" ref="44dc4f13ff7044de"/>
                                    <ogcn:published_output field="obj" name="bValue" ref="6086b951bc164258"/>
                                    <extensions>
                                        <oga:meta x="866" y="619">
                                            <oga:default for="paramName" type="java.lang.String">includeStressPatternMatch</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </ogcn:macro>
                                <ogcn:macro id="50f412f6" name="Exact Matches" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="76171adc">
                                        <node id="4b91aa8a" name="parent" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="15" y="15"/>
                                            </extensions>
                                        </node>
                                        <node id="358d8284" name="exact matches" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="24" y="232"/>
                                            </extensions>
                                        </node>
                                        <node id="6ad9d7d0" name="mis-matches" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="19" y="387"/>
                                            </extensions>
                                        </node>
                                        <node id="c2df4ac3971a494a" name="Exact Match Inventory" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                                            <extensions>
                                                <opqry:inventoryoptions>
                                                    <opqry:automaticConfiguration configureAutomatically="false">
                                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                                        <opqry:autoColumns caseSensitive="false" ignoreDiacritics="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                                    </opqry:automaticConfiguration>
                                                    <opqry:groupBy caseSensitive="false" column="Age" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="Orthography" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                                </opqry:inventoryoptions>
                                                <oga:settings/>
                                                <oga:meta x="279" y="236"/>
                                            </extensions>
                                        </node>
                                        <node id="d002a160c7d448a7" name="Exact Match Inventory" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                                            <extensions>
                                                <opqry:inventoryoptions>
                                                    <opqry:automaticConfiguration configureAutomatically="false">
                                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                                        <opqry:autoColumns caseSensitive="false" ignoreDiacritics="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                                    </opqry:automaticConfiguration>
                                                    <opqry:groupBy caseSensitive="false" column="Age" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="Orthography" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                                </opqry:inventoryoptions>
                                                <oga:settings/>
                                                <oga:meta x="269" y="357"/>
                                            </extensions>
                                        </node>
                                        <node id="360bb3d5" type="class:ca.phon.app.opgraph.nodes.table.SortNode">
                                            <extensions>
                                                <opqry:sortoptions autoSortOrder="ascending" configureAutomatically="true">
                                                    <opqry:sortBy column="Orthography" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="IPA Target" order="ascending" type="ipa"/>
                                                    <opqry:sortBy column="IPA Actual" order="ascending" type="ipa"/>
                                                    <opqry:sortBy column="01;10.11" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.25" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.22" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.20" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;01.03" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.15" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.29" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;03.26" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;06.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;07.04" order="ascending" type="plain"/>
                                                </opqry:sortoptions>
                                                <oga:settings/>
                                                <oga:meta x="518" y="222"/>
                                            </extensions>
                                        </node>
                                        <node id="12f4db70a35f4da5" type="class:ca.phon.app.opgraph.nodes.table.SortNode">
                                            <extensions>
                                                <opqry:sortoptions autoSortOrder="ascending" configureAutomatically="true">
                                                    <opqry:sortBy column="Orthography" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="IPA Target" order="ascending" type="ipa"/>
                                                    <opqry:sortBy column="IPA Actual" order="ascending" type="ipa"/>
                                                    <opqry:sortBy column="01;10.11" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.25" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.22" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.20" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;01.03" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.15" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.29" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;03.26" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;06.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;07.04" order="ascending" type="plain"/>
                                                </opqry:sortoptions>
                                                <oga:settings/>
                                                <oga:meta x="514" y="396"/>
                                            </extensions>
                                        </node>
                                        <node id="b83b3e1" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns">
                                                        <![CDATA[true]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                                                </oga:settings>
                                                <oga:meta x="756" y="131">
                                                    <oga:default for="sectionName" type="java.lang.String">Exact Matches</oga:default>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <node id="633ccd6382a040f8" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns">
                                                        <![CDATA[true]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                                                </oga:settings>
                                                <oga:meta x="756" y="352">
                                                    <oga:default for="sectionName" type="java.lang.String">Exact Mis-matches</oga:default>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <link dest="d002a160c7d448a7" destField="table" source="6ad9d7d0" sourceField="obj"/>
                                        <link dest="b83b3e1" destField="parent" source="4b91aa8a" sourceField="obj"/>
                                        <link dest="c2df4ac3971a494a" destField="table" source="358d8284" sourceField="obj"/>
                                        <link dest="633ccd6382a040f8" destField="parent" source="4b91aa8a" sourceField="obj"/>
                                        <link dest="360bb3d5" destField="table" source="c2df4ac3971a494a" sourceField="table"/>
                                        <link dest="b83b3e1" destField="table" source="360bb3d5" sourceField="table"/>
                                        <link dest="12f4db70a35f4da5" destField="table" source="d002a160c7d448a7" sourceField="table"/>
                                        <link dest="633ccd6382a040f8" destField="table" source="12f4db70a35f4da5" sourceField="table"/>
                                        <extensions>
                                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                                        </extensions>
                                    </graph>
                                    <ogcn:published_input field="obj" name="mis-matches" ref="6ad9d7d0"/>
                                    <ogcn:published_input field="obj" name="parent" ref="4b91aa8a"/>
                                    <ogcn:published_input field="obj" name="matches" ref="358d8284"/>
                                    <extensions>
                                        <oga:meta x="1188" y="61"/>
                                    </extensions>
                                </ogcn:macro>
                                <ogcn:macro id="118dda1" name="CV Pattern Matches" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="2b09a746">
                                        <node id="eac136" name="parent" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="15" y="15"/>
                                            </extensions>
                                        </node>
                                        <node id="3abd481b" name="table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="21" y="250"/>
                                            </extensions>
                                        </node>
                                        <node id="333ce1a4" name="table1" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="21" y="411"/>
                                            </extensions>
                                        </node>
                                        <node id="504fa37bcdbd42ef" name="CV Match Inventory" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                                            <extensions>
                                                <opqry:inventoryoptions>
                                                    <opqry:automaticConfiguration configureAutomatically="false">
                                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                                        <opqry:autoColumns caseSensitive="false" ignoreDiacritics="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                                    </opqry:automaticConfiguration>
                                                    <opqry:groupBy caseSensitive="false" column="Age" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Target CV" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Actual CV" ignoreDiacritics="true"/>
                                                </opqry:inventoryoptions>
                                                <oga:settings/>
                                                <oga:meta x="250" y="250"/>
                                            </extensions>
                                        </node>
                                        <node id="6cb26cd9c409495f" name="CV Match Inventory" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                                            <extensions>
                                                <opqry:inventoryoptions>
                                                    <opqry:automaticConfiguration configureAutomatically="false">
                                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                                        <opqry:autoColumns caseSensitive="false" ignoreDiacritics="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                                    </opqry:automaticConfiguration>
                                                    <opqry:groupBy caseSensitive="false" column="Age" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Target CV" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Actual CV" ignoreDiacritics="true"/>
                                                </opqry:inventoryoptions>
                                                <oga:settings/>
                                                <oga:meta x="250" y="411"/>
                                            </extensions>
                                        </node>
                                        <node id="363e8f9a933945ae" type="class:ca.phon.app.opgraph.nodes.table.SortNode">
                                            <extensions>
                                                <opqry:sortoptions autoSortOrder="ascending" configureAutomatically="true">
                                                    <opqry:sortBy column="IPA Target CV" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="IPA Actual CV" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.11" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.25" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.22" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.20" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;01.03" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.15" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.29" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;03.26" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;06.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;07.04" order="ascending" type="plain"/>
                                                </opqry:sortoptions>
                                                <oga:settings/>
                                                <oga:meta x="476" y="253"/>
                                            </extensions>
                                        </node>
                                        <node id="fc3a8ccc957347ca" type="class:ca.phon.app.opgraph.nodes.table.SortNode">
                                            <extensions>
                                                <opqry:sortoptions autoSortOrder="ascending" configureAutomatically="true">
                                                    <opqry:sortBy column="IPA Target CV" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="IPA Actual CV" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.11" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.25" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.22" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.20" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;01.03" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.15" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.29" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;03.26" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;06.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;07.04" order="ascending" type="plain"/>
                                                </opqry:sortoptions>
                                                <oga:settings/>
                                                <oga:meta x="506" y="431"/>
                                            </extensions>
                                        </node>
                                        <node id="15eac7f0" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns">
                                                        <![CDATA[true]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                                                </oga:settings>
                                                <oga:meta x="761" y="193">
                                                    <oga:default for="sectionName" type="java.lang.String">CV Pattern Matches</oga:default>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <node id="4d70be7d8f1546e8" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns">
                                                        <![CDATA[true]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                                                </oga:settings>
                                                <oga:meta x="761" y="414">
                                                    <oga:default for="sectionName" type="java.lang.String">CV Pattern Mis-matches</oga:default>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <link dest="15eac7f0" destField="parent" source="eac136" sourceField="obj"/>
                                        <link dest="504fa37bcdbd42ef" destField="table" source="3abd481b" sourceField="obj"/>
                                        <link dest="4d70be7d8f1546e8" destField="parent" source="eac136" sourceField="obj"/>
                                        <link dest="6cb26cd9c409495f" destField="table" source="333ce1a4" sourceField="obj"/>
                                        <link dest="363e8f9a933945ae" destField="table" source="504fa37bcdbd42ef" sourceField="table"/>
                                        <link dest="15eac7f0" destField="table" source="363e8f9a933945ae" sourceField="table"/>
                                        <link dest="fc3a8ccc957347ca" destField="table" source="6cb26cd9c409495f" sourceField="table"/>
                                        <link dest="4d70be7d8f1546e8" destField="table" source="fc3a8ccc957347ca" sourceField="table"/>
                                        <extensions>
                                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                                        </extensions>
                                    </graph>
                                    <ogcn:published_input field="obj" name="parent" ref="eac136"/>
                                    <ogcn:published_input field="obj" name="matches" ref="3abd481b"/>
                                    <ogcn:published_input field="obj" name="mis-matches" ref="333ce1a4"/>
                                    <extensions>
                                        <oga:meta x="1183" y="206"/>
                                    </extensions>
                                </ogcn:macro>
                                <ogcn:macro id="5f73a875" name="Syllable Count Matches" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="75f3dc6e">
                                        <node id="a66c46a" name="parent" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="1633" y="459"/>
                                            </extensions>
                                        </node>
                                        <node id="7871db73" name="table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="1633" y="459"/>
                                            </extensions>
                                        </node>
                                        <node id="f20d2b8" name="table1" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="1633" y="459"/>
                                            </extensions>
                                        </node>
                                        <node id="9fd3f5546316461c" name="Syllable Count Inventory" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                                            <extensions>
                                                <opqry:inventoryoptions>
                                                    <opqry:automaticConfiguration configureAutomatically="false">
                                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                                        <opqry:autoColumns caseSensitive="false" ignoreDiacritics="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                                    </opqry:automaticConfiguration>
                                                    <opqry:groupBy caseSensitive="false" column="Age" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Target Syllable Count" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Actual Syllable Count" ignoreDiacritics="false"/>
                                                </opqry:inventoryoptions>
                                                <oga:settings/>
                                                <oga:meta x="1216" y="371"/>
                                            </extensions>
                                        </node>
                                        <node id="85482801bc2c4a0e" name="Syllable Count Inventory" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                                            <extensions>
                                                <opqry:inventoryoptions>
                                                    <opqry:automaticConfiguration configureAutomatically="false">
                                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                                        <opqry:autoColumns caseSensitive="false" ignoreDiacritics="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                                    </opqry:automaticConfiguration>
                                                    <opqry:groupBy caseSensitive="false" column="Age" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Target Syllable Count" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Actual Syllable Count" ignoreDiacritics="false"/>
                                                </opqry:inventoryoptions>
                                                <oga:settings/>
                                                <oga:meta x="1224" y="541"/>
                                            </extensions>
                                        </node>
                                        <node id="da170648053b4e9f" type="class:ca.phon.app.opgraph.nodes.table.SortNode">
                                            <extensions>
                                                <opqry:sortoptions autoSortOrder="ascending" configureAutomatically="true">
                                                    <opqry:sortBy column="IPA Target Syllable Count" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="IPA Actual Syllable Count" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.11" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.25" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.22" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.20" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;01.03" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.15" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.29" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;03.26" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;06.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;07.04" order="ascending" type="plain"/>
                                                </opqry:sortoptions>
                                                <oga:settings/>
                                                <oga:meta x="1438" y="372"/>
                                            </extensions>
                                        </node>
                                        <node id="b076e80902ce46ef" type="class:ca.phon.app.opgraph.nodes.table.SortNode">
                                            <extensions>
                                                <opqry:sortoptions autoSortOrder="ascending" configureAutomatically="true">
                                                    <opqry:sortBy column="IPA Target Syllable Count" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="IPA Actual Syllable Count" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.11" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.25" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.22" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.20" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;01.03" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.15" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.29" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;03.26" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;06.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;07.04" order="ascending" type="plain"/>
                                                </opqry:sortoptions>
                                                <oga:settings/>
                                                <oga:meta x="1446" y="542"/>
                                            </extensions>
                                        </node>
                                        <node id="387f9cae" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns">
                                                        <![CDATA[true]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                                                </oga:settings>
                                                <oga:meta x="1631" y="376">
                                                    <oga:default for="sectionName" type="java.lang.String">Syllable Count Matches</oga:default>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <node id="5f5930a253944e52" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns">
                                                        <![CDATA[true]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                                                </oga:settings>
                                                <oga:meta x="1639" y="546">
                                                    <oga:default for="sectionName" type="java.lang.String">Syllable Count Mis-matches</oga:default>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <link dest="b076e80902ce46ef" destField="table" source="85482801bc2c4a0e" sourceField="table"/>
                                        <link dest="9fd3f5546316461c" destField="table" source="7871db73" sourceField="obj"/>
                                        <link dest="da170648053b4e9f" destField="table" source="9fd3f5546316461c" sourceField="table"/>
                                        <link dest="5f5930a253944e52" destField="table" source="b076e80902ce46ef" sourceField="table"/>
                                        <link dest="85482801bc2c4a0e" destField="table" source="f20d2b8" sourceField="obj"/>
                                        <link dest="387f9cae" destField="parent" source="a66c46a" sourceField="obj"/>
                                        <link dest="387f9cae" destField="table" source="da170648053b4e9f" sourceField="table"/>
                                        <link dest="5f5930a253944e52" destField="parent" source="a66c46a" sourceField="obj"/>
                                    </graph>
                                    <ogcn:published_input field="obj" name="table" ref="7871db73"/>
                                    <ogcn:published_input field="obj" name="table1" ref="f20d2b8"/>
                                    <ogcn:published_input field="obj" name="parent" ref="a66c46a"/>
                                    <extensions>
                                        <oga:meta x="1223" y="378"/>
                                    </extensions>
                                </ogcn:macro>
                                <ogcn:macro id="486e9e4" name="Stress Pattern Matches" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="4404fa1e">
                                        <node id="79fc027e" name="parent" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.app.opgraph.report.tree.ReportTreeNode]]>
                                                    </oga:property>
                                                </oga:settings>
                                            </extensions>
                                        </node>
                                        <node id="68198348" name="table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                                    </oga:property>
                                                </oga:settings>
                                            </extensions>
                                        </node>
                                        <node id="95b2dc2" name="table1" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                                    </oga:property>
                                                </oga:settings>
                                            </extensions>
                                        </node>
                                        <node id="abcc075086a043df" name="Stress Match Inventory" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                                            <extensions>
                                                <opqry:inventoryoptions>
                                                    <opqry:automaticConfiguration configureAutomatically="false">
                                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                                        <opqry:autoColumns caseSensitive="false" ignoreDiacritics="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                                    </opqry:automaticConfiguration>
                                                    <opqry:groupBy caseSensitive="false" column="Age" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Target Stress" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Actual Stress" ignoreDiacritics="false"/>
                                                </opqry:inventoryoptions>
                                                <oga:settings/>
                                                <oga:meta x="1230" y="623"/>
                                            </extensions>
                                        </node>
                                        <node id="d6e0e676054a49b3" name="Stress Match Inventory" type="class:ca.phon.app.opgraph.nodes.table.InventoryNode">
                                            <extensions>
                                                <opqry:inventoryoptions>
                                                    <opqry:automaticConfiguration configureAutomatically="false">
                                                        <opqry:autoGrouping column="Age" grouping="true"/>
                                                        <opqry:autoColumns caseSensitive="false" ignoreDiacritics="false" includeAdditionalGroupData="false" includeAdditionalWordData="false" includeMetadata="true"/>
                                                    </opqry:automaticConfiguration>
                                                    <opqry:groupBy caseSensitive="false" column="Age" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Target Stress" ignoreDiacritics="false"/>
                                                    <opqry:column caseSensitive="false" column="IPA Actual Stress" ignoreDiacritics="false"/>
                                                </opqry:inventoryoptions>
                                                <oga:settings/>
                                                <oga:meta x="1233" y="793"/>
                                            </extensions>
                                        </node>
                                        <node id="360db2dc" type="class:ca.phon.app.opgraph.nodes.table.SortNode">
                                            <extensions>
                                                <opqry:sortoptions autoSortOrder="ascending" configureAutomatically="true">
                                                    <opqry:sortBy column="IPA Target Stress" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="IPA Actual Stress" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.11" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.25" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.22" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.20" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;01.03" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.15" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.29" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;03.26" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;06.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;07.04" order="ascending" type="plain"/>
                                                </opqry:sortoptions>
                                                <oga:settings/>
                                                <oga:meta x="1447" y="627"/>
                                            </extensions>
                                        </node>
                                        <node id="a8e05afa167b4bb6" type="class:ca.phon.app.opgraph.nodes.table.SortNode">
                                            <extensions>
                                                <opqry:sortoptions autoSortOrder="ascending" configureAutomatically="true">
                                                    <opqry:sortBy column="IPA Target Stress" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="IPA Actual Stress" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.11" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;10.25" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="01;11.22" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;00.20" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;01.03" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.15" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;02.29" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;03.26" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;04.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.09" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;05.23" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;06.06" order="ascending" type="plain"/>
                                                    <opqry:sortBy column="02;07.04" order="ascending" type="plain"/>
                                                </opqry:sortoptions>
                                                <oga:settings/>
                                                <oga:meta x="1450" y="797"/>
                                            </extensions>
                                        </node>
                                        <node id="3fcd305c" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns">
                                                        <![CDATA[true]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                                                </oga:settings>
                                                <oga:meta x="1661" y="641">
                                                    <oga:default for="sectionName" type="java.lang.String">Stress Pattern Matches</oga:default>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <node id="d3e490fda829474a" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns">
                                                        <![CDATA[true]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                                                </oga:settings>
                                                <oga:meta x="1664" y="811">
                                                    <oga:default for="sectionName" type="java.lang.String">Stress Pattern Mis-matches</oga:default>
                                                </oga:meta>
                                            </extensions>
                                        </node>
                                        <link dest="3fcd305c" destField="parent" source="79fc027e" sourceField="obj"/>
                                        <link dest="360db2dc" destField="table" source="abcc075086a043df" sourceField="table"/>
                                        <link dest="abcc075086a043df" destField="table" source="68198348" sourceField="obj"/>
                                        <link dest="d6e0e676054a49b3" destField="table" source="95b2dc2" sourceField="obj"/>
                                        <link dest="3fcd305c" destField="table" source="360db2dc" sourceField="table"/>
                                        <link dest="d3e490fda829474a" destField="table" source="a8e05afa167b4bb6" sourceField="table"/>
                                        <link dest="d3e490fda829474a" destField="parent" source="79fc027e" sourceField="obj"/>
                                        <link dest="a8e05afa167b4bb6" destField="table" source="d6e0e676054a49b3" sourceField="table"/>
                                    </graph>
                                    <ogcn:published_input field="obj" name="parent" ref="79fc027e"/>
                                    <ogcn:published_input field="obj" name="table" ref="68198348"/>
                                    <ogcn:published_input field="obj" name="table1" ref="95b2dc2"/>
                                    <extensions>
                                        <oga:meta x="1235" y="601"/>
                                    </extensions>
                                </ogcn:macro>
                                <link dest="15c136ac7b154516" destField="parameters" source="51bbd593cb9e4d3d" sourceField="obj"/>
                                <link dest="9b468624100249c9" destField="parameters" source="51bbd593cb9e4d3d" sourceField="obj"/>
                                <link dest="c6b82d72ffcd43b2" destField="parameters" source="51bbd593cb9e4d3d" sourceField="obj"/>
                                <link dest="1b558f53989e4ae9" destField="parameters" source="51bbd593cb9e4d3d" sourceField="obj"/>
                                <link dest="b88e6f3e63a14dea" destField="table" source="b33b6cca9203423e" sourceField="obj"/>
                                <link dest="b88e6f3e63a14dea" destField="parameters" source="51bbd593cb9e4d3d" sourceField="obj"/>
                                <link dest="50f412f6" destField="mis-matches" source="b88e6f3e63a14dea" sourceField="wordMisMatches"/>
                                <link dest="50f412f6" destField="parent" source="85fd62942964689" sourceField="obj"/>
                                <link dest="50f412f6" destField="matches" source="b88e6f3e63a14dea" sourceField="wordMatches"/>
                                <link dest="50f412f6" destField="enabled" source="15c136ac7b154516" sourceField="bValue"/>
                                <link dest="118dda1" destField="matches" source="b88e6f3e63a14dea" sourceField="wordCVMatches"/>
                                <link dest="118dda1" destField="mis-matches" source="b88e6f3e63a14dea" sourceField="wordCVMisMatches"/>
                                <link dest="118dda1" destField="parent" source="85fd62942964689" sourceField="obj"/>
                                <link dest="118dda1" destField="enabled" source="9b468624100249c9" sourceField="bValue"/>
                                <link dest="5f73a875" destField="parent" source="85fd62942964689" sourceField="obj"/>
                                <link dest="5f73a875" destField="table1" source="b88e6f3e63a14dea" sourceField="syllableCountMisMatches"/>
                                <link dest="5f73a875" destField="table" source="b88e6f3e63a14dea" sourceField="syllableCountMatches"/>
                                <link dest="5f73a875" destField="enabled" source="c6b82d72ffcd43b2" sourceField="bValue"/>
                                <link dest="486e9e4" destField="parent" source="85fd62942964689" sourceField="obj"/>
                                <link dest="486e9e4" destField="table" source="b88e6f3e63a14dea" sourceField="wordStressMatches"/>
                                <link dest="486e9e4" destField="table1" source="b88e6f3e63a14dea" sourceField="wordStressMisMatches"/>
                                <link dest="486e9e4" destField="enabled" source="1b558f53989e4ae9" sourceField="bValue"/>
                                <extensions>
                                    <oga:notes>
                                        <oga:note color="0xffff96" height="896" title="Published Inputs" width="387" x="50" y="10"/>
                                    </oga:notes>
                                    <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                                </extensions>
                            </graph>
                            <ogcn:published_input field="obj" name="table" ref="b33b6cca9203423e"/>
                            <ogcn:published_input field="obj" name="speaker" ref="75c582ff12304018"/>
                            <ogcn:published_input field="obj" name="parameters" ref="51bbd593cb9e4d3d"/>
                            <ogcn:published_input field="obj" name="aggregateNode" ref="85fd62942964689"/>
                            <extensions>
                                <oga:meta x="478" y="167"/>
                            </extensions>
                        </ogcn:macro>
                        <node id="7c61771a" name="Split Table by Session" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                            <output name="keySet" type="java.util.Set">Unique values from given column name</output>
                            <output name="tableMap" type="java.util.Map">Map of key -&gt; table values</output>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script">
                                        <![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

 /**
  * Split Table.js
  *
  * Script for use with ca.phon.app.opgraph.nodes.table.TableScriptNode
  *
  * Split table based on column name.  Two outputs
  * are produced, a set of keys from the column used in the filter  and a
  * map of key -> table values.
  */

var columnParamInfo = {
	"id": "columnName",
	"title": "Column Name",
	"def": "",
	"prompt": "Enter column name"
}

function setup_params(params) {
	var columnParam = new StringScriptParam(
		columnParamInfo.id,
		columnParamInfo.title,
		columnParamInfo.def);
	columnParam.setPrompt(columnParamInfo.prompt);
	params.add(columnParam);
}

// add custom inputs/outputs here
function init(inputs, outputs) {
	outputs.add("keySet", "Unique values from given column name", false, java.util.Set);
	outputs.add("tableMap", "Map of key -> table values", false, java.util.Map);
}

/*
 * Create a new table with the same schema as the inputTable
 */
function setupTable(inputTable) {
    var table = new DefaultTableDataSource();
    for(c = 0; c < inputTable.columnCount; c++) {
	    var colTitle = inputTable.getColumnTitle(c);
	    table.setColumnTitle(c, colTitle);
	}
	return table;
}

// run operation on table
function tableOp(context, table) {
	// find table column index
	col = table.getColumnIndex(columnName);

	if(col < 0)
		return; // column not found

	var tableMap = new java.util.LinkedHashMap();

	for(row = 0; row < table.rowCount; row++) {
	    // use string value as row key
		var rowKey = Packages.ca.phon.formatter.FormatterUtil.format(table.getValueAt(row, col));

		var keyTable = tableMap.get(rowKey);
		if(keyTable == null) {
		    keyTable = setupTable(table);
		    tableMap.put(rowKey, keyTable);
		}
		keyTable.addRow(table.getRow(row));
	}

	context.put("keySet", tableMap.keySet());
	context.put("tableMap", tableMap);
}
]]>
                                    </oga:property>
                                    <oga:property key="columnName">
                                        <![CDATA[Session]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="480" y="375"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="3ad7825a" name="For Each Session" type="ca.phon.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="35c0204c">
                                <node id="20a81de6" name="Session Name" type="class:ca.phon.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ContextualItemClassNode.key">
                                                <![CDATA[currentValue]]>
                                            </oga:property>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass">
                                                <![CDATA[java.lang.Object]]>
                                            </oga:property>
                                        </oga:settings>
                                        <oga:meta x="46" y="66"/>
                                    </extensions>
                                </node>
                                <node id="4cc204d606b04df5" name="Table Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                <![CDATA[java.util.Map]]>
                                            </oga:property>
                                        </oga:settings>
                                        <oga:meta x="96" y="341"/>
                                    </extensions>
                                </node>
                                <node id="49f800d7cde04991" name="Participant" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                <![CDATA[ca.phon.session.Participant]]>
                                            </oga:property>
                                        </oga:settings>
                                        <oga:meta x="95" y="442"/>
                                    </extensions>
                                </node>
                                <node id="a227f9bdbb2446da" name="Summary Table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                            </oga:property>
                                        </oga:settings>
                                        <oga:meta x="98" y="763"/>
                                    </extensions>
                                </node>
                                <node id="b338da80df334036" name="Parameters" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                <![CDATA[java.util.Map]]>
                                            </oga:property>
                                        </oga:settings>
                                        <oga:meta x="99" y="924"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="7ae44e7f" name="Get Table for Session" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="26d6fdb2">
                                        <node id="45ab2b8b" name="Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[java.util.Map]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="244" y="68"/>
                                            </extensions>
                                        </node>
                                        <node id="5b4cfba5" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember">
                                                        <![CDATA[get(java.lang.Object)]]>
                                                    </oga:property>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass">
                                                        <![CDATA[java.util.Map]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="401" y="69"/>
                                            </extensions>
                                        </node>
                                        <node id="403c5ed7c14a4e60" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
                                            <output name="exists" type="java.lang.Boolean">does table exist</output>
                                            <output name="table" type="ca.phon.query.report.datasource.DefaultTableDataSource">table if exists, undefined otherwise</output>
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="__script">
                                                        <![CDATA[
// setup input/output fields
function init(inputFields, outputFields) {
	inputFields.add("table", "");
	outputFields.add("exists", "does table exist", false, java.lang.Boolean);
	outputFields.add("table", "table if exists, undefined otherwise", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
}

function run(context) {
	var tableExists =
		(context.containsKey("table") && context.get("table") != null);
	context.put("exists", tableExists);
	context.put("table", context.get("table"));
}
]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="555" y="73"/>
                                            </extensions>
                                        </node>
                                        <link dest="5b4cfba5" destField="obj" source="45ab2b8b" sourceField="obj"/>
                                        <link dest="403c5ed7c14a4e60" destField="table" source="5b4cfba5" sourceField="value"/>
                                    </graph>
                                    <ogcn:published_input field="arg1" name="sessionName" ref="5b4cfba5"/>
                                    <ogcn:published_input field="obj" name="tableMap" ref="45ab2b8b"/>
                                    <ogcn:published_output field="exists" name="exists" ref="403c5ed7c14a4e60"/>
                                    <ogcn:published_output field="table" name="table" ref="403c5ed7c14a4e60"/>
                                    <extensions>
                                        <oga:meta x="399" y="89"/>
                                    </extensions>
                                </ogcn:macro>
                                <ogcn:macro id="369cc50c" name="If Speaker has Results for Session" type="ca.phon.opgraph.nodes.general.MacroNode">
                                    <graph id="56177479">
                                        <node id="7eeb13ba4ea4541" name="DefaultTableDataSource" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="53" y="390"/>
                                            </extensions>
                                        </node>
                                        <node id="486ac6c4ab954867" name="Session Name" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[java.lang.Object]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="56" y="551"/>
                                            </extensions>
                                        </node>
                                        <node id="5ab9334ebdb74de4" name="Participant" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.session.Participant]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="59" y="652"/>
                                            </extensions>
                                        </node>
                                        <node id="fcb5d1a144be4576" name="Summary Table" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[ca.phon.query.report.datasource.DefaultTableDataSource]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="58" y="973"/>
                                            </extensions>
                                        </node>
                                        <node id="d3c08f512e24415d" name="Parameters" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass">
                                                        <![CDATA[java.util.Map]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="65" y="1134"/>
                                            </extensions>
                                        </node>
                                        <node id="e73931dd6c2c4f42" name="Word Match Split" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                                            <output name="wordMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word exact matches</output>
                                            <output name="wordMisMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word mis-matches</output>
                                            <output name="wordCVMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word CV matches</output>
                                            <output name="wordCVMisMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word CV mis-matches</output>
                                            <output name="syllableCountMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of syllable count matches</output>
                                            <output name="syllableCountMisMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of syllable count mis-matches</output>
                                            <output name="wordStressMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word stress matches</output>
                                            <output name="wordStressMisMatches" type="ca.phon.query.report.datasource.DefaultTableDataSource">table of word stress mis-matches</output>
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="__script">
                                                        <![CDATA[/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2017, Gregory Hedlund <ghedlund@mun.ca> and Yvan Rose <yrose@mun.ca>
 * Dept of Linguistics, Memorial University <https://phon.ca>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * This node will create output tables
 * for:
 *  - word matches/mis-matches
 *  - word CV matches/mis-matches
 *  - word stress matches/mis-matches
 */

 var compTypesParamInfo = {
	"id":["includeExactMatch", "includeCVPatternMatch", "includeSyllableCountMatch", "includeStressPatternMatch"],
	"title": "Comparators:",
	"desc":["Exact match", "CV pattern (see options below)", "Syllable Count", "Stress pattern"],
	"def":[true, true, true, true],
	"numCols":1
};
var compTypesParam;

var includeExactMatch = compTypesParamInfo.def[0];
var includeCVPatternMatch = compTypesParamInfo.def[1];
var includeSyllableCountMatch = compTypesParamInfo.def[2];
var includeStressPatternMatch = compTypesParamInfo.def[3];

function setup_params(params) {
	compTypesParam = new MultiboolScriptParam(
		compTypesParamInfo.id,
		compTypesParamInfo.def,
		compTypesParamInfo.desc,
		compTypesParamInfo.title,
		compTypesParamInfo.numCols);
	params.add(compTypesParam);
}

function init(inputFields, outputFields) {
	outputFields.add("wordMatches", "table of word exact matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("wordMisMatches", "table of word mis-matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("wordCVMatches", "table of word CV matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("wordCVMisMatches", "table of word CV mis-matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("syllableCountMatches", "table of syllable count matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("syllableCountMisMatches", "table of syllable count mis-matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("wordStressMatches", "table of word stress matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
	outputFields.add("wordStressMisMatches", "table of word stress mis-matches", false, Packages.ca.phon.query.report.datasource.DefaultTableDataSource);
}

/*
 * Create a new table with the same schema as the inputTable
 */
function setupTable(inputTable) {
    var table = new DefaultTableDataSource();
    for(c = 0; c < inputTable.columnCount; c++) {
	    var colTitle = inputTable.getColumnTitle(c);
	    table.setColumnTitle(c, colTitle);
	}
	return table;
}

function tableOp(context, table) {
	// the word-match script has already calculated the matches, use columns provided
	var exactMatchCol = table.getColumnIndex("Exact Match");
	if(includeExactMatch == true && exactMatchCol < 0) {
		java.lang.System.err.println("No word exact match column found");
		return;
	}

	var cvMatchCol = table.getColumnIndex("CV Match");
	if(includeCVPatternMatch == true && cvMatchCol < 0) {
		java.lang.System.err.println("No word CV match column found");
		return;
	}

	var syllableCountMatchCol = table.getColumnIndex("Syllable Count Match");
	if(includeSyllableCountMatch == true && syllableCountMatchCol < 0) {
		java.lang.System.err.println("No syllable count mach column found");
		return;
	}

	var stressMatchCol = table.getColumnIndex("Stress Match");
	if(includeStressPatternMatch == true && stressMatchCol < 0) {
		java.lang.System.err.println("No word stress match column found");
		return;
	}

	var wordMatchTable = setupTable(table);
	var wordMisMatchTable = setupTable(table);
	var wordCVMatchTable = setupTable(table);
	var wordCVMisMatchTable = setupTable(table);
	var syllableCountMatchTable = setupTable(table);
	var syllableCountMisMatchTable = setupTable(table);
	var wordStressMatchTable = setupTable(table);
	var wordStressMisMatchTable = setupTable(table);

	for(row = 0; row < table.getRowCount(); row++) {
		var rowData = table.getRow(row);

		if(includeExactMatch == true) {
			var isExactMatch = java.lang.Boolean.parseBoolean(table.getValueAt(row, exactMatchCol));
			if(isExactMatch == true) {
				wordMatchTable.addRow(rowData);
			} else {
				wordMisMatchTable.addRow(rowData);
			}
		}

		if(includeCVPatternMatch == true) {
			var isCVMatch = java.lang.Boolean.parseBoolean(table.getValueAt(row, cvMatchCol));
			if(isCVMatch == true) {
				wordCVMatchTable.addRow(rowData);
			} else {
				wordCVMisMatchTable.addRow(rowData);
			}
		}

		if(includeSyllableCountMatch == true) {
			var isSyllableCountMatch = java.lang.Boolean.parseBoolean(table.getValueAt(row, syllableCountMatchCol));
			if(isSyllableCountMatch == true) {
				syllableCountMatchTable.addRow(rowData);
			} else {
				syllableCountMisMatchTable.addRow(rowData);
			}
		}

		if(includeStressPatternMatch == true) {
			var isStressMatch = java.lang.Boolean.parseBoolean(table.getValueAt(row, stressMatchCol));
			if(isStressMatch == true) {
				wordStressMatchTable.addRow(rowData);
			} else {
				wordStressMisMatchTable.addRow(rowData);
			}
		}
	}

	context.put("wordMatches", wordMatchTable);
	context.put("wordMisMatches", wordMisMatchTable);
	context.put("wordCVMatches", wordCVMatchTable);
	context.put("wordCVMisMatches", wordCVMisMatchTable);
	context.put("syllableCountMatches", syllableCountMatchTable);
	context.put("syllableCountMisMatches", syllableCountMisMatchTable);
	context.put("wordStressMatches", wordStressMatchTable);
	context.put("wordStressMisMatches", wordStressMisMatchTable);
}
]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="466" y="443"/>
                                            </extensions>
                                        </node>
                                        <node id="6c872a8d" name="Add Summary Row for Session" type="class:ca.phon.app.opgraph.nodes.table.TableScriptNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="__script">
                                                        <![CDATA[
var compTypesParamInfo = {
	"id":["includeExactMatch", "includeCVPatternMatch", "includeSyllableCountMatch", "includeStressPatternMatch"],
	"title": "Comparators:",
	"desc":["Exact match", "CV pattern (see options below)", "Syllable Count", "Stress pattern"],
	"def":[true, true, true, true],
	"numCols":1
};
var compTypesParam;

var includeExactMatch = compTypesParamInfo.def[0];
var includeCVPatternMatch = compTypesParamInfo.def[1];
var includeSyllableCountMatch = compTypesParamInfo.def[2];
var includeStressPatternMatch = compTypesParamInfo.def[3];

function setup_params(params) {
	compTypesParam = new MultiboolScriptParam(
		compTypesParamInfo.id,
		compTypesParamInfo.def,
		compTypesParamInfo.desc,
		compTypesParamInfo.title,
		compTypesParamInfo.numCols);
	params.add(compTypesParam);
}

function init(inputFields, outputFields) {
	inputFields.add("sessionName", "");
	inputFields.add("allWords", "");
	inputFields.add("wordMatches", "");
	inputFields.add("wordMisMatches", "");
	inputFields.add("wordCVMatches", "");
	inputFields.add("wordCVMisMatches", "");
	inputFields.add("syllableCountMatches", "");
	inputFields.add("syllableCountMisMatches", "");
	inputFields.add("wordStressMatches", "");
	inputFields.add("wordStressMisMatches", "");
}

function tableOp(context, table) {
	var sessionName = context.get("sessionName");

	var numWords = context.get("allWords").rowCount;
	// grab age from 'allWords' table
	var age = context.get("allWords").getValueAt(0, "Age");
	var wordMatches = context.get("wordMatches").rowCount;
	var wordMisMatches = context.get("wordMisMatches").rowCount;
	var wordCVMatches = context.get("wordCVMatches").rowCount;
	var wordCVMisMatches = context.get("wordCVMisMatches").rowCount;
	var syllableCountMatches = context.get("syllableCountMatches").rowCount;
	var syllableCountMisMatches = context.get("syllableCountMisMatches").rowCount;
	var wordStressMatches = context.get("wordStressMatches").rowCount;
	var wordStressMisMatches = context.get("wordStressMisMatches").rowCount;

	var rowData = [];
	var row = 0;

	rowData[row++] = sessionName;
	rowData[row++] = age;
	rowData[row++] = new java.lang.Integer(numWords);

	if(includeExactMatch == true) {
		rowData[row++] = new java.lang.Integer(wordMatches);
		rowData[row++] = new java.lang.Integer(wordMisMatches);
		rowData[row++] = (wordMatches / numWords) * 100.0;
	}

	if(includeCVPatternMatch == true) {
		rowData[row++] = new java.lang.Integer(wordCVMatches);
		rowData[row++] = new java.lang.Integer(wordCVMisMatches);
		rowData[row++] = (wordCVMatches / numWords) * 100.0;
	}

	if(includeSyllableCountMatch == true) {
		rowData[row++] = new java.lang.Integer(syllableCountMatches);
		rowData[row++] = new java.lang.Integer(syllableCountMisMatches);
		rowData[row++] = (syllableCountMatches / numWords) * 100.0;
	}

	if(includeStressPatternMatch == true) {
		rowData[row++] = new java.lang.Integer(wordStressMatches);
		rowData[row++] = new java.lang.Integer(wordStressMisMatches);
		rowData[row++] = (wordStressMatches / numWords) * 100.0;
	}

	table.addRow(rowData);
}
]]>
                                                    </oga:property>
                                                </oga:settings>
                                                <oga:meta x="840" y="436"/>
                                            </extensions>
                                        </node>
                                        <link dest="e73931dd6c2c4f42" destField="table" source="7eeb13ba4ea4541" sourceField="obj"/>
                                        <link dest="e73931dd6c2c4f42" destField="parameters" source="d3c08f512e24415d" sourceField="obj"/>
                                        <link dest="6c872a8d" destField="parameters" source="d3c08f512e24415d" sourceField="obj"/>
                                        <link dest="6c872a8d" destField="table" source="fcb5d1a144be4576" sourceField="obj"/>
                                        <link dest="6c872a8d" destField="wordMatches" source="e73931dd6c2c4f42" sourceField="wordMatches"/>
                                        <link dest="6c872a8d" destField="wordMisMatches" source="e73931dd6c2c4f42" sourceField="wordMisMatches"/>
                                        <link dest="6c872a8d" destField="wordCVMatches" source="e73931dd6c2c4f42" sourceField="wordCVMatches"/>
                                        <link dest="6c872a8d" destField="wordCVMisMatches" source="e73931dd6c2c4f42" sourceField="wordCVMisMatches"/>
                                        <link dest="6c872a8d" destField="syllableCountMatches" source="e73931dd6c2c4f42" sourceField="syllableCountMatches"/>
                                        <link dest="6c872a8d" destField="syllableCountMisMatches" source="e73931dd6c2c4f42" sourceField="syllableCountMisMatches"/>
                                        <link dest="6c872a8d" destField="wordStressMatches" source="e73931dd6c2c4f42" sourceField="wordStressMatches"/>
                                        <link dest="6c872a8d" destField="wordStressMisMatches" source="e73931dd6c2c4f42" sourceField="wordStressMisMatches"/>
                                        <link dest="6c872a8d" destField="allWords" source="e73931dd6c2c4f42" sourceField="table"/>
                                        <link dest="6c872a8d" destField="sessionName" source="486ac6c4ab954867" sourceField="obj"/>
                                        <extensions>
                                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                                            <oga:notes>
                                                <oga:note color="0xffff96" height="927" title="Published Inputs" width="401" x="21" y="331"/>
                                            </oga:notes>
                                        </extensions>
                                    </graph>
                                    <ogcn:published_input field="obj" name="table" ref="7eeb13ba4ea4541"/>
                                    <ogcn:published_input field="obj" name="sessionName" ref="486ac6c4ab954867"/>
                                    <ogcn:published_input field="obj" name="speaker" ref="5ab9334ebdb74de4"/>
                                    <ogcn:published_input field="obj" name="summaryTable" ref="fcb5d1a144be4576"/>
                                    <ogcn:published_input field="obj" name="parameters" ref="d3c08f512e24415d"/>
                                    <ogcn:published_output field="table" name="table" ref="6c872a8d"/>
                                    <extensions>
                                        <oga:meta x="805" y="161"/>
                                    </extensions>
                                </ogcn:macro>
                                <link dest="7ae44e7f" destField="sessionName" source="20a81de6" sourceField="obj"/>
                                <link dest="7ae44e7f" destField="tableMap" source="4cc204d606b04df5" sourceField="obj"/>
                                <link dest="369cc50c" destField="enabled" source="7ae44e7f" sourceField="exists"/>
                                <link dest="369cc50c" destField="table" source="7ae44e7f" sourceField="table"/>
                                <link dest="369cc50c" destField="sessionName" source="20a81de6" sourceField="obj"/>
                                <link dest="369cc50c" destField="speaker" source="49f800d7cde04991" sourceField="obj"/>
                                <link dest="369cc50c" destField="summaryTable" source="a227f9bdbb2446da" sourceField="obj"/>
                                <link dest="369cc50c" destField="parameters" source="b338da80df334036" sourceField="obj"/>
                                <extensions>
                                    <oga:notes>
                                        <oga:note color="0xffff96" height="755" title="Published Inputs" width="291" x="70" y="290"/>
                                        <oga:note color="0x96ff96" height="266" title="Condition" width="400" x="709" y="69">This node is only executed if there are results in the current session for the current participant.</oga:note>
                                    </oga:notes>
                                    <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                                </extensions>
                            </graph>
                            <ogcn:published_input field="obj" name="tableMap" ref="4cc204d606b04df5"/>
                            <ogcn:published_input field="obj" name="speaker" ref="49f800d7cde04991"/>
                            <ogcn:published_input field="obj" name="summaryTable" ref="a227f9bdbb2446da"/>
                            <ogcn:published_input field="obj" name="parameters" ref="b338da80df334036"/>
                            <ogcn:published_output field="table" name="summaryTable" ref="369cc50c"/>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.phon.opgraph.nodes.reflect.IterableClassNode.className">
                                        <![CDATA[java.util.Set]]>
                                    </oga:property>
                                </oga:settings>
                                <oga:meta x="724" y="368"/>
                            </extensions>
                        </ogcn:macro>
                        <link dest="4e3cfee1" destField="parameters" source="82f0d27258db4e24" sourceField="obj"/>
                        <link dest="4e3cfee1" destField="speaker" source="59377617e2b348f4" sourceField="obj"/>
                        <link dest="4e3cfee1" destField="table" source="d580fc54a5a04182" sourceField="obj"/>
                        <link dest="4e3cfee1" destField="aggregateNode" source="7abc495911424edf" sourceField="obj"/>
                        <link dest="3ad7825a" destField="collection" source="7c61771a" sourceField="keySet"/>
                        <link dest="3ad7825a" destField="tableMap" source="7c61771a" sourceField="tableMap"/>
                        <link dest="3ad7825a" destField="parameters" source="82f0d27258db4e24" sourceField="obj"/>
                        <link dest="3ad7825a" destField="speaker" source="59377617e2b348f4" sourceField="obj"/>
                        <link dest="7c61771a" destField="table" source="d580fc54a5a04182" sourceField="obj"/>
                        <link dest="3ad7825a" destField="summaryTable" source="eeae57b70e674095" sourceField="obj"/>
                        <extensions>
                            <oga:notes>
                                <oga:note color="0xffff96" height="1094" title="Published Inputs" width="407" x="31" y="30"/>
                            </oga:notes>
                            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                        </extensions>
                    </graph>
                    <ogcn:published_input field="obj" name="summaryTable" ref="eeae57b70e674095"/>
                    <ogcn:published_input field="obj" name="speaker" ref="59377617e2b348f4"/>
                    <ogcn:published_input field="obj" name="table" ref="d580fc54a5a04182"/>
                    <ogcn:published_input field="obj" name="parameters" ref="82f0d27258db4e24"/>
                    <ogcn:published_input field="obj" name="aggregateNode" ref="7abc495911424edf"/>
                    <extensions>
                        <oga:meta x="844" y="136"/>
                    </extensions>
                </ogcn:macro>
                <node id="4c11498e" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns">
                                <![CDATA[true]]>
                            </oga:property>
                            <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                        </oga:settings>
                        <oga:meta x="1202" y="415"/>
                    </extensions>
                </node>
                <link dest="c395c1491dbb4a9b" destField="obj" source="4d78e0c9" sourceField="obj"/>
                <link dest="6b5d4572" destField="speaker" source="c395c1491dbb4a9b" sourceField="obj"/>
                <link dest="6b5d4572" destField="tableMap" source="bd41f2935e8a4dc9" sourceField="obj"/>
                <link dest="588b604d" destField="enabled" source="6b5d4572" sourceField="exists"/>
                <link dest="588b604d" destField="summaryTable" source="7042cc1b9ceb408c" sourceField="summaryTable"/>
                <link dest="588b604d" destField="speaker" source="c395c1491dbb4a9b" sourceField="obj"/>
                <link dest="588b604d" destField="table" source="6b5d4572" sourceField="table"/>
                <link dest="7042cc1b9ceb408c" destField="parameters" source="3f722f37801e4025" sourceField="obj"/>
                <link dest="588b604d" destField="parameters" source="3f722f37801e4025" sourceField="obj"/>
                <link dest="4c11498e" destField="enabled" source="588b604d" sourceField="finished"/>
                <link dest="4c11498e" destField="table" source="7042cc1b9ceb408c" sourceField="summaryTable"/>
                <link dest="4c11498e" destField="parent" source="bb1190d6b6114c23" sourceField="obj"/>
                <link dest="4c11498e" destField="sectionName" source="50b1d209" sourceField="value"/>
                <link dest="50b1d209" destField="obj" source="c395c1491dbb4a9b" sourceField="obj"/>
                <link dest="4a5320f9" destField="sectionName" source="50b1d209" sourceField="value"/>
                <link dest="4a5320f9" destField="parent" source="bbf98ea107574463" sourceField="obj"/>
                <link dest="588b604d" destField="aggregateNode" source="4a5320f9" sourceField="section"/>
                <extensions>
                    <oga:notes>
                        <oga:note color="0xffff96" height="698" title="Macro Published Inputs" width="373" x="50" y="276"/>
                        <oga:note color="0x96ff96" height="310" title="Condition" width="371" x="769" y="63">This macro is only executed if the speaker has results in the tableMap.</oga:note>
                    </oga:notes>
                    <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                </extensions>
            </graph>
            <ogcn:published_input field="obj" name="tableMap" ref="bd41f2935e8a4dc9"/>
            <ogcn:published_input field="obj" name="parameters" ref="3f722f37801e4025"/>
            <ogcn:published_input field="obj" name="summaryNode" ref="bb1190d6b6114c23"/>
            <ogcn:published_input field="obj" name="aggregateNode" ref="bbf98ea107574463"/>
            <extensions>
                <oga:settings>
                    <oga:property key="ca.phon.opgraph.nodes.reflect.IterableClassNode.className">
                        <![CDATA[java.util.ArrayList]]>
                    </oga:property>
                </oga:settings>
                <oga:meta x="1033" y="246"/>
            </extensions>
        </ogcn:macro>
        <node id="fb2ee6e261964a9b" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns">
                        <![CDATA[false]]>
                    </oga:property>
                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns">
                        <![CDATA[Date
Group #
Tier
Range
Result]]>
                    </oga:property>
                </oga:settings>
                <oga:meta x="1266" y="968">
                    <oga:default for="sectionName" type="java.lang.String">All Results</oga:default>
                </oga:meta>
            </extensions>
        </node>
        <link dest="3382e2e3" destField="project" source="78e659da" sourceField="project"/>
        <link dest="3382e2e3" destField="results" source="78e659da" sourceField="results"/>
        <link dest="1030eddd" destField="collection" source="f00dcc378bd645f1" sourceField="obj"/>
        <link dest="409e9fee" destField="table" source="3382e2e3" sourceField="table"/>
        <link dest="1030eddd" destField="tableMap" source="409e9fee" sourceField="tableMap"/>
        <link dest="1030eddd" destField="parameters" source="78e659da" sourceField="parameters"/>
        <link dest="78e659da" destField="sessions" source="67ab4a6" sourceField="obj"/>
        <link dest="78e659da" destField="project" source="747f610d" sourceField="obj"/>
        <link dest="78e659da" destField="parameters" source="2a3649f9" sourceField="parameters"/>
        <link dest="146219e18bcb4ce6" destField="reportName" source="a9b05078292b426b" sourceField="value"/>
        <link dest="8d77b2e4041c4de0" destField="parent" source="146219e18bcb4ce6" sourceField="root"/>
        <link dest="5d0484ed88ec41fb" destField="parent" source="146219e18bcb4ce6" sourceField="root"/>
        <link dest="313ec52cb32c4512" destField="parent" source="146219e18bcb4ce6" sourceField="root"/>
        <link dest="dcedec3f483945b5" destField="parent" source="146219e18bcb4ce6" sourceField="root"/>
        <link dest="a9b05078292b426b" destField="parameters" source="2a3649f9" sourceField="parameters"/>
        <link dest="d69eef61e1e45f7" destField="script" source="2a3649f9" sourceField="script"/>
        <link dest="8d77b2e4041c4de0" destField="text" source="d69eef61e1e45f7" sourceField="text"/>
        <link dest="1030eddd" destField="summaryNode" source="5d0484ed88ec41fb" sourceField="section"/>
        <link dest="1030eddd" destField="aggregateNode" source="313ec52cb32c4512" sourceField="section"/>
        <link dest="fb2ee6e261964a9b" destField="table" source="3382e2e3" sourceField="table"/>
        <link dest="fb2ee6e261964a9b" destField="parent" source="dcedec3f483945b5" sourceField="section"/>
        <extensions>
            <opqry:nodewizard type="ca.phon.app.opgraph.analysis.AnalysisWizardExtension">
                <opqry:info format="html" title="Word Match">
                    <opqry:message/>
                </opqry:info>
                <opqry:node ref="2a3649f9" showAsStep="true">
                    <opqry:info format="html" title="Parameters">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:report-template name="Report Prefix"/>
                <opqry:report-template name="Report Suffix"/>
            </opqry:nodewizard>
            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
            <oga:notes>
                <oga:note color="0xffff96" height="523" title="Inputs" width="345" x="8" y="6"/>
                <oga:note color="0x96ff96" height="249" title="User Input" width="343" x="11" y="538"/>
            </oga:notes>
        </extensions>
    </graph>
</opgraph>
