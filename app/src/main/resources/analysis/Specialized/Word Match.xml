<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<opgraph xmlns="https://www.phon.ca/ns/opgraph" xmlns:nes="https://www.phon.ca/ns/node_editor" xmlns:oga="https://www.phon.ca/ns/opgraph-app" xmlns:ogcn="https://www.phon.ca/ns/opgraph-common-nodes" xmlns:opqry="https://phon.ca/ns/opgraph_query" xmlns:qry="http://phon.ling.mun.ca/ns/query">
    <graph id="root">
        <node id="94702f49008b4bab" name="Project" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                </oga:settings>
                <oga:meta x="20" y="60"/>
            </extensions>
        </node>
        <node id="5d11927588c0427b" name="Selected Sessions" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                    <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                </oga:settings>
                <oga:meta x="20" y="341"/>
            </extensions>
        </node>
        <node id="f5c99cb9946c414b" name="Parameters" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
            <extensions>
                <oga:settings>
                    <oga:property key="__script"><![CDATA[importPackage(Packages.ca.phon.query.script.params)

var reportTitleParamInfo = {
	"id": "reportTitle",
	"title": "Report Title",
	"def": "Report",
	"prompt": "Enter report title"
};
var reportTitleParam;
var reportTitle = reportTitleParamInfo.def;

var combineParticipantsParamInfo = {
	"id": "combineParticipants",
	"title": "Combine results",
	"desc": "Combine results for all selected participants",
	"def": false
};
var combineParticipantsParam;
var combineParticipants = combineParticipantsParamInfo.def;

var ignoreTruncatedParamInfo = {
	"id": "ignoreTruncated",
	"def": true,
	"title": "",
	"desc": "Ignore truncated"
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

var caseSensitiveParamInfo = {
	"id": "caseSensitive",
	"def": true,
	"title": "Comparision options",
	"desc": "Case sensitive"
};
var caseSensitiveParam;
var caseSensitive = caseSensitiveParamInfo.def;

var diacriticOptionsParamInfo = {
		"id": "diacriticOptions",
		"desc": "Diacritic Options",
		"def": false,
		"retainDia": new java.util.ArrayList()
	};
var diacriticOptionsParam;
var diacriticOptions = {};

function setup_params(params) {
	reportTitleParam = new StringScriptParam(
			reportTitleParamInfo.id,
			reportTitleParamInfo.title,
			reportTitleParamInfo.def);
     reportTitleParam.setPrompt(reportTitleParamInfo.prompt);
	params.add(reportTitleParam);

	combineParticipantsParam = new BooleanScriptParam(
		combineParticipantsParamInfo.id,
		combineParticipantsParamInfo.desc,
		combineParticipantsParamInfo.title,
		combineParticipantsParamInfo.def);
	params.add(combineParticipantsParam);

	var optionsSep = new SeparatorScriptParam("Options", false);
	params.add(optionsSep);

	ignoreTruncatedParam = new BooleanScriptParam(
		ignoreTruncatedParamInfo.id,
		ignoreTruncatedParamInfo.desc,
		ignoreTruncatedParamInfo.title,
		ignoreTruncatedParamInfo.def);
	params.add(ignoreTruncatedParam);

	caseSensitiveParam = new BooleanScriptParam(
		caseSensitiveParamInfo.id,
		caseSensitiveParamInfo.desc,
		caseSensitiveParamInfo.title,
		caseSensitiveParamInfo.def);
	params.add(caseSensitiveParam);

	diacriticOptionsParam = new DiacriticOptionsScriptParam(
		diacriticOptionsParamInfo.id,
		diacriticOptionsParamInfo.desc,
		diacriticOptionsParamInfo.def,
		diacriticOptionsParamInfo.retainDia
	);		
	params.add(diacriticOptionsParam);

}
]]></oga:property>
                </oga:settings>
                <oga:meta x="13" y="627"/>
            </extensions>
        </node>
        <opqry:queryNode id="c23d66e" name="Query : Aligned IPA Domains" type="ca.phon.app.opgraph.nodes.query.QueryNode">
            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2021-03-22T08:36:57.322-02:30" name="Aligned IPA Domains" uuid="9ec3e9c7-019c-4a5f-9d49-36aeeff79adf">
                <script>
                    <url ref="Aligned IPA Domains" rel="stock"/>
                    <param id="filters.actualResultFilter.filterType">Phonex</param>
                    <param id="filters.alignedGroup.patternFilter.filterType">Plain text</param>
                    <param id="filters.alignedWord.patternFilter.filterType">Plain text</param>
                    <param id="filters.groupPattern.filterType">Plain text</param>
                    <param id="filters.searchBy.searchBy">Word</param>
                    <param id="filters.speaker.age1Comparator">equal to</param>
                    <param id="filters.speaker.age2Comparator">equal to</param>
                    <param id="filters.speaker.ageOperator">(select operator)</param>
                    <param id="filters.speaker.participantRole">(select role)</param>
                    <param id="filters.syllable.otherSyllTypePattern.filterType">Plain text</param>
                    <param id="filters.syllable.syllableType">Any syllable</param>
                    <param id="filters.targetResultFilter.filterType">Phonex</param>
                    <param id="filters.wordPattern.filterType">Plain text</param>
                    <param id="searchTier">IPA Target</param>
                </script>
            </qry:query>
            <extensions>
                <oga:settings/>
                <oga:meta x="506" y="129"/>
            </extensions>
        </opqry:queryNode>
        <ogcn:macro id="214d3352f4b34bbd" name="Get Report Title" type="ca.phon.opgraph.nodes.general.MacroNode">
            <graph id="20ee00ba">
                <node id="c56d762a8e494f07" name="String#&lt;init&gt;(String)" type="class:ca.phon.opgraph.nodes.reflect.ConstructorNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.classMember"><![CDATA[<init>(java.lang.String)]]></oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ConstructorNode.declaredClass"><![CDATA[java.lang.String]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15">
                            <oga:default for="arg1" type="java.lang.String">reportTitle</oga:default>
                        </oga:meta>
                    </extensions>
                </node>
                <node id="e4527a95fd274156" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[get(java.lang.Object)]]></oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                        </oga:settings>
                        <oga:meta x="215" y="15"/>
                    </extensions>
                </node>
                <node id="a9e17206bb204384" name="Object#toString()" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[toString()]]></oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                        </oga:settings>
                        <oga:meta x="392" y="15"/>
                    </extensions>
                </node>
                <link dest="e4527a95fd274156" destField="arg1" source="c56d762a8e494f07" sourceField="value"/>
                <link dest="a9e17206bb204384" destField="obj" source="e4527a95fd274156" sourceField="value"/>
            </graph>
            <ogcn:published_input field="obj" name="parameters" ref="e4527a95fd274156"/>
            <ogcn:published_output field="value" name="reportTitle" ref="a9e17206bb204384"/>
            <extensions>
                <oga:meta x="257" y="625"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="8adf3ae3283641a5" name="combineParticipants" type="ca.phon.opgraph.nodes.general.MacroNode">
            <graph id="58036dfb">
                <node id="3b2754d5a9de4ca8" name="obj" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                        </oga:settings>
                        <oga:meta x="271" y="993"/>
                    </extensions>
                </node>
                <node id="8b44c79998674971" type="class:ca.phon.opgraph.nodes.general.TextNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.general.TextNode.text"/>
                        </oga:settings>
                        <oga:meta x="482" y="1110"/>
                    </extensions>
                </node>
                <node id="b5874b6fd9494e37" name="Map" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                        </oga:settings>
                        <oga:meta x="481" y="1010"/>
                    </extensions>
                </node>
                <node id="6f06bba604214625" name="Map#get(Object)" type="class:ca.phon.opgraph.nodes.reflect.MethodNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.classMember"><![CDATA[get(java.lang.Object)]]></oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.MethodNode.declaredClass"><![CDATA[java.util.Map]]></oga:property>
                        </oga:settings>
                        <oga:meta x="701" y="1029"/>
                    </extensions>
                </node>
                <node id="38f4b076bd2446af" name="Object" type="class:ca.phon.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                        </oga:settings>
                        <oga:meta x="897" y="1038"/>
                    </extensions>
                </node>
                <node id="8280dcff6a144fea" type="class:ca.phon.opgraph.nodes.reflect.ObjectCastNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ObjectCastNode.declaredClass"><![CDATA[java.lang.Boolean]]></oga:property>
                        </oga:settings>
                        <oga:meta x="1089" y="1051"/>
                    </extensions>
                </node>
                <link dest="6f06bba604214625" destField="obj" source="b5874b6fd9494e37" sourceField="obj"/>
                <link dest="38f4b076bd2446af" destField="obj" source="6f06bba604214625" sourceField="value"/>
                <link dest="8280dcff6a144fea" destField="obj" source="38f4b076bd2446af" sourceField="obj"/>
                <link dest="b5874b6fd9494e37" destField="obj" source="3b2754d5a9de4ca8" sourceField="obj"/>
                <link dest="6f06bba604214625" destField="arg1" source="8b44c79998674971" sourceField="value"/>
                <extensions>
                    <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
                </extensions>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="3b2754d5a9de4ca8"/>
            <ogcn:published_input field="format" name="format" ref="8b44c79998674971"/>
            <ogcn:published_output field="obj" name="value" ref="8280dcff6a144fea"/>
            <extensions>
                <oga:meta x="290" y="755">
                    <oga:default for="format" type="java.lang.String">combineParticipants</oga:default>
                </oga:meta>
            </extensions>
        </ogcn:macro>
        <node id="5d4bbe80" type="class:ca.phon.app.opgraph.nodes.table.ResultsToTableNode">
            <extensions>
                <oga:settings>
                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                </oga:settings>
                <oga:meta x="781" y="126"/>
            </extensions>
        </node>
        <node id="2c4993a0" type="class:ca.phon.app.opgraph.nodes.SelectedParticipantsNode">
            <extensions>
                <oga:meta x="22" y="440"/>
            </extensions>
        </node>
        <node id="f429f67733a9495e" type="class:ca.phon.app.opgraph.nodes.report.NewReportNode">
            <extensions>
                <oga:settings/>
                <oga:meta x="490" y="625"/>
            </extensions>
        </node>
        <node id="fd02e6e1e8764882" name="Add Tier Match Columns" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
            <input name="table" optional="false"/>
            <output name="matchTable" type="ca.phon.query.report.datasource.DefaultTableDataSource"/>
            <extensions>
                <oga:settings>
                    <oga:property key="filters.tier2.tier"><![CDATA[IPA Actual]]></oga:property>
                    <oga:property key="filters.tier1.tier"><![CDATA[IPA Target]]></oga:property>
                    <oga:property key="__script"><![CDATA[var TierSelection = require("lib/TierSelection").TierSelection;

var filters = {
	"tier1": new TierSelection("filters.tier1"),
	"tier2": new TierSelection("filters.tier2")
};

var ignoreTruncatedParamInfo = {
	"id": "ignoreTruncated",
	"def": true,
	"title": "",
	"desc": "Ignore truncated"
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

var caseSensitiveParamInfo = {
	"id": "caseSensitive",
	"def": true,
	"title": "Comparision options",
	"desc": "Case sensitive"
};
var caseSensitiveParam;
var caseSensitive = caseSensitiveParamInfo.def;

var diacriticOptionsParamInfo = {
		"id": "diacriticOptions",
		"desc": "Diacritic Options",
		"def": false,
		"retainDia": new java.util.ArrayList()
	};
var diacriticOptionsParam;
var diacriticOptions = {};

function setup_params(params) {
	
	ignoreTruncatedParam = new BooleanScriptParam(
		ignoreTruncatedParamInfo.id,
		ignoreTruncatedParamInfo.desc,
		ignoreTruncatedParamInfo.title,
		ignoreTruncatedParamInfo.def);
	params.add(ignoreTruncatedParam);

	var tier1Sep = new LabelScriptParam("", "<html><b>Tier 1</b></html>");
	params.add(tier1Sep);
	filters.tier1.param_setup(params);
	
	var tier2Sep = new LabelScriptParam("", "<html><b>Tier 2</b></html>");
	params.add(tier2Sep);
	filters.tier2.param_setup(params);

	caseSensitiveParam = new BooleanScriptParam(
		caseSensitiveParamInfo.id,
		caseSensitiveParamInfo.desc,
		caseSensitiveParamInfo.title,
		caseSensitiveParamInfo.def);
	params.add(caseSensitiveParam);

	diacriticOptionsParam = new DiacriticOptionsScriptParam(
		diacriticOptionsParamInfo.id,
		diacriticOptionsParamInfo.desc,
		diacriticOptionsParamInfo.def,
		diacriticOptionsParamInfo.retainDia
	);		
	params.add(diacriticOptionsParam);
}

function init(inputs, outputs) {
	inputs.add("table", "", TableDataSource);

	outputs.add("matchTable", "", false, DefaultTableDataSource);
}

function copyTableSchema(src, dest) {
	var col = 0;
	for(; col < src.columnCount; col++) {
		dest.setColumnTitle(col, src.getColumnTitle(col));
	}
	return col;
}

function copyTableRow(srcRow, destRow) {
	var col = 0;
	for(; col < srcRow.length; col++) {
		destRow[col] = srcRow[col];
	}
	return col;
}

// levenshtein distance
function distance(v1, v2) {
	var m = v1.length();
	var n = v2.length();
	
	var mat = new Array(m+1).fill(0);
	for(var i = 0; i <= m; i++) {
		mat[i] = new Array(n+1).fill(0);
	}
	
	for(var i = 1; i <= m; i++) mat[i][0] = i;
	for(var j = 1; j <= n; j++) mat[0][j] = j;
		
	for(var j = 1; j <= n; j++) {
		for(var i = 1; i <=m; i++) {
			var sele = v1.charAt(i-1);
			var tele = v2.charAt(j-1);
				
			if(sele == tele)
				mat[i][j] = mat[i-1][j-1];
			else
				mat[i][j] = Math.min(mat[i-1][j] + 1, 
						Math.min(mat[i][j-1]+1, mat[i-1][j-1]+1));
		}
	}
		
	return mat[m][n];
}

function run(context) {
	var table = context.get("table");
	if(table == null) return;

	var matchTable = new DefaultTableDataSource();
	var col = copyTableSchema(table, matchTable);
	matchTable.setColumnTitle(col++, "Distance");
	matchTable.setColumnTitle(col++, "Tier Match");
	context.put("matchTable", matchTable);

	var tier1Col = table.getColumnIndex(filters.tier1.tier);
	var tier2Col = table.getColumnIndex(filters.tier2.tier);
	
	if(tier1Col < 0 || tier2Col < 0) return;

	for(var row = 0; row < table.rowCount; row++) {
		var srcRow = table.getRow(row);

		var destRow = [];
		var col = copyTableRow(srcRow, destRow);

		var v1 = srcRow[tier1Col];
		var v2 = srcRow[tier2Col];

		if(ignoreTruncated == true 
			&& (v2 == null || v2.length() == 0)) continue;

		if(v1 instanceof IPATranscript && diacriticOptions.ignoreDiacritics == true) {
			if("only" == diacriticOptions.selectionMode) {
				v1 = v1.stripDiacritics(diacriticOptions.selectedDiacritics);
			} else {
				v1 = v1.stripDiacriticsExcept(diacriticOptions.selectedDiacritics);
			}
		}

		if(v2 instanceof IPATranscript && diacriticOptions.ignoreDiacritics == true) {
			if("only" == diacriticOptions.selectionMode) {
				v2 = v2.stripDiacritics(diacriticOptions.selectedDiacritics);
			} else {
				v2 = v2.stripDiacriticsExcept(diacriticOptions.selectedDiacritics);
			}
		}

		var v1txt = (caseSensitive == true ? v1.toString() : v1.toString().toLowerCase());
		var v2txt = (caseSensitive == true ? v2.toString() : v2.toString().toLowerCase());

		destRow[col++] = distance(v1txt, v2txt);
		destRow[col++] = (v1txt.matches(v2txt) ? "1" : "0");

		matchTable.addRow(destRow);
	}
}
]]></oga:property>
                </oga:settings>
                <oga:meta x="1078" y="129"/>
            </extensions>
        </node>
        <node id="7c8fdd9a9af144f1" name="Add CV Match Columns" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
            <input name="table" optional="false"/>
            <output name="matchTable" type="ca.phon.query.report.datasource.DefaultTableDataSource"/>
            <extensions>
                <oga:settings>
                    <oga:property key="__script"><![CDATA[importPackage(Packages.ca.phon.query.script.params)

var ignoreTruncatedParamInfo = {
	"id": "ignoreTruncated",
	"def": true,
	"title": "",
	"desc": "Ignore truncated"
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

var diacriticOptionsParamInfo = {
		"id": "diacriticOptions",
		"desc": "Diacritic Options",
		"def": false,
		"retainDia": new java.util.ArrayList()
	};
var diacriticOptionsParam;
var diacriticOptions = {};


function setup_params(params) {
	ignoreTruncatedParam = new BooleanScriptParam(
		ignoreTruncatedParamInfo.id,
		ignoreTruncatedParamInfo.desc,
		ignoreTruncatedParamInfo.title,
		ignoreTruncatedParamInfo.def);
	params.add(ignoreTruncatedParam);

	diacriticOptionsParam = new DiacriticOptionsScriptParam(
		diacriticOptionsParamInfo.id,
		diacriticOptionsParamInfo.desc,
		diacriticOptionsParamInfo.def,
		diacriticOptionsParamInfo.retainDia
	);		
	params.add(diacriticOptionsParam);
}

function init(inputs, outputs) {
	inputs.add("table", "", TableDataSource);

	outputs.add("matchTable", "", false, DefaultTableDataSource);
}

function copyTableSchema(src, dest) {
	var col = 0;
	for(; col < src.columnCount; col++) {
		dest.setColumnTitle(col, src.getColumnTitle(col));
	}
	return col;
}

function copyTableRow(srcRow, destRow) {
	var col = 0;
	for(; col < srcRow.length; col++) {
		destRow[col] = srcRow[col];
	}
	return col;
}

function run(context) {
	var table = context.get("table");
	if(table == null) return;

	var matchTable = new DefaultTableDataSource();
	var col = copyTableSchema(table, matchTable);
	matchTable.setColumnTitle(col++, "Target CV");
	matchTable.setColumnTitle(col++, "Actual CV");
	matchTable.setColumnTitle(col++, "CV Match");
	context.put("matchTable", matchTable);

	var ipaTargetCol = table.getColumnIndex("IPA Target");
	var ipaActualCol = table.getColumnIndex("IPA Actual");
	if(ipaTargetCol < 0 || ipaActualCol < 0) return;

	var factory = new IPAElementFactory();
	var longDiacritics = new java.util.ArrayList();
	longDiacritics.add(factory.createDiacritic(new java.lang.Character('\u02d0'.charAt(0))));
	longDiacritics.add(factory.createDiacritic(new java.lang.Character('\u02d1'.charAt(0))));

	for(var row = 0; row < table.rowCount; row++) {
		var srcRow = table.getRow(row);

		var destRow = [];
		var col = copyTableRow(srcRow, destRow);

		var ipaT = srcRow[ipaTargetCol];
		var ipaA = srcRow[ipaActualCol];
		if(ignoreTruncated == true 
			&& (ipaA == null || ipaA.length() == 0)) continue;
			
		if(diacriticOptions.ignoreDiacritics == true) {
			if("only" == diacriticOptions.selectionMode) {
				ipaT = ipaT.stripDiacritics(diacriticOptions.selectedDiacritics);
				ipaA = ipaA.stripDiacritics(diacriticOptions.selectedDiacritics);
			} else {
				ipaT = ipaT.stripDiacriticsExcept(diacriticOptions.selectedDiacritics);
				ipaA = ipaA.stripDiacriticsExcept(diacriticOptions.selectedDiacritics);
			}
		}

		var tcv = ipaT.cvPattern;
		var acv = ipaA.cvPattern;
		destRow[col++] = tcv;
		destRow[col++] = acv;
		destRow[col++] = (tcv.matches(acv) ? "1" : "0");

		matchTable.addRow(destRow);
	}
}
]]></oga:property>
                </oga:settings>
                <oga:meta x="1338" y="131"/>
            </extensions>
        </node>
        <node id="9cce1541e1c243b5" name="Add Stress Match Columns" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
            <input name="table" optional="false"/>
            <output name="matchTable" type="ca.phon.query.report.datasource.DefaultTableDataSource"/>
            <extensions>
                <oga:settings>
                    <oga:property key="__script"><![CDATA[var ignoreTruncatedParamInfo = {
	"id": "ignoreTruncated",
	"def": true,
	"title": "",
	"desc": "Ignore truncated"
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

function setup_params(params) {
	ignoreTruncatedParam = new BooleanScriptParam(
		ignoreTruncatedParamInfo.id,
		ignoreTruncatedParamInfo.desc,
		ignoreTruncatedParamInfo.title,
		ignoreTruncatedParamInfo.def);
	params.add(ignoreTruncatedParam);
}

function init(inputs, outputs) {
	inputs.add("table", "", TableDataSource);

	outputs.add("matchTable", "", false, DefaultTableDataSource);
}

function copyTableSchema(src, dest) {
	var col = 0;
	for(; col < src.columnCount; col++) {
		dest.setColumnTitle(col, src.getColumnTitle(col));
	}
	return col;
}

function copyTableRow(srcRow, destRow) {
	var col = 0;
	for(; col < srcRow.length; col++) {
		destRow[col] = srcRow[col];
	}
	return col;
}

function run(context) {
	var table = context.get("table");
	if(table == null) return;

	var matchTable = new DefaultTableDataSource();
	var col = copyTableSchema(table, matchTable);
	matchTable.setColumnTitle(col++, "Target Stress");
	matchTable.setColumnTitle(col++, "Actual Stress");
	matchTable.setColumnTitle(col++, "Stress Match");
	context.put("matchTable", matchTable);

	var ipaTargetCol = table.getColumnIndex("IPA Target");
	var ipaActualCol = table.getColumnIndex("IPA Actual");
	if(ipaTargetCol < 0 || ipaActualCol < 0) return;

	for(var row = 0; row < table.rowCount; row++) {
		var srcRow = table.getRow(row);

		var destRow = [];
		var col = copyTableRow(srcRow, destRow);

		var ipaT = srcRow[ipaTargetCol];
		var ipaA = srcRow[ipaActualCol];

		if(ignoreTruncated == true 
			&& (ipaA == null || ipaA.length() == 0)) continue;

		var tStress = ipaT.stressPattern;
		var aStress = ipaA.stressPattern;
		destRow[col++] = tStress;
		destRow[col++] = aStress;
		destRow[col++] = (tStress.matches(aStress) ? "1" : "0");

		matchTable.addRow(destRow);
	}
}
]]></oga:property>
                </oga:settings>
                <oga:meta x="1080" y="279"/>
            </extensions>
        </node>
        <node id="ad50448e3bb548ab" name="Add Syllable Count Columns" type="class:ca.phon.app.opgraph.nodes.PhonScriptNode">
            <input name="table" optional="false"/>
            <output name="matchTable" type="ca.phon.query.report.datasource.DefaultTableDataSource"/>
            <extensions>
                <oga:settings>
                    <oga:property key="__script"><![CDATA[var ignoreTruncatedParamInfo = {
	"id": "ignoreTruncated",
	"def": true,
	"title": "",
	"desc": "Ignore truncated"
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

function setup_params(params) {
	ignoreTruncatedParam = new BooleanScriptParam(
		ignoreTruncatedParamInfo.id,
		ignoreTruncatedParamInfo.desc,
		ignoreTruncatedParamInfo.title,
		ignoreTruncatedParamInfo.def);
	params.add(ignoreTruncatedParam);
}

function init(inputs, outputs) {
	inputs.add("table", "", TableDataSource);

	outputs.add("matchTable", "", false, DefaultTableDataSource);
}

function copyTableSchema(src, dest) {
	var col = 0;
	for(; col < src.columnCount; col++) {
		dest.setColumnTitle(col, src.getColumnTitle(col));
	}
	return col;
}

function copyTableRow(srcRow, destRow) {
	var col = 0;
	for(; col < srcRow.length; col++) {
		destRow[col] = srcRow[col];
	}
	return col;
}

function run(context) {
	var table = context.get("table");
	if(table == null) return;

	var matchTable = new DefaultTableDataSource();
	var col = copyTableSchema(table, matchTable);
	matchTable.setColumnTitle(col++, "Target Syllables");
	matchTable.setColumnTitle(col++, "Actual Syllables");
	matchTable.setColumnTitle(col++, "Syllable Count Match");
	context.put("matchTable", matchTable);

	var ipaTargetCol = table.getColumnIndex("IPA Target");
	var ipaActualCol = table.getColumnIndex("IPA Actual");
	if(ipaTargetCol < 0 || ipaActualCol < 0) return;

	var factory = new IPAElementFactory();
	
	for(var row = 0; row < table.rowCount; row++) {
		var srcRow = table.getRow(row);

		var destRow = [];
		var col = copyTableRow(srcRow, destRow);

		var ipaT = srcRow[ipaTargetCol];
		var ipaA = srcRow[ipaActualCol];

		if(ignoreTruncated == true 
			&& (ipaA == null || ipaA.length() == 0)) continue;

		var tsylls = ipaT.syllables().size();
		var asylls = ipaA.syllables().size();
		destRow[col++] = tsylls;
		destRow[col++] = asylls;
		destRow[col++] = (tsylls == asylls ? "1" : "0");

		matchTable.addRow(destRow);
	}
}
]]></oga:property>
                </oga:settings>
                <oga:meta x="1332" y="279"/>
            </extensions>
        </node>
        <ogcn:macro id="12592a37" type="ca.phon.app.opgraph.nodes.ForEachParticipant">
            <graph id="560d4c19">
                <node id="4bcac5a4" name="Current Speaker" type="class:ca.phon.opgraph.nodes.reflect.ContextualItemClassNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[ca.phon.session.Participant]]></oga:property>
                            <oga:property key="ca.phon.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[_currentSpeaker]]></oga:property>
                        </oga:settings>
                        <oga:meta x="59" y="58"/>
                    </extensions>
                </node>
                <node id="ca8e921" name="Speaker tables" type="class:ca.phon.app.opgraph.nodes.ForEachParticipant$ParticipantTableNode">
                    <output name="_tableExists1" type="java.lang.Boolean">Does Table #1 have data</output>
                    <output name="_speakerTable1" type="ca.phon.query.report.datasource.TableDataSource">Table #1</output>
                    <extensions>
                        <oga:meta x="59" y="379"/>
                    </extensions>
                </node>
                <extensions>
                    <oga:notes>
                        <oga:note color="0xffff96" height="474" title="Iteration" width="292" x="30" y="31"/>
                        <oga:note color="0xffff96" height="682" title="Inputs" width="310" x="27" y="515"/>
                    </oga:notes>
                </extensions>
            </graph>
            <input name="_inputTable1" optional="true">Input table # 1</input>
            <extensions>
                <oga:settings>
                    <oga:property key="ca.phon.app.opgraph.nodes.ForEachParticipant.numTables"><![CDATA[1]]></oga:property>
                </oga:settings>
                <oga:meta x="1118" y="579"/>
            </extensions>
        </ogcn:macro>
        <node id="2cf631ab" name="Listing" type="class:ca.phon.app.opgraph.nodes.report.TableSectionNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.includeColumns"><![CDATA[true]]></oga:property>
                    <oga:property key="ca.phon.app.opgraph.nodes.report.TableSectionNode.columns"/>
                </oga:settings>
                <oga:meta x="818" y="612">
                    <oga:default for="sectionName" type="java.lang.String">Listing</oga:default>
                </oga:meta>
            </extensions>
        </node>
        <link dest="214d3352f4b34bbd" destField="parameters" source="f5c99cb9946c414b" sourceField="parameters"/>
        <link dest="f429f67733a9495e" destField="reportName" source="214d3352f4b34bbd" sourceField="reportTitle"/>
        <link dest="12592a37" destField="participants" source="2c4993a0" sourceField="participants"/>
        <link dest="c23d66e" destField="project" source="94702f49008b4bab" sourceField="obj"/>
        <link dest="c23d66e" destField="sessions" source="5d11927588c0427b" sourceField="obj"/>
        <link dest="5d4bbe80" destField="project" source="c23d66e" sourceField="project"/>
        <link dest="5d4bbe80" destField="results" source="c23d66e" sourceField="results"/>
        <link dest="fd02e6e1e8764882" destField="table" source="5d4bbe80" sourceField="table"/>
        <link dest="8adf3ae3283641a5" destField="obj" source="f5c99cb9946c414b" sourceField="parameters"/>
        <link dest="2c4993a0" destField="combine" source="8adf3ae3283641a5" sourceField="value"/>
        <link dest="fd02e6e1e8764882" destField="parameters" source="f5c99cb9946c414b" sourceField="parameters"/>
        <link dest="7c8fdd9a9af144f1" destField="table" source="fd02e6e1e8764882" sourceField="matchTable"/>
        <link dest="7c8fdd9a9af144f1" destField="parameters" source="f5c99cb9946c414b" sourceField="parameters"/>
        <link dest="9cce1541e1c243b5" destField="table" source="7c8fdd9a9af144f1" sourceField="matchTable"/>
        <link dest="9cce1541e1c243b5" destField="parameters" source="f5c99cb9946c414b" sourceField="parameters"/>
        <link dest="ad50448e3bb548ab" destField="table" source="9cce1541e1c243b5" sourceField="matchTable"/>
        <link dest="12592a37" destField="_inputTable1" source="ad50448e3bb548ab" sourceField="matchTable"/>
        <link dest="ad50448e3bb548ab" destField="parameters" source="f5c99cb9946c414b" sourceField="parameters"/>
        <link dest="2cf631ab" destField="parent" source="f429f67733a9495e" sourceField="root"/>
        <link dest="2cf631ab" destField="table" source="ad50448e3bb548ab" sourceField="matchTable"/>
        <extensions>
            <opqry:nodewizard type="ca.phon.app.opgraph.analysis.AnalysisWizardExtension">
                <opqry:info format="html" title="Word Match">
                    <opqry:message/>
                </opqry:info>
            </opqry:nodewizard>
            <oga:notes>
                <oga:note color="0xffff96" height="537" title="Analysis Inputs" width="379" x="10" y="10">These inputs are provided to all analyses.</oga:note>
                <oga:note color="0xffc864" height="313" title="Start Report" width="731" x="9" y="561">Reports are created in a tree structure. When combined using the Analysis Composer the report tree created by the 'New Report' node will be added as a subtree to the larger report.</oga:note>
                <oga:note color="0x9696ff" height="541" title="Query" width="1245" x="398" y="10">Execute query and generate a query report using the Report Composer.  The report output from the 'Query Report' node should be added to the report created by the 'New Report' node below. To 'chain' queries, add a new query node using the Library view. Connect the 'project' and 'results' outputs from one query node to the 'project' and 'sessions' inputs of the next query.</oga:note>
            </oga:notes>
            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
        </extensions>
    </graph>
</opgraph>
