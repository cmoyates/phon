<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<opgraph xmlns="http://gedge.ca/ns/opgraph" xmlns:nes="https://www.phon.ca/ns/node_editor" xmlns:oga="http://gedge.ca/ns/opgraph-app" xmlns:ogcn="http://gedge.ca/ns/opgraph-common-nodes" xmlns:opqry="https://phon.ca/ns/opgraph_query" xmlns:qry="http://phon.ling.mun.ca/ns/query">
    <graph id="root">
        <node id="79946f09" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                </oga:settings>
                <oga:meta x="15" y="15"/>
            </extensions>
        </node>
        <node id="2367e872" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                </oga:settings>
                <oga:meta x="91" y="252"/>
            </extensions>
        </node>
        <ogcn:macro id="202870d8" name="Word Match" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="12bb787a">
                <node id="883bf8c4a0d04976" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <node id="2c656564e5e5421a" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="91" y="252"/>
                    </extensions>
                </node>
                <ogcn:macro id="dfcddbc6284e4e5b" name="Word Match (CV)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="1f41fdc0">
                        <opqry:queryNode id="2b7bfe59bce74be7" name="Query : Word List" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.375-02:30" name="Word List" uuid="7ebc1071-6697-4935-a051-b1e0fdb42e82">
                                <script>
                                    <source>/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2015, Gregory Hedlund &lt;ghedlund@mun.ca&gt; and Yvan Rose &lt;yrose@mun.ca&gt;
 * Dept of Linguistics, Memorial University &lt;https://phon.ca&gt;
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */
/**
 * Create a listing of aligned words from the Orthography/IPA Target/IPA Actual
 * tiers.
 */

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;

var filters = {
		"group": new GroupFilter("filters.group"),
		"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
		"word": new WordFilter("filters.word"),
		"alignedWord": new AlignedWordFilter("filters.alignedWord"),
		"speaker": new ParticipantFilter("filters.speaker")
};

var session;

function begin_search(s) {
	session = s;
}

function setup_params(params) {
	filters.group.param_setup(params);
	var sep = new LabelScriptParam("", "Aligned Group Filter");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.searchByWordEnabled = false;
	filters.word.param_setup(params);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);

	filters.speaker.param_setup(params);
}

function query_record(recordIndex, record) {
	if(!filters.speaker.check_speaker(record.speaker)) return;
    
	var searchObjects = filters.group.getRequestedGroups(record);
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    searchObjects = filters.alignedGroup.filter_groups(record, searchObjects);
	}
	
	for(var gIdx = 0; gIdx &lt; searchObjects.length; gIdx++) {
		var group = searchObjects[gIdx];
		
		// use 'IPA Target' as our source tier
		var words = filters.word.getRequestedWords(group, "IPA Target");
		
		for(var wIdx = 0; wIdx &lt; words.length; wIdx++) {
			var word = words[wIdx];
			var ortho = word.orthography || new Orthography();
			var ipaT = word.IPATarget || new IPATranscript();
			var ipaA = word.IPAActual || new IPATranscript();
			
			var result = factory.createResult();
			result.schema = "ALIGNED";
			result.recordIndex = recordIndex;
			
			var rv1 = factory.createResultValue();
			rv1.tierName = "Orthography";
	    	rv1.groupIndex = gIdx;
	    	var startIndex = (ortho.toString().length() &gt; 0 ? word.getOrthographyWordLocation() : 0);
	    	var endIndex = startIndex + ortho.toString().length();
	    	rv1.range = new Range(startIndex, endIndex, false);
	    	rv1.data = ortho;
	    	result.addResultValue(rv1);
	    	
	    	var rvt = factory.createResultValue();
		    rvt.tierName = "IPA Target";
	    	rvt.groupIndex = gIdx;
	    	var startIndex = (ipaT.length() &gt; 0 ? word.getIPATargetWordLocation() : 0);
	    	var endIndex = startIndex + ipaT.toString().length();
	    	rvt.range = new Range(startIndex, endIndex, false);
	    	rvt.data = ipaT;
	    	result.addResultValue(rvt);
	    	
	    	var rva = factory.createResultValue();
	    	rva.tierName = "IPA Actual";
	    	rva.groupIndex = gIdx;
	    	startIndex = (ipaA.length() &gt; 0 ? word.getIPAActualWordLocation() : 0);
	    	endIndex = startIndex + ipaA.toString().length();
	    	rva.range = new Range(startIndex, endIndex, false);
	    	rva.data = ipaA;
	        result.addResultValue(rva);
	        
	        results.addResult(result);
		}
	}
}
</source>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="55c4f133f680431a" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="15"/>
                            </extensions>
                        </node>
                        <node id="d5c28682dcba4e16" name="Add IPA Target CV" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Target").cvPattern;
}
]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Target CV]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="279" y="165"/>
                            </extensions>
                        </node>
                        <node id="6de2d6e7236a455b" name="Add IPA Actual CV" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Actual").cvPattern;
}
]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Actual CV]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="165"/>
                            </extensions>
                        </node>
                        <node id="c289bf765dfa4fb4" type="class:ca.phon.app.opgraph.nodes.query.PartitionTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[function filterRow(table, row) {
	var ipaTCV = table.getValueAt(row, "IPA Target").cvPattern;
	var ipaACV = table.getValueAt(row, "IPA Actual").cvPattern;

	return ipaTCV.equalsIgnoreCase(ipaACV);
}
]]></oga:property>
                                </oga:settings>
                                <oga:meta x="329" y="290"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="807ff47842e4fc5" name="Word CVG Matches" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="15c49f0c">
                                <node id="e8ec1a34ffea4520" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target CV" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual CV" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="511" y="380"/>
                                    </extensions>
                                </node>
                                <node id="2059acf8c4d04941" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="IPA Target CV" order="ascending" type="plain"/>
                                            <opqry:sortBy column="IPA Actual CV" order="ascending" type="plain"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="677" y="381"/>
                                    </extensions>
                                </node>
                                <node id="e18118e5ef474071" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="702" y="483">
                                            <oga:default for="buffer" type="java.lang.String">Word CV Matches</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="e18118e5ef474071" destField="data" source="2059acf8c4d04941" sourceField="table"/>
                                <link dest="2059acf8c4d04941" destField="table" source="e8ec1a34ffea4520" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="table" name="table" ref="e8ec1a34ffea4520"/>
                            <extensions>
                                <oga:meta x="537" y="291"/>
                            </extensions>
                        </ogcn:macro>
                        <ogcn:macro id="a80d96aa822a4c17" name="Word CVG Mis-matches" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="ef84166">
                                <node id="7d0cab15ee1d4ce3" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target CV" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual CV" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="511" y="380"/>
                                    </extensions>
                                </node>
                                <node id="176943c61a6d4503" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="IPA Target CV" order="ascending" type="plain"/>
                                            <opqry:sortBy column="IPA Actual CV" order="ascending" type="plain"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="677" y="381"/>
                                    </extensions>
                                </node>
                                <node id="2f0d734247d64d80" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="702" y="483">
                                            <oga:default for="buffer" type="java.lang.String">Word CV Mis-matches</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="2f0d734247d64d80" destField="data" source="176943c61a6d4503" sourceField="table"/>
                                <link dest="176943c61a6d4503" destField="table" source="7d0cab15ee1d4ce3" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="table" name="table" ref="7d0cab15ee1d4ce3"/>
                            <extensions>
                                <oga:meta x="537" y="431"/>
                            </extensions>
                        </ogcn:macro>
                        <link dest="55c4f133f680431a" destField="results" source="2b7bfe59bce74be7" sourceField="results"/>
                        <link dest="6de2d6e7236a455b" destField="table" source="d5c28682dcba4e16" sourceField="table"/>
                        <link dest="d5c28682dcba4e16" destField="table" source="55c4f133f680431a" sourceField="table"/>
                        <link dest="807ff47842e4fc5" destField="table" source="c289bf765dfa4fb4" sourceField="trueTable"/>
                        <link dest="55c4f133f680431a" destField="project" source="2b7bfe59bce74be7" sourceField="project"/>
                        <link dest="c289bf765dfa4fb4" destField="table" source="6de2d6e7236a455b" sourceField="table"/>
                        <link dest="a80d96aa822a4c17" destField="table" source="c289bf765dfa4fb4" sourceField="falseTable"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="2b7bfe59bce74be7"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="2b7bfe59bce74be7"/>
                    <extensions>
                        <oga:meta x="349" y="33"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="43fa1bb7029645bd" name="Word Match (Stress Pattern)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="1fb841c1">
                        <opqry:queryNode id="48dd97a00f9a42eb" name="Query : Word List" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.380-02:30" name="Word List" uuid="dd0c438c-0d96-4606-bcb8-e3ab352cc30c">
                                <script>
                                    <source>/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2015, Gregory Hedlund &lt;ghedlund@mun.ca&gt; and Yvan Rose &lt;yrose@mun.ca&gt;
 * Dept of Linguistics, Memorial University &lt;https://phon.ca&gt;
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */
/**
 * Create a listing of aligned words from the Orthography/IPA Target/IPA Actual
 * tiers.
 */

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;

var filters = {
		"group": new GroupFilter("filters.group"),
		"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
		"word": new WordFilter("filters.word"),
		"alignedWord": new AlignedWordFilter("filters.alignedWord"),
		"speaker": new ParticipantFilter("filters.speaker")
};

var session;

function begin_search(s) {
	session = s;
}

function setup_params(params) {
	filters.group.param_setup(params);
	var sep = new LabelScriptParam("", "Aligned Group Filter");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.searchByWordEnabled = false;
	filters.word.param_setup(params);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);

	filters.speaker.param_setup(params);
}

function query_record(recordIndex, record) {
	if(!filters.speaker.check_speaker(record.speaker)) return;
    
	var searchObjects = filters.group.getRequestedGroups(record);
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    searchObjects = filters.alignedGroup.filter_groups(record, searchObjects);
	}
	
	for(var gIdx = 0; gIdx &lt; searchObjects.length; gIdx++) {
		var group = searchObjects[gIdx];
		
		// use 'IPA Target' as our source tier
		var words = filters.word.getRequestedWords(group, "IPA Target");
		
		for(var wIdx = 0; wIdx &lt; words.length; wIdx++) {
			var word = words[wIdx];
			var ortho = word.orthography || new Orthography();
			var ipaT = word.IPATarget || new IPATranscript();
			var ipaA = word.IPAActual || new IPATranscript();
			
			var result = factory.createResult();
			result.schema = "ALIGNED";
			result.recordIndex = recordIndex;
			
			var rv1 = factory.createResultValue();
			rv1.tierName = "Orthography";
	    	rv1.groupIndex = gIdx;
	    	var startIndex = (ortho.toString().length() &gt; 0 ? word.getOrthographyWordLocation() : 0);
	    	var endIndex = startIndex + ortho.toString().length();
	    	rv1.range = new Range(startIndex, endIndex, false);
	    	rv1.data = ortho;
	    	result.addResultValue(rv1);
	    	
	    	var rvt = factory.createResultValue();
		    rvt.tierName = "IPA Target";
	    	rvt.groupIndex = gIdx;
	    	var startIndex = (ipaT.length() &gt; 0 ? word.getIPATargetWordLocation() : 0);
	    	var endIndex = startIndex + ipaT.toString().length();
	    	rvt.range = new Range(startIndex, endIndex, false);
	    	rvt.data = ipaT;
	    	result.addResultValue(rvt);
	    	
	    	var rva = factory.createResultValue();
	    	rva.tierName = "IPA Actual";
	    	rva.groupIndex = gIdx;
	    	startIndex = (ipaA.length() &gt; 0 ? word.getIPAActualWordLocation() : 0);
	    	endIndex = startIndex + ipaA.toString().length();
	    	rva.range = new Range(startIndex, endIndex, false);
	    	rva.data = ipaA;
	        result.addResultValue(rva);
	        
	        results.addResult(result);
		}
	}
}
</source>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="feeaf45c6937421d" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="15"/>
                            </extensions>
                        </node>
                        <node id="9e3eb0b4c53942af" name="Add IPA Target Stress Pattern" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Target").stressPattern;
}
]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Target Stress Pattern]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="301" y="167"/>
                            </extensions>
                        </node>
                        <node id="d0e6151e28f64882" name="Add IPA Actual Stress Pattern" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Actual").stressPattern;
}
]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Actual Stress Pattern]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="544" y="167"/>
                            </extensions>
                        </node>
                        <node id="8141eddd2e6e4f09" type="class:ca.phon.app.opgraph.nodes.query.PartitionTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[function filterRow(table, row) {
	return table.getValueAt(row, "IPA Target Stress Pattern") == table.getValueAt(row, "IPA Actual Stress Pattern");
}
]]></oga:property>
                                </oga:settings>
                                <oga:meta x="329" y="290"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="ecc33211145f422b" name="Word Stress Pattern Matches" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="4ec59ab3">
                                <node id="9b7c8316529c4a04" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target Stress Pattern" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual Stress Pattern" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="511" y="380"/>
                                    </extensions>
                                </node>
                                <node id="3b9b33bf99164f6d" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="IPA Target Stress Pattern" order="ascending" type="plain"/>
                                            <opqry:sortBy column="IPA Actual Stress Pattern" order="ascending" type="plain"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="677" y="381"/>
                                    </extensions>
                                </node>
                                <node id="b8bbb0e1922f4716" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="702" y="477">
                                            <oga:default for="buffer" type="java.lang.String">Word Stress Pattern Matches</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="b8bbb0e1922f4716" destField="data" source="3b9b33bf99164f6d" sourceField="table"/>
                                <link dest="3b9b33bf99164f6d" destField="table" source="9b7c8316529c4a04" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="table" name="table" ref="9b7c8316529c4a04"/>
                            <extensions>
                                <oga:meta x="536" y="291"/>
                            </extensions>
                        </ogcn:macro>
                        <ogcn:macro id="777a530163a84b80" name="Word Stress Pattern Mis-matches" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="395f679d">
                                <node id="93713d07c6934ed0" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target Stress Pattern" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual Stress Pattern" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="511" y="380"/>
                                    </extensions>
                                </node>
                                <node id="afe5ed874892423a" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="IPA Target Stress Pattern" order="ascending" type="plain"/>
                                            <opqry:sortBy column="IPA Actual Stress Pattern" order="ascending" type="plain"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="677" y="381"/>
                                    </extensions>
                                </node>
                                <node id="e3f099e42fc45c7" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="702" y="483">
                                            <oga:default for="buffer" type="java.lang.String">Word Stress Pattern Mis-matches</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="e3f099e42fc45c7" destField="data" source="afe5ed874892423a" sourceField="table"/>
                                <link dest="afe5ed874892423a" destField="table" source="93713d07c6934ed0" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="table" name="table" ref="93713d07c6934ed0"/>
                            <extensions>
                                <oga:meta x="531" y="399"/>
                            </extensions>
                        </ogcn:macro>
                        <link dest="feeaf45c6937421d" destField="project" source="48dd97a00f9a42eb" sourceField="project"/>
                        <link dest="ecc33211145f422b" destField="table" source="8141eddd2e6e4f09" sourceField="trueTable"/>
                        <link dest="feeaf45c6937421d" destField="results" source="48dd97a00f9a42eb" sourceField="results"/>
                        <link dest="8141eddd2e6e4f09" destField="table" source="d0e6151e28f64882" sourceField="table"/>
                        <link dest="9e3eb0b4c53942af" destField="table" source="feeaf45c6937421d" sourceField="table"/>
                        <link dest="d0e6151e28f64882" destField="table" source="9e3eb0b4c53942af" sourceField="table"/>
                        <link dest="777a530163a84b80" destField="table" source="8141eddd2e6e4f09" sourceField="falseTable"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="48dd97a00f9a42eb"/>
                    <ogcn:published_input field="project" name="project" ref="48dd97a00f9a42eb"/>
                    <extensions>
                        <oga:meta x="352" y="153"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="352e52775a6343d7" name="Word Match (Syllables)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="60b1dd12">
                        <opqry:queryNode id="8d4b15e07fc146f6" name="Query : Word List" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.384-02:30" name="Word List" uuid="1a49457c-d48e-4e65-8e18-49ff39d01a87">
                                <script>
                                    <source>/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2015, Gregory Hedlund &lt;ghedlund@mun.ca&gt; and Yvan Rose &lt;yrose@mun.ca&gt;
 * Dept of Linguistics, Memorial University &lt;https://phon.ca&gt;
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */
/**
 * Create a listing of aligned words from the Orthography/IPA Target/IPA Actual
 * tiers.
 */

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;

var filters = {
		"group": new GroupFilter("filters.group"),
		"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
		"word": new WordFilter("filters.word"),
		"alignedWord": new AlignedWordFilter("filters.alignedWord"),
		"speaker": new ParticipantFilter("filters.speaker")
};

var session;

function begin_search(s) {
	session = s;
}

function setup_params(params) {
	filters.group.param_setup(params);
	var sep = new LabelScriptParam("", "Aligned Group Filter");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.searchByWordEnabled = false;
	filters.word.param_setup(params);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);

	filters.speaker.param_setup(params);
}

function query_record(recordIndex, record) {
	if(!filters.speaker.check_speaker(record.speaker)) return;
    
	var searchObjects = filters.group.getRequestedGroups(record);
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    searchObjects = filters.alignedGroup.filter_groups(record, searchObjects);
	}
	
	for(var gIdx = 0; gIdx &lt; searchObjects.length; gIdx++) {
		var group = searchObjects[gIdx];
		
		// use 'IPA Target' as our source tier
		var words = filters.word.getRequestedWords(group, "IPA Target");
		
		for(var wIdx = 0; wIdx &lt; words.length; wIdx++) {
			var word = words[wIdx];
			var ortho = word.orthography || new Orthography();
			var ipaT = word.IPATarget || new IPATranscript();
			var ipaA = word.IPAActual || new IPATranscript();
			
			var result = factory.createResult();
			result.schema = "ALIGNED";
			result.recordIndex = recordIndex;
			
			var rv1 = factory.createResultValue();
			rv1.tierName = "Orthography";
	    	rv1.groupIndex = gIdx;
	    	var startIndex = (ortho.toString().length() &gt; 0 ? word.getOrthographyWordLocation() : 0);
	    	var endIndex = startIndex + ortho.toString().length();
	    	rv1.range = new Range(startIndex, endIndex, false);
	    	rv1.data = ortho;
	    	result.addResultValue(rv1);
	    	
	    	var rvt = factory.createResultValue();
		    rvt.tierName = "IPA Target";
	    	rvt.groupIndex = gIdx;
	    	var startIndex = (ipaT.length() &gt; 0 ? word.getIPATargetWordLocation() : 0);
	    	var endIndex = startIndex + ipaT.toString().length();
	    	rvt.range = new Range(startIndex, endIndex, false);
	    	rvt.data = ipaT;
	    	result.addResultValue(rvt);
	    	
	    	var rva = factory.createResultValue();
	    	rva.tierName = "IPA Actual";
	    	rva.groupIndex = gIdx;
	    	startIndex = (ipaA.length() &gt; 0 ? word.getIPAActualWordLocation() : 0);
	    	endIndex = startIndex + ipaA.toString().length();
	    	rva.range = new Range(startIndex, endIndex, false);
	    	rva.data = ipaA;
	        result.addResultValue(rva);
	        
	        results.addResult(result);
		}
	}
}
</source>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="93fc4d2191d4570" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="15"/>
                            </extensions>
                        </node>
                        <node id="b750566402f34150" name="Add IPA Target Syllable Count" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/
function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Target").syllables().size();
}

]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Target Syllable Count]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="306" y="174"/>
                            </extensions>
                        </node>
                        <node id="84a9b81262b04392" name="Add IPA Actual Syllable Count" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/
function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Actual").syllables().size();
}

]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Actual Syllable Count]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="554" y="174"/>
                            </extensions>
                        </node>
                        <node id="8710ec3b7c494792" type="class:ca.phon.app.opgraph.nodes.query.PartitionTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[function filterRow(table, row) {
	return table.getValueAt(row, "IPA Target Syllable Count") == table.getValueAt(row, "IPA Actual Syllable Count");
}
]]></oga:property>
                                </oga:settings>
                                <oga:meta x="329" y="290"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="cd062e8499834fc3" name="Word Syllable Count Matches" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="6a9a0d6c">
                                <node id="20621ddaa619422e" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target Syllable Count" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual Syllable Count" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="511" y="380"/>
                                    </extensions>
                                </node>
                                <node id="58b9f81271ec46a9" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="IPA Target Syllable Count" order="ascending" type="plain"/>
                                            <opqry:sortBy column="IPA Actual Syllable Count" order="ascending" type="plain"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="677" y="381"/>
                                    </extensions>
                                </node>
                                <node id="d1d0bdad299a41a2" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="702" y="477">
                                            <oga:default for="buffer" type="java.lang.String">Word Syllable Count Matches</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="d1d0bdad299a41a2" destField="data" source="58b9f81271ec46a9" sourceField="table"/>
                                <link dest="58b9f81271ec46a9" destField="table" source="20621ddaa619422e" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="table" name="table" ref="20621ddaa619422e"/>
                            <extensions>
                                <oga:meta x="536" y="291"/>
                            </extensions>
                        </ogcn:macro>
                        <ogcn:macro id="3fe57a2f6225403e" name="Word Syllable Count Mis-matches" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="5d00a936">
                                <node id="a1825d1a9657412d" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target Syllable Count" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual Syllable Count" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="511" y="380"/>
                                    </extensions>
                                </node>
                                <node id="98ff87d020954633" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="IPA Target Syllable Count" order="ascending" type="plain"/>
                                            <opqry:sortBy column="IPA Actual Syllable Count" order="ascending" type="plain"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="677" y="381"/>
                                    </extensions>
                                </node>
                                <node id="a15d23a7e29a4bfc" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="702" y="483">
                                            <oga:default for="buffer" type="java.lang.String">Word Syllable Count Mis-matches</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="a15d23a7e29a4bfc" destField="data" source="98ff87d020954633" sourceField="table"/>
                                <link dest="98ff87d020954633" destField="table" source="a1825d1a9657412d" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="table" name="table" ref="a1825d1a9657412d"/>
                            <extensions>
                                <oga:meta x="537" y="415"/>
                            </extensions>
                        </ogcn:macro>
                        <link dest="cd062e8499834fc3" destField="table" source="8710ec3b7c494792" sourceField="trueTable"/>
                        <link dest="3fe57a2f6225403e" destField="table" source="8710ec3b7c494792" sourceField="falseTable"/>
                        <link dest="93fc4d2191d4570" destField="project" source="8d4b15e07fc146f6" sourceField="project"/>
                        <link dest="84a9b81262b04392" destField="table" source="b750566402f34150" sourceField="table"/>
                        <link dest="93fc4d2191d4570" destField="results" source="8d4b15e07fc146f6" sourceField="results"/>
                        <link dest="b750566402f34150" destField="table" source="93fc4d2191d4570" sourceField="table"/>
                        <link dest="8710ec3b7c494792" destField="table" source="84a9b81262b04392" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="8d4b15e07fc146f6"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="8d4b15e07fc146f6"/>
                    <extensions>
                        <oga:meta x="357" y="269"/>
                    </extensions>
                </ogcn:macro>
                <link dest="dfcddbc6284e4e5b" destField="project" source="883bf8c4a0d04976" sourceField="obj"/>
                <link dest="dfcddbc6284e4e5b" destField="sessions" source="2c656564e5e5421a" sourceField="obj"/>
                <link dest="43fa1bb7029645bd" destField="project" source="883bf8c4a0d04976" sourceField="obj"/>
                <link dest="352e52775a6343d7" destField="project" source="883bf8c4a0d04976" sourceField="obj"/>
                <link dest="43fa1bb7029645bd" destField="sessions" source="2c656564e5e5421a" sourceField="obj"/>
                <link dest="352e52775a6343d7" destField="sessions" source="2c656564e5e5421a" sourceField="obj"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="883bf8c4a0d04976"/>
            <ogcn:published_input field="obj" name="obj1" ref="2c656564e5e5421a"/>
            <extensions>
                <oga:meta x="278" y="21"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="955a114" name="Target Consonants" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="3819b50e">
                <node id="61d704794e654dad" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <node id="83023c74550a4036" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="91" y="252"/>
                    </extensions>
                </node>
                <ogcn:macro id="7a1473143fe44086" name="Target Consonants" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="419c37fb">
                        <opqry:queryNode id="685805f318804f7b" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.388-02:30" name="Phones" uuid="04b5b33b-1c4d-4e16-b3fb-8e36afd31026">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\c</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="3cde775a88254f71" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="15"/>
                            </extensions>
                        </node>
                        <node id="813ee02725a7458c" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="629" y="15"/>
                            </extensions>
                        </node>
                        <node id="220d11af" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="338" y="158"/>
                            </extensions>
                        </node>
                        <node id="2c4606ed" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="541" y="159">
                                    <oga:default for="buffer" type="java.lang.String">Target Consonants</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="3cde775a88254f71" destField="project" source="685805f318804f7b" sourceField="project"/>
                        <link dest="813ee02725a7458c" destField="table" source="3cde775a88254f71" sourceField="table"/>
                        <link dest="3cde775a88254f71" destField="results" source="685805f318804f7b" sourceField="results"/>
                        <link dest="220d11af" destField="table" source="813ee02725a7458c" sourceField="table"/>
                        <link dest="2c4606ed" destField="data" source="220d11af" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="685805f318804f7b"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="685805f318804f7b"/>
                    <extensions>
                        <oga:meta x="324" y="42"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="778801049f5940a9" name="Target Consonants (word-initial)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="50a9818d">
                        <opqry:queryNode id="5c7c141a391f40cd" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.393-02:30" name="Phones" uuid="eff761f9-4848-4d04-a02c-c77440173f06">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">^(\s?)(X=\c)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="d5d15c3afabd4df2" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="15"/>
                            </extensions>
                        </node>
                        <node id="6aff80ea7c6f4cf3" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="629" y="15"/>
                            </extensions>
                        </node>
                        <node id="9d05efdf5a834280" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="338" y="158"/>
                            </extensions>
                        </node>
                        <node id="305a9665b0ad4dab" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="541" y="159">
                                    <oga:default for="buffer" type="java.lang.String">Target Consonants (word-initial)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="d5d15c3afabd4df2" destField="project" source="5c7c141a391f40cd" sourceField="project"/>
                        <link dest="6aff80ea7c6f4cf3" destField="table" source="d5d15c3afabd4df2" sourceField="table"/>
                        <link dest="d5d15c3afabd4df2" destField="results" source="5c7c141a391f40cd" sourceField="results"/>
                        <link dest="9d05efdf5a834280" destField="table" source="6aff80ea7c6f4cf3" sourceField="table"/>
                        <link dest="305a9665b0ad4dab" destField="data" source="9d05efdf5a834280" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="5c7c141a391f40cd"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="5c7c141a391f40cd"/>
                    <extensions>
                        <oga:meta x="324" y="163"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="3f9a4c82c2ce4f01" name="Target Consonants (word-medial)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="4fcfafe2">
                        <opqry:queryNode id="bd2193b702284136" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.398-02:30" name="Phones" uuid="53cbdd6b-0eee-4fca-8de0-b3bc75c5506a">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">(?&lt;\w[\s\.]?)\c(?&gt;[\s\.]?\w)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="79ce965a27674b71" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="15"/>
                            </extensions>
                        </node>
                        <node id="4e2ecce5552d46e4" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="629" y="15"/>
                            </extensions>
                        </node>
                        <node id="5e4fed8a820a4d02" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="338" y="158"/>
                            </extensions>
                        </node>
                        <node id="69f768140253471c" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="541" y="159">
                                    <oga:default for="buffer" type="java.lang.String">Target Consonants (word-medial)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="79ce965a27674b71" destField="project" source="bd2193b702284136" sourceField="project"/>
                        <link dest="4e2ecce5552d46e4" destField="table" source="79ce965a27674b71" sourceField="table"/>
                        <link dest="79ce965a27674b71" destField="results" source="bd2193b702284136" sourceField="results"/>
                        <link dest="5e4fed8a820a4d02" destField="table" source="4e2ecce5552d46e4" sourceField="table"/>
                        <link dest="69f768140253471c" destField="data" source="5e4fed8a820a4d02" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="bd2193b702284136"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="bd2193b702284136"/>
                    <extensions>
                        <oga:meta x="324" y="284"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="b38d2d93e71f4cd4" name="Target Consonants (word-final)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="3000b574">
                        <opqry:queryNode id="754f638f2115492e" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.402-02:30" name="Phones" uuid="7dce9de2-e153-4bb7-a4f0-49bad7d0debe">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\c$</param>
                                    <param id="filters.word.searchByWord">true</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="5825b9af0e074859" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="15"/>
                            </extensions>
                        </node>
                        <node id="d762421ca0a8448a" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="629" y="15"/>
                            </extensions>
                        </node>
                        <node id="96085d9c966f4184" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="338" y="158"/>
                            </extensions>
                        </node>
                        <node id="e015f6fa7ede4403" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="541" y="159">
                                    <oga:default for="buffer" type="java.lang.String">Target Consonants (word-final)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="5825b9af0e074859" destField="project" source="754f638f2115492e" sourceField="project"/>
                        <link dest="d762421ca0a8448a" destField="table" source="5825b9af0e074859" sourceField="table"/>
                        <link dest="5825b9af0e074859" destField="results" source="754f638f2115492e" sourceField="results"/>
                        <link dest="96085d9c966f4184" destField="table" source="d762421ca0a8448a" sourceField="table"/>
                        <link dest="e015f6fa7ede4403" destField="data" source="96085d9c966f4184" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="754f638f2115492e"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="754f638f2115492e"/>
                    <extensions>
                        <oga:meta x="324" y="405"/>
                    </extensions>
                </ogcn:macro>
                <link dest="7a1473143fe44086" destField="project" source="61d704794e654dad" sourceField="obj"/>
                <link dest="7a1473143fe44086" destField="sessions" source="83023c74550a4036" sourceField="obj"/>
                <link dest="778801049f5940a9" destField="project" source="61d704794e654dad" sourceField="obj"/>
                <link dest="778801049f5940a9" destField="sessions" source="83023c74550a4036" sourceField="obj"/>
                <link dest="b38d2d93e71f4cd4" destField="project" source="61d704794e654dad" sourceField="obj"/>
                <link dest="b38d2d93e71f4cd4" destField="sessions" source="83023c74550a4036" sourceField="obj"/>
                <link dest="3f9a4c82c2ce4f01" destField="project" source="61d704794e654dad" sourceField="obj"/>
                <link dest="3f9a4c82c2ce4f01" destField="sessions" source="83023c74550a4036" sourceField="obj"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="61d704794e654dad"/>
            <ogcn:published_input field="obj" name="obj1" ref="83023c74550a4036"/>
            <extensions>
                <oga:meta x="278" y="150"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="c8f18f80486f4a91" name="Target Vowels" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="7f4a80d6">
                <node id="f8259f1b749b44d9" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <node id="1197d225220b4e85" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="91" y="252"/>
                    </extensions>
                </node>
                <ogcn:macro id="e0b1058b9c0141a2" name="Target Vowels" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="374cc130">
                        <opqry:queryNode id="1aa97e98a2fe47dc" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.406-02:30" name="Phones" uuid="81dabe0a-5672-48cd-8fb4-cf8c087cc64b">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\v</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="80f2f0031bff4bfd" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="15"/>
                            </extensions>
                        </node>
                        <node id="28f5edfc39284c6a" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="629" y="15"/>
                            </extensions>
                        </node>
                        <node id="b09194e338e841fe" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="338" y="158"/>
                            </extensions>
                        </node>
                        <node id="e454c447f2f14833" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="541" y="159">
                                    <oga:default for="buffer" type="java.lang.String">Target Vowels</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="80f2f0031bff4bfd" destField="project" source="1aa97e98a2fe47dc" sourceField="project"/>
                        <link dest="28f5edfc39284c6a" destField="table" source="80f2f0031bff4bfd" sourceField="table"/>
                        <link dest="80f2f0031bff4bfd" destField="results" source="1aa97e98a2fe47dc" sourceField="results"/>
                        <link dest="b09194e338e841fe" destField="table" source="28f5edfc39284c6a" sourceField="table"/>
                        <link dest="e454c447f2f14833" destField="data" source="b09194e338e841fe" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="1aa97e98a2fe47dc"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="1aa97e98a2fe47dc"/>
                    <extensions>
                        <oga:meta x="324" y="42"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="b4509700928748a2" name="Target Vowels (word-initial)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="5bbdfbad">
                        <opqry:queryNode id="a5b37000ead34dce" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.410-02:30" name="Phones" uuid="ef691fb2-1c6a-4948-896e-e078db1d8544">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">^(\s?)(X=\v)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="65fb9ff24a9b45d3" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="15"/>
                            </extensions>
                        </node>
                        <node id="b84042b7d8394c0e" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="629" y="15"/>
                            </extensions>
                        </node>
                        <node id="df09bc4581e5415c" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="338" y="158"/>
                            </extensions>
                        </node>
                        <node id="1102e094f9a64eda" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="541" y="159">
                                    <oga:default for="buffer" type="java.lang.String">Target Vowels (word-initial)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="65fb9ff24a9b45d3" destField="project" source="a5b37000ead34dce" sourceField="project"/>
                        <link dest="b84042b7d8394c0e" destField="table" source="65fb9ff24a9b45d3" sourceField="table"/>
                        <link dest="65fb9ff24a9b45d3" destField="results" source="a5b37000ead34dce" sourceField="results"/>
                        <link dest="df09bc4581e5415c" destField="table" source="b84042b7d8394c0e" sourceField="table"/>
                        <link dest="1102e094f9a64eda" destField="data" source="df09bc4581e5415c" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="a5b37000ead34dce"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="a5b37000ead34dce"/>
                    <extensions>
                        <oga:meta x="324" y="163"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="a4f19cab59594a20" name="Target Vowels (word-medial)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="69a648a4">
                        <opqry:queryNode id="d43626f0c10f49cf" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.415-02:30" name="Phones" uuid="b9576c62-c360-4a22-a12b-5ce63c74d6c5">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">(?&lt;\w[\s\.]?)\v(?&gt;[\s\.]?\w)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="6ad1d97b9e844bca" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="15"/>
                            </extensions>
                        </node>
                        <node id="4cbe77475f014a3f" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="629" y="15"/>
                            </extensions>
                        </node>
                        <node id="d118eb2185c44acb" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="338" y="158"/>
                            </extensions>
                        </node>
                        <node id="b2a59c729f92434f" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="541" y="159">
                                    <oga:default for="buffer" type="java.lang.String">Target Vowels (word-medial)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="6ad1d97b9e844bca" destField="project" source="d43626f0c10f49cf" sourceField="project"/>
                        <link dest="4cbe77475f014a3f" destField="table" source="6ad1d97b9e844bca" sourceField="table"/>
                        <link dest="6ad1d97b9e844bca" destField="results" source="d43626f0c10f49cf" sourceField="results"/>
                        <link dest="d118eb2185c44acb" destField="table" source="4cbe77475f014a3f" sourceField="table"/>
                        <link dest="b2a59c729f92434f" destField="data" source="d118eb2185c44acb" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="d43626f0c10f49cf"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="d43626f0c10f49cf"/>
                    <extensions>
                        <oga:meta x="324" y="284"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="a186081d79ba447a" name="Target Vowels (word-final)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="6586cf10">
                        <opqry:queryNode id="a96e997ea6bb4885" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.419-02:30" name="Phones" uuid="1fe05380-ff71-427d-a3ee-2509779a6f13">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\v$</param>
                                    <param id="filters.word.searchByWord">true</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="b4bea2009f64d17" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="454" y="15"/>
                            </extensions>
                        </node>
                        <node id="805722b7fbbf4acc" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="Result" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="629" y="15"/>
                            </extensions>
                        </node>
                        <node id="766c227f699c4d7c" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Result" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="338" y="158"/>
                            </extensions>
                        </node>
                        <node id="6e8946a2b75446e" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="541" y="159">
                                    <oga:default for="buffer" type="java.lang.String">Target Vowels (word-final)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="b4bea2009f64d17" destField="project" source="a96e997ea6bb4885" sourceField="project"/>
                        <link dest="805722b7fbbf4acc" destField="table" source="b4bea2009f64d17" sourceField="table"/>
                        <link dest="b4bea2009f64d17" destField="results" source="a96e997ea6bb4885" sourceField="results"/>
                        <link dest="766c227f699c4d7c" destField="table" source="805722b7fbbf4acc" sourceField="table"/>
                        <link dest="6e8946a2b75446e" destField="data" source="766c227f699c4d7c" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="a96e997ea6bb4885"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="a96e997ea6bb4885"/>
                    <extensions>
                        <oga:meta x="324" y="405"/>
                    </extensions>
                </ogcn:macro>
                <link dest="e0b1058b9c0141a2" destField="project" source="f8259f1b749b44d9" sourceField="obj"/>
                <link dest="e0b1058b9c0141a2" destField="sessions" source="1197d225220b4e85" sourceField="obj"/>
                <link dest="b4509700928748a2" destField="project" source="f8259f1b749b44d9" sourceField="obj"/>
                <link dest="b4509700928748a2" destField="sessions" source="1197d225220b4e85" sourceField="obj"/>
                <link dest="a186081d79ba447a" destField="project" source="f8259f1b749b44d9" sourceField="obj"/>
                <link dest="a186081d79ba447a" destField="sessions" source="1197d225220b4e85" sourceField="obj"/>
                <link dest="a4f19cab59594a20" destField="project" source="f8259f1b749b44d9" sourceField="obj"/>
                <link dest="a4f19cab59594a20" destField="sessions" source="1197d225220b4e85" sourceField="obj"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="f8259f1b749b44d9"/>
            <ogcn:published_input field="obj" name="obj1" ref="1197d225220b4e85"/>
            <extensions>
                <oga:meta x="440" y="150"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="4e79bfff" name="PCC+PVC" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="6c603652">
                <node id="cd396e1117244899" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <node id="8c1d06519e754f16" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="91" y="252"/>
                    </extensions>
                </node>
                <ogcn:macro id="50e315edb9184352" name="PCC" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="750ff1b8">
                        <opqry:queryNode id="a63155a40ab24560" name="Query : PCC-PVC" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.423-02:30" name="PCC-PVC" uuid="6c367e81-deb0-4544-8ef3-bed3041ef735">
                                <script>
                                    <source>/*
params = {separator, "Information", false},
			{label, "&lt;html&gt;&lt;p&gt;This script calculates PCC/PVC (percent consonants/vowels correct)&lt;br/&gt; for each group in the selected sessions.&lt;/p&gt;&lt;/html&gt;", ""},
			{label, "&lt;html&gt;&lt;br/&gt;&lt;p&gt;Results are reported as:&lt;br/&gt;&amp;lt;# correct&amp;gt;/&amp;lt;# attempted&amp;gt;;&amp;lt;# deleted&amp;gt;;&amp;lt;# epenthesized&amp;gt;&lt;/p&gt;&lt;/html&gt;", ""}
        ;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var PccOptions = require("lib/Pcc").PccOptions;
var Pcc = require("lib/Pcc").Pcc;

var ignoreTruncatedParamInfo = {
	"id": "ignoreTruncated",
	"desc": "Ignore truncated words",
	"title": "",
	"def": true
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

var pccOptions = {
    "standard": new PccOptions("pccOptions.standard"),
    "aligned": new PccOptions("pccOptions.aligned")
};

var filters = {
	"group": new GroupFilter("filters.group"),
	"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
	"word": new WordFilter("filters.word"),
	"alignedWord": new AlignedWordFilter("filters.alignedWord"),
	"speaker": new ParticipantFilter("filters.speaker")
};

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}

function setup_params(params) {
    var sep = new SeparatorScriptParam("PCC/PVC Options", false);
    params.add(sep);
    
    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    pccOptions.standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	pccOptions.aligned.param_setup(params);
	
	filters.group.param_setup(params);
	var sep = new LabelScriptParam("", "Aligned Group Filter");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.searchByWordEnabled = false;
	filters.word.param_setup(params);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);

	filters.speaker.param_setup(params);
}

/********************************
 * query_record (required)
 *
 * Called for each record in a session.
 * Perform search operations here.
 *
 * params:
 *	record - current record
 * returns:
 *	void
 *******************************/
function query_record(recordIndex, record)
{
	if(!filters.speaker.check_speaker(record.speaker)) return;
    
	var searchObjects = filters.group.getRequestedGroups(record);
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    searchObjects = filters.alignedGroup.filter_groups(record, searchObjects);
	}
	
	for(var gIdx = 0; gIdx &lt; searchObjects.length; gIdx++) {
		var group = searchObjects[gIdx];
		var words = filters.word.getRequestedWords(group, "IPA Target");
		
		for(var wIdx = 0; wIdx &lt; words.length; wIdx++) {
			var word = words[wIdx];
			if(filters.alignedWord.isUseFilter()) {
				var alignedWord = word.getTier(filters.alignedWord.tierName);
				if(!filters.alignedWord.patternFilter.check_filter(alignedWord)) continue;
			}
			
			if(ignoreTruncated &amp;&amp; word.getIPAActual() == null || word.getIPAActual().length() == 0) {
				continue;
			}
			
		    var ipaT = (word.getIPATarget() != null ? word.getIPATarget() : new IPATranscript());
		    var ipaA = (word.getIPAActual() != null ? word.getIPAActual() : new IPATranscript());
		    
		    var result = factory.createResult();
		    result.schema = "ALIGNED";
		    result.recordIndex = recordIndex;
		    
		    var rvt = factory.createResultValue();
		    rvt.tierName = "IPA Target";
	    	rvt.groupIndex = gIdx;
	    	var startIndex = word.getIPATargetWordLocation();
	    	var endIndex = startIndex + ipaT.toString().length();
	    	rvt.range = new Range(startIndex, endIndex, false);
	    	rvt.data = ipaT;
	    	result.addResultValue(rvt);
	    	
	    	var rva = factory.createResultValue();
	    	rva.tierName = "IPA Actual";
	    	rva.groupIndex = gIdx;
	    	startIndex = word.getIPAActualWordLocation();
	    	endIndex = startIndex + ipaA.toString().length();
	    	rva.range = new Range(startIndex, endIndex, false);
	    	rva.data = ipaA;
	        result.addResultValue(rva);
		    
		    var metadata = result.metadata;
		    
		    // exclude values which bias results. 
		    // (e.g., all-vowel words such as 'eau' in French when looking only at PCC)
		    if( (pccOptions.standard.includePcc == true || pccOptions.aligned.includePcc == true)
		    		&amp;&amp; (pccOptions.standard.includePvc == false &amp;&amp; pccOptions.aligned.includePvc == false)
		    		&amp;&amp; ipaT.indexOf("\\c") &lt; 0) {
		    	continue;
		    }
		    if( (pccOptions.standard.includePcc == false &amp;&amp; pccOptions.aligned.includePcc == false)
		    		&amp;&amp; (pccOptions.standard.includePvc == true || pccOptions.aligned.includePvc == true)
		    		&amp;&amp; ipaT.indexOf("\\v") &lt; 0) {
		    	continue;
		    }
		    
		    pccOptions.standard.setup_pcc_standard_metadata(word, metadata);
		    pccOptions.aligned.setup_pcc_aligned_metadata(word, metadata);
		    
		    results.addResult(result);
		}
	}
}
</source>
                                    <param id="pccOptions.aligned.ignoreDiacritics">false</param>
                                    <param id="pccOptions.standard.ignoreDiacritics">false</param>
                                    <param id="pccOptions.standard.includePcc">true</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="292" y="109"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="7fd674a283fe4c09" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="375" y="323"/>
                            </extensions>
                        </node>
                        <node id="1e2ecf0243464911" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="590" y="322">
                                    <oga:default for="buffer" type="java.lang.String">PCC</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="7fd674a283fe4c09" destField="project" source="a63155a40ab24560" sourceField="project"/>
                        <link dest="7fd674a283fe4c09" destField="results" source="a63155a40ab24560" sourceField="results"/>
                        <link dest="1e2ecf0243464911" destField="data" source="7fd674a283fe4c09" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="a63155a40ab24560"/>
                    <ogcn:published_input field="project" name="project" ref="a63155a40ab24560"/>
                    <extensions>
                        <oga:meta x="302" y="49"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="58a7a0ffb19048c2" name="PCC (aligned)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="6fc96c6">
                        <opqry:queryNode id="eb388c03bf854d94" name="Query : PCC-PVC" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.427-02:30" name="PCC-PVC" uuid="e9931d8f-5c80-4454-9023-a838546786e4">
                                <script>
                                    <source>/*
params = {separator, "Information", false},
			{label, "&lt;html&gt;&lt;p&gt;This script calculates PCC/PVC (percent consonants/vowels correct)&lt;br/&gt; for each group in the selected sessions.&lt;/p&gt;&lt;/html&gt;", ""},
			{label, "&lt;html&gt;&lt;br/&gt;&lt;p&gt;Results are reported as:&lt;br/&gt;&amp;lt;# correct&amp;gt;/&amp;lt;# attempted&amp;gt;;&amp;lt;# deleted&amp;gt;;&amp;lt;# epenthesized&amp;gt;&lt;/p&gt;&lt;/html&gt;", ""}
        ;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var PccOptions = require("lib/Pcc").PccOptions;
var Pcc = require("lib/Pcc").Pcc;

var ignoreTruncatedParamInfo = {
	"id": "ignoreTruncated",
	"desc": "Ignore truncated words",
	"title": "",
	"def": true
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

var pccOptions = {
    "standard": new PccOptions("pccOptions.standard"),
    "aligned": new PccOptions("pccOptions.aligned")
};

var filters = {
	"group": new GroupFilter("filters.group"),
	"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
	"word": new WordFilter("filters.word"),
	"alignedWord": new AlignedWordFilter("filters.alignedWord"),
	"speaker": new ParticipantFilter("filters.speaker")
};

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}

function setup_params(params) {
    var sep = new SeparatorScriptParam("PCC/PVC Options", false);
    params.add(sep);
    
    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    pccOptions.standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	pccOptions.aligned.param_setup(params);
	
	filters.group.param_setup(params);
	var sep = new LabelScriptParam("", "Aligned Group Filter");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.searchByWordEnabled = false;
	filters.word.param_setup(params);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);

	filters.speaker.param_setup(params);
}

/********************************
 * query_record (required)
 *
 * Called for each record in a session.
 * Perform search operations here.
 *
 * params:
 *	record - current record
 * returns:
 *	void
 *******************************/
function query_record(recordIndex, record)
{
	if(!filters.speaker.check_speaker(record.speaker)) return;
    
	var searchObjects = filters.group.getRequestedGroups(record);
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    searchObjects = filters.alignedGroup.filter_groups(record, searchObjects);
	}
	
	for(var gIdx = 0; gIdx &lt; searchObjects.length; gIdx++) {
		var group = searchObjects[gIdx];
		var words = filters.word.getRequestedWords(group, "IPA Target");
		
		for(var wIdx = 0; wIdx &lt; words.length; wIdx++) {
			var word = words[wIdx];
			if(filters.alignedWord.isUseFilter()) {
				var alignedWord = word.getTier(filters.alignedWord.tierName);
				if(!filters.alignedWord.patternFilter.check_filter(alignedWord)) continue;
			}
			
			if(ignoreTruncated &amp;&amp; word.getIPAActual() == null || word.getIPAActual().length() == 0) {
				continue;
			}
			
		    var ipaT = (word.getIPATarget() != null ? word.getIPATarget() : new IPATranscript());
		    var ipaA = (word.getIPAActual() != null ? word.getIPAActual() : new IPATranscript());
		    
		    var result = factory.createResult();
		    result.schema = "ALIGNED";
		    result.recordIndex = recordIndex;
		    
		    var rvt = factory.createResultValue();
		    rvt.tierName = "IPA Target";
	    	rvt.groupIndex = gIdx;
	    	var startIndex = word.getIPATargetWordLocation();
	    	var endIndex = startIndex + ipaT.toString().length();
	    	rvt.range = new Range(startIndex, endIndex, false);
	    	rvt.data = ipaT;
	    	result.addResultValue(rvt);
	    	
	    	var rva = factory.createResultValue();
	    	rva.tierName = "IPA Actual";
	    	rva.groupIndex = gIdx;
	    	startIndex = word.getIPAActualWordLocation();
	    	endIndex = startIndex + ipaA.toString().length();
	    	rva.range = new Range(startIndex, endIndex, false);
	    	rva.data = ipaA;
	        result.addResultValue(rva);
		    
		    var metadata = result.metadata;
		    
		    // exclude values which bias results. 
		    // (e.g., all-vowel words such as 'eau' in French when looking only at PCC)
		    if( (pccOptions.standard.includePcc == true || pccOptions.aligned.includePcc == true)
		    		&amp;&amp; (pccOptions.standard.includePvc == false &amp;&amp; pccOptions.aligned.includePvc == false)
		    		&amp;&amp; ipaT.indexOf("\\c") &lt; 0) {
		    	continue;
		    }
		    if( (pccOptions.standard.includePcc == false &amp;&amp; pccOptions.aligned.includePcc == false)
		    		&amp;&amp; (pccOptions.standard.includePvc == true || pccOptions.aligned.includePvc == true)
		    		&amp;&amp; ipaT.indexOf("\\v") &lt; 0) {
		    	continue;
		    }
		    
		    pccOptions.standard.setup_pcc_standard_metadata(word, metadata);
		    pccOptions.aligned.setup_pcc_aligned_metadata(word, metadata);
		    
		    results.addResult(result);
		}
	}
}
</source>
                                    <param id="pccOptions.aligned.ignoreDiacritics">false</param>
                                    <param id="pccOptions.aligned.includePcc">true</param>
                                    <param id="pccOptions.standard.ignoreDiacritics">false</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="292" y="109"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="17c1867cb0024c1b" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="375" y="323"/>
                            </extensions>
                        </node>
                        <node id="320fe468e6844d76" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="590" y="322">
                                    <oga:default for="buffer" type="java.lang.String">PCC (aligned)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="17c1867cb0024c1b" destField="project" source="eb388c03bf854d94" sourceField="project"/>
                        <link dest="17c1867cb0024c1b" destField="results" source="eb388c03bf854d94" sourceField="results"/>
                        <link dest="320fe468e6844d76" destField="data" source="17c1867cb0024c1b" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="eb388c03bf854d94"/>
                    <ogcn:published_input field="project" name="project" ref="eb388c03bf854d94"/>
                    <extensions>
                        <oga:meta x="437" y="49"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="ac657982633e4fb2" name="PVC" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="4466c5e0">
                        <opqry:queryNode id="ee43c3504c904196" name="Query : PCC-PVC" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.432-02:30" name="PCC-PVC" uuid="ef6d2280-d037-403b-b7c6-fed7dd2bfd28">
                                <script>
                                    <source>/*
params = {separator, "Information", false},
			{label, "&lt;html&gt;&lt;p&gt;This script calculates PCC/PVC (percent consonants/vowels correct)&lt;br/&gt; for each group in the selected sessions.&lt;/p&gt;&lt;/html&gt;", ""},
			{label, "&lt;html&gt;&lt;br/&gt;&lt;p&gt;Results are reported as:&lt;br/&gt;&amp;lt;# correct&amp;gt;/&amp;lt;# attempted&amp;gt;;&amp;lt;# deleted&amp;gt;;&amp;lt;# epenthesized&amp;gt;&lt;/p&gt;&lt;/html&gt;", ""}
        ;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var PccOptions = require("lib/Pcc").PccOptions;
var Pcc = require("lib/Pcc").Pcc;

var ignoreTruncatedParamInfo = {
	"id": "ignoreTruncated",
	"desc": "Ignore truncated words",
	"title": "",
	"def": true
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

var pccOptions = {
    "standard": new PccOptions("pccOptions.standard"),
    "aligned": new PccOptions("pccOptions.aligned")
};

var filters = {
	"group": new GroupFilter("filters.group"),
	"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
	"word": new WordFilter("filters.word"),
	"alignedWord": new AlignedWordFilter("filters.alignedWord"),
	"speaker": new ParticipantFilter("filters.speaker")
};

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}

function setup_params(params) {
    var sep = new SeparatorScriptParam("PCC/PVC Options", false);
    params.add(sep);
    
    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    pccOptions.standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	pccOptions.aligned.param_setup(params);
	
	filters.group.param_setup(params);
	var sep = new LabelScriptParam("", "Aligned Group Filter");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.searchByWordEnabled = false;
	filters.word.param_setup(params);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);

	filters.speaker.param_setup(params);
}

/********************************
 * query_record (required)
 *
 * Called for each record in a session.
 * Perform search operations here.
 *
 * params:
 *	record - current record
 * returns:
 *	void
 *******************************/
function query_record(recordIndex, record)
{
	if(!filters.speaker.check_speaker(record.speaker)) return;
    
	var searchObjects = filters.group.getRequestedGroups(record);
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    searchObjects = filters.alignedGroup.filter_groups(record, searchObjects);
	}
	
	for(var gIdx = 0; gIdx &lt; searchObjects.length; gIdx++) {
		var group = searchObjects[gIdx];
		var words = filters.word.getRequestedWords(group, "IPA Target");
		
		for(var wIdx = 0; wIdx &lt; words.length; wIdx++) {
			var word = words[wIdx];
			if(filters.alignedWord.isUseFilter()) {
				var alignedWord = word.getTier(filters.alignedWord.tierName);
				if(!filters.alignedWord.patternFilter.check_filter(alignedWord)) continue;
			}
			
			if(ignoreTruncated &amp;&amp; word.getIPAActual() == null || word.getIPAActual().length() == 0) {
				continue;
			}
			
		    var ipaT = (word.getIPATarget() != null ? word.getIPATarget() : new IPATranscript());
		    var ipaA = (word.getIPAActual() != null ? word.getIPAActual() : new IPATranscript());
		    
		    var result = factory.createResult();
		    result.schema = "ALIGNED";
		    result.recordIndex = recordIndex;
		    
		    var rvt = factory.createResultValue();
		    rvt.tierName = "IPA Target";
	    	rvt.groupIndex = gIdx;
	    	var startIndex = word.getIPATargetWordLocation();
	    	var endIndex = startIndex + ipaT.toString().length();
	    	rvt.range = new Range(startIndex, endIndex, false);
	    	rvt.data = ipaT;
	    	result.addResultValue(rvt);
	    	
	    	var rva = factory.createResultValue();
	    	rva.tierName = "IPA Actual";
	    	rva.groupIndex = gIdx;
	    	startIndex = word.getIPAActualWordLocation();
	    	endIndex = startIndex + ipaA.toString().length();
	    	rva.range = new Range(startIndex, endIndex, false);
	    	rva.data = ipaA;
	        result.addResultValue(rva);
		    
		    var metadata = result.metadata;
		    
		    // exclude values which bias results. 
		    // (e.g., all-vowel words such as 'eau' in French when looking only at PCC)
		    if( (pccOptions.standard.includePcc == true || pccOptions.aligned.includePcc == true)
		    		&amp;&amp; (pccOptions.standard.includePvc == false &amp;&amp; pccOptions.aligned.includePvc == false)
		    		&amp;&amp; ipaT.indexOf("\\c") &lt; 0) {
		    	continue;
		    }
		    if( (pccOptions.standard.includePcc == false &amp;&amp; pccOptions.aligned.includePcc == false)
		    		&amp;&amp; (pccOptions.standard.includePvc == true || pccOptions.aligned.includePvc == true)
		    		&amp;&amp; ipaT.indexOf("\\v") &lt; 0) {
		    	continue;
		    }
		    
		    pccOptions.standard.setup_pcc_standard_metadata(word, metadata);
		    pccOptions.aligned.setup_pcc_aligned_metadata(word, metadata);
		    
		    results.addResult(result);
		}
	}
}
</source>
                                    <param id="pccOptions.aligned.ignoreDiacritics">false</param>
                                    <param id="pccOptions.standard.ignoreDiacritics">false</param>
                                    <param id="pccOptions.standard.includePvc">true</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="292" y="109"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="8ea5f28f7c164ed3" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="375" y="323"/>
                            </extensions>
                        </node>
                        <node id="2a397aedcbfc4419" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="590" y="322">
                                    <oga:default for="buffer" type="java.lang.String">PVC</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="8ea5f28f7c164ed3" destField="project" source="ee43c3504c904196" sourceField="project"/>
                        <link dest="2a397aedcbfc4419" destField="data" source="8ea5f28f7c164ed3" sourceField="table"/>
                        <link dest="8ea5f28f7c164ed3" destField="results" source="ee43c3504c904196" sourceField="results"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="ee43c3504c904196"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="ee43c3504c904196"/>
                    <extensions>
                        <oga:meta x="302" y="170"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="8e6cc14a1c054893" name="PVC (aligned)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="1b38df40">
                        <opqry:queryNode id="31c07e3435194fff" name="Query : PCC-PVC" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.436-02:30" name="PCC-PVC" uuid="87dbc890-0a60-4535-85a6-6b5f37d3d89e">
                                <script>
                                    <source>/*
params = {separator, "Information", false},
			{label, "&lt;html&gt;&lt;p&gt;This script calculates PCC/PVC (percent consonants/vowels correct)&lt;br/&gt; for each group in the selected sessions.&lt;/p&gt;&lt;/html&gt;", ""},
			{label, "&lt;html&gt;&lt;br/&gt;&lt;p&gt;Results are reported as:&lt;br/&gt;&amp;lt;# correct&amp;gt;/&amp;lt;# attempted&amp;gt;;&amp;lt;# deleted&amp;gt;;&amp;lt;# epenthesized&amp;gt;&lt;/p&gt;&lt;/html&gt;", ""}
        ;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var PccOptions = require("lib/Pcc").PccOptions;
var Pcc = require("lib/Pcc").Pcc;

var ignoreTruncatedParamInfo = {
	"id": "ignoreTruncated",
	"desc": "Ignore truncated words",
	"title": "",
	"def": true
};
var ignoreTruncatedParam;
var ignoreTruncated = ignoreTruncatedParamInfo.def;

var pccOptions = {
    "standard": new PccOptions("pccOptions.standard"),
    "aligned": new PccOptions("pccOptions.aligned")
};

var filters = {
	"group": new GroupFilter("filters.group"),
	"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
	"word": new WordFilter("filters.word"),
	"alignedWord": new AlignedWordFilter("filters.alignedWord"),
	"speaker": new ParticipantFilter("filters.speaker")
};

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}

function setup_params(params) {
    var sep = new SeparatorScriptParam("PCC/PVC Options", false);
    params.add(sep);
    
    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    pccOptions.standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	pccOptions.aligned.param_setup(params);
	
	filters.group.param_setup(params);
	var sep = new LabelScriptParam("", "Aligned Group Filter");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.searchByWordEnabled = false;
	filters.word.param_setup(params);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);

	filters.speaker.param_setup(params);
}

/********************************
 * query_record (required)
 *
 * Called for each record in a session.
 * Perform search operations here.
 *
 * params:
 *	record - current record
 * returns:
 *	void
 *******************************/
function query_record(recordIndex, record)
{
	if(!filters.speaker.check_speaker(record.speaker)) return;
    
	var searchObjects = filters.group.getRequestedGroups(record);
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    searchObjects = filters.alignedGroup.filter_groups(record, searchObjects);
	}
	
	for(var gIdx = 0; gIdx &lt; searchObjects.length; gIdx++) {
		var group = searchObjects[gIdx];
		var words = filters.word.getRequestedWords(group, "IPA Target");
		
		for(var wIdx = 0; wIdx &lt; words.length; wIdx++) {
			var word = words[wIdx];
			if(filters.alignedWord.isUseFilter()) {
				var alignedWord = word.getTier(filters.alignedWord.tierName);
				if(!filters.alignedWord.patternFilter.check_filter(alignedWord)) continue;
			}
			
			if(ignoreTruncated &amp;&amp; word.getIPAActual() == null || word.getIPAActual().length() == 0) {
				continue;
			}
			
		    var ipaT = (word.getIPATarget() != null ? word.getIPATarget() : new IPATranscript());
		    var ipaA = (word.getIPAActual() != null ? word.getIPAActual() : new IPATranscript());
		    
		    var result = factory.createResult();
		    result.schema = "ALIGNED";
		    result.recordIndex = recordIndex;
		    
		    var rvt = factory.createResultValue();
		    rvt.tierName = "IPA Target";
	    	rvt.groupIndex = gIdx;
	    	var startIndex = word.getIPATargetWordLocation();
	    	var endIndex = startIndex + ipaT.toString().length();
	    	rvt.range = new Range(startIndex, endIndex, false);
	    	rvt.data = ipaT;
	    	result.addResultValue(rvt);
	    	
	    	var rva = factory.createResultValue();
	    	rva.tierName = "IPA Actual";
	    	rva.groupIndex = gIdx;
	    	startIndex = word.getIPAActualWordLocation();
	    	endIndex = startIndex + ipaA.toString().length();
	    	rva.range = new Range(startIndex, endIndex, false);
	    	rva.data = ipaA;
	        result.addResultValue(rva);
		    
		    var metadata = result.metadata;
		    
		    // exclude values which bias results. 
		    // (e.g., all-vowel words such as 'eau' in French when looking only at PCC)
		    if( (pccOptions.standard.includePcc == true || pccOptions.aligned.includePcc == true)
		    		&amp;&amp; (pccOptions.standard.includePvc == false &amp;&amp; pccOptions.aligned.includePvc == false)
		    		&amp;&amp; ipaT.indexOf("\\c") &lt; 0) {
		    	continue;
		    }
		    if( (pccOptions.standard.includePcc == false &amp;&amp; pccOptions.aligned.includePcc == false)
		    		&amp;&amp; (pccOptions.standard.includePvc == true || pccOptions.aligned.includePvc == true)
		    		&amp;&amp; ipaT.indexOf("\\v") &lt; 0) {
		    	continue;
		    }
		    
		    pccOptions.standard.setup_pcc_standard_metadata(word, metadata);
		    pccOptions.aligned.setup_pcc_aligned_metadata(word, metadata);
		    
		    results.addResult(result);
		}
	}
}
</source>
                                    <param id="pccOptions.aligned.ignoreDiacritics">false</param>
                                    <param id="pccOptions.aligned.includePvc">true</param>
                                    <param id="pccOptions.standard.ignoreDiacritics">false</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="292" y="109"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="7503e898f58d4854" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="376" y="323"/>
                            </extensions>
                        </node>
                        <node id="fcc9e691393649c5" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="590" y="322">
                                    <oga:default for="buffer" type="java.lang.String">PVC (aligned)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="7503e898f58d4854" destField="project" source="31c07e3435194fff" sourceField="project"/>
                        <link dest="fcc9e691393649c5" destField="data" source="7503e898f58d4854" sourceField="table"/>
                        <link dest="7503e898f58d4854" destField="results" source="31c07e3435194fff" sourceField="results"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="31c07e3435194fff"/>
                    <ogcn:published_input field="project" name="project" ref="31c07e3435194fff"/>
                    <extensions>
                        <oga:meta x="437" y="170"/>
                    </extensions>
                </ogcn:macro>
                <link dest="50e315edb9184352" destField="sessions" source="8c1d06519e754f16" sourceField="obj"/>
                <link dest="ac657982633e4fb2" destField="project" source="cd396e1117244899" sourceField="obj"/>
                <link dest="58a7a0ffb19048c2" destField="project" source="cd396e1117244899" sourceField="obj"/>
                <link dest="58a7a0ffb19048c2" destField="sessions" source="8c1d06519e754f16" sourceField="obj"/>
                <link dest="8e6cc14a1c054893" destField="project" source="cd396e1117244899" sourceField="obj"/>
                <link dest="8e6cc14a1c054893" destField="sessions" source="8c1d06519e754f16" sourceField="obj"/>
                <link dest="ac657982633e4fb2" destField="sessions" source="8c1d06519e754f16" sourceField="obj"/>
                <link dest="50e315edb9184352" destField="project" source="cd396e1117244899" sourceField="obj"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="cd396e1117244899"/>
            <ogcn:published_input field="obj" name="obj1" ref="8c1d06519e754f16"/>
            <extensions>
                <oga:meta x="278" y="278"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="5a3c8c49" name="Phone Variability" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="6071b2f1">
                <node id="5d979942d8b44c5e" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <node id="7006651ead9444de" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="91" y="252"/>
                    </extensions>
                </node>
                <ogcn:macro id="e28a8e017b46477e" name="Phone Variability (global)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="3d9e032c">
                        <opqry:queryNode id="420c933f3b6d48a8" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.440-02:30" name="Phones" uuid="396c3fe6-9696-4be2-9ed6-8b3632ca8406">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\c</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="277" y="115"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="c0fcaa2115d94bf9" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="487" y="129"/>
                            </extensions>
                        </node>
                        <node id="5044b1c8d50645f7" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="343" y="259"/>
                            </extensions>
                        </node>
                        <node id="55955985e4c8432f" type="class:ca.phon.app.opgraph.nodes.query.PhoneVariability">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeVoicing"><![CDATA[true]]></oga:property>
                                    <oga:property key="includePlace"><![CDATA[true]]></oga:property>
                                    <oga:property key="useFeatureVariability"><![CDATA[false]]></oga:property>
                                    <oga:property key="includeManner"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="346" y="379"/>
                            </extensions>
                        </node>
                        <node id="a2cc5fdc6a3d45c9" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="531" y="359">
                                    <oga:default for="buffer" type="java.lang.String">Phone Variability (global)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="5044b1c8d50645f7" destField="table" source="c0fcaa2115d94bf9" sourceField="table"/>
                        <link dest="55955985e4c8432f" destField="table" source="5044b1c8d50645f7" sourceField="table"/>
                        <link dest="c0fcaa2115d94bf9" destField="project" source="420c933f3b6d48a8" sourceField="project"/>
                        <link dest="c0fcaa2115d94bf9" destField="results" source="420c933f3b6d48a8" sourceField="results"/>
                        <link dest="a2cc5fdc6a3d45c9" destField="data" source="55955985e4c8432f" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="420c933f3b6d48a8"/>
                    <ogcn:published_input field="project" name="project" ref="420c933f3b6d48a8"/>
                    <extensions>
                        <oga:meta x="315" y="40"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="a978b99e04e64d86" name="Phone Variability (feature)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="13e9fc25">
                        <opqry:queryNode id="571cdbc2cb614f39" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.444-02:30" name="Phones" uuid="693d62e1-2e1b-4c11-b4e1-dc9fb50c0eba">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\c</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="277" y="115"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="450819d12e0c4d6c" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="487" y="129"/>
                            </extensions>
                        </node>
                        <node id="f622710e183d41e5" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="343" y="259"/>
                            </extensions>
                        </node>
                        <node id="e3c5a0071fc14a89" type="class:ca.phon.app.opgraph.nodes.query.PhoneVariability">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeVoicing"><![CDATA[true]]></oga:property>
                                    <oga:property key="includePlace"><![CDATA[true]]></oga:property>
                                    <oga:property key="useFeatureVariability"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeManner"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="346" y="379"/>
                            </extensions>
                        </node>
                        <node id="181eb14bb6d741cf" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="531" y="361">
                                    <oga:default for="buffer" type="java.lang.String">Phone Variability (feature)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="f622710e183d41e5" destField="table" source="450819d12e0c4d6c" sourceField="table"/>
                        <link dest="e3c5a0071fc14a89" destField="table" source="f622710e183d41e5" sourceField="table"/>
                        <link dest="450819d12e0c4d6c" destField="project" source="571cdbc2cb614f39" sourceField="project"/>
                        <link dest="450819d12e0c4d6c" destField="results" source="571cdbc2cb614f39" sourceField="results"/>
                        <link dest="181eb14bb6d741cf" destField="data" source="e3c5a0071fc14a89" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="571cdbc2cb614f39"/>
                    <ogcn:published_input field="project" name="project" ref="571cdbc2cb614f39"/>
                    <extensions>
                        <oga:meta x="315" y="161"/>
                    </extensions>
                </ogcn:macro>
                <link dest="e28a8e017b46477e" destField="project" source="5d979942d8b44c5e" sourceField="obj"/>
                <link dest="e28a8e017b46477e" destField="sessions" source="7006651ead9444de" sourceField="obj"/>
                <link dest="a978b99e04e64d86" destField="project" source="5d979942d8b44c5e" sourceField="obj"/>
                <link dest="a978b99e04e64d86" destField="sessions" source="7006651ead9444de" sourceField="obj"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="5d979942d8b44c5e"/>
            <ogcn:published_input field="obj" name="obj1" ref="7006651ead9444de"/>
            <extensions>
                <oga:meta x="576" y="21"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="31863b1" name="Transcript Variability" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="761dd6ba">
                <node id="50f43413ea8e42b6" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <node id="2175023b2ae747b1" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="98" y="242"/>
                    </extensions>
                </node>
                <ogcn:macro id="a181dea9f56c4bfd" name="Transcript Variability (word)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="21c0efb6">
                        <opqry:queryNode id="3ef13c9986924fab" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.452-02:30" name="Phones" uuid="e89c090b-a3d3-4540-8784-45e7367656e6">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">.+</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="268" y="102"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="7e2842a2038442d6" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="467" y="102"/>
                            </extensions>
                        </node>
                        <node id="bd55a9f5f65447cb" type="class:ca.phon.app.opgraph.nodes.query.IPAVariabilityNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ignoreDiacritics"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="313" y="290"/>
                            </extensions>
                        </node>
                        <node id="5a2405bfc52c42cc" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="489" y="292">
                                    <oga:default for="buffer" type="java.lang.String">Transcript Variability (Word)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="7e2842a2038442d6" destField="results" source="3ef13c9986924fab" sourceField="results"/>
                        <link dest="5a2405bfc52c42cc" destField="data" source="bd55a9f5f65447cb" sourceField="table"/>
                        <link dest="7e2842a2038442d6" destField="project" source="3ef13c9986924fab" sourceField="project"/>
                        <link dest="bd55a9f5f65447cb" destField="table" source="7e2842a2038442d6" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="3ef13c9986924fab"/>
                    <ogcn:published_input field="project" name="project" ref="3ef13c9986924fab"/>
                    <extensions>
                        <oga:meta x="282" y="56"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="5867e099310440c4" name="Transcript Variability (syllable)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="4a9986f">
                        <opqry:queryNode id="1143f23b8eb14560" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.458-02:30" name="Phones" uuid="0511cdc5-c532-499f-90fd-a0b4c6f1e37f">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">.+</param>
                                    <param id="filters.syllable.searchBySyllable">true</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="268" y="102"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="e9370f27b1ef4ffe" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="467" y="102"/>
                            </extensions>
                        </node>
                        <node id="305e595656bc4a88" type="class:ca.phon.app.opgraph.nodes.query.IPAVariabilityNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ignoreDiacritics"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="313" y="290"/>
                            </extensions>
                        </node>
                        <node id="426e54f8a21a456d" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="489" y="292">
                                    <oga:default for="buffer" type="java.lang.String">Transcript Variability (syllable)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="e9370f27b1ef4ffe" destField="results" source="1143f23b8eb14560" sourceField="results"/>
                        <link dest="426e54f8a21a456d" destField="data" source="305e595656bc4a88" sourceField="table"/>
                        <link dest="e9370f27b1ef4ffe" destField="project" source="1143f23b8eb14560" sourceField="project"/>
                        <link dest="305e595656bc4a88" destField="table" source="e9370f27b1ef4ffe" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="1143f23b8eb14560"/>
                    <ogcn:published_input field="project" name="project" ref="1143f23b8eb14560"/>
                    <extensions>
                        <oga:meta x="282" y="175"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="dbd9b852928d4940" name="Transcript Variability (syllable-stressed)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="2e543477">
                        <opqry:queryNode id="153e3c241a8b4054" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.466-02:30" name="Phones" uuid="db2c14ce-b68a-4beb-9147-64d6f96adf72">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">.+</param>
                                    <param id="filters.syllable.sNone">false</param>
                                    <param id="filters.syllable.sPrimary">true</param>
                                    <param id="filters.syllable.sSecondary">true</param>
                                    <param id="filters.syllable.searchBySyllable">true</param>
                                    <param id="filters.word.searchByWord">true</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="268" y="102"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="cef22e7218aa422c" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="467" y="102"/>
                            </extensions>
                        </node>
                        <node id="5b9adc59066f4e57" type="class:ca.phon.app.opgraph.nodes.query.IPAVariabilityNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ignoreDiacritics"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="313" y="290"/>
                            </extensions>
                        </node>
                        <node id="ea07835bf4004674" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="489" y="292">
                                    <oga:default for="buffer" type="java.lang.String">Transcript Variability (syllable-stressed)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="cef22e7218aa422c" destField="results" source="153e3c241a8b4054" sourceField="results"/>
                        <link dest="ea07835bf4004674" destField="data" source="5b9adc59066f4e57" sourceField="table"/>
                        <link dest="cef22e7218aa422c" destField="project" source="153e3c241a8b4054" sourceField="project"/>
                        <link dest="5b9adc59066f4e57" destField="table" source="cef22e7218aa422c" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="153e3c241a8b4054"/>
                    <ogcn:published_input field="project" name="project" ref="153e3c241a8b4054"/>
                    <extensions>
                        <oga:meta x="282" y="291"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="64feca2fc59a4647" name="Transcript Variability (syllable-unstressed)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="486c4032">
                        <opqry:queryNode id="ba2a3a6b44254a59" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T09:57:39.472-02:30" name="Phones" uuid="922b7937-c4f9-4c9d-a299-97cf2d41beb5">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">.+</param>
                                    <param id="filters.syllable.sNone">true</param>
                                    <param id="filters.syllable.sPrimary">false</param>
                                    <param id="filters.syllable.sSecondary">false</param>
                                    <param id="filters.syllable.searchBySyllable">true</param>
                                    <param id="filters.word.searchByWord">true</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="268" y="102"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="9201080972243b3" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="467" y="102"/>
                            </extensions>
                        </node>
                        <node id="5b9a82a88d0849bc" type="class:ca.phon.app.opgraph.nodes.query.IPAVariabilityNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ignoreDiacritics"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="313" y="290"/>
                            </extensions>
                        </node>
                        <node id="f5213e656e074ec4" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="489" y="292">
                                    <oga:default for="buffer" type="java.lang.String">Transcript Variability (syllable-unstressed)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="9201080972243b3" destField="results" source="ba2a3a6b44254a59" sourceField="results"/>
                        <link dest="f5213e656e074ec4" destField="data" source="5b9a82a88d0849bc" sourceField="table"/>
                        <link dest="9201080972243b3" destField="project" source="ba2a3a6b44254a59" sourceField="project"/>
                        <link dest="5b9a82a88d0849bc" destField="table" source="9201080972243b3" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="ba2a3a6b44254a59"/>
                    <ogcn:published_input field="project" name="project" ref="ba2a3a6b44254a59"/>
                    <extensions>
                        <oga:meta x="282" y="406"/>
                    </extensions>
                </ogcn:macro>
                <link dest="a181dea9f56c4bfd" destField="project" source="50f43413ea8e42b6" sourceField="obj"/>
                <link dest="5867e099310440c4" destField="project" source="50f43413ea8e42b6" sourceField="obj"/>
                <link dest="dbd9b852928d4940" destField="project" source="50f43413ea8e42b6" sourceField="obj"/>
                <link dest="64feca2fc59a4647" destField="project" source="50f43413ea8e42b6" sourceField="obj"/>
                <link dest="a181dea9f56c4bfd" destField="sessions" source="2175023b2ae747b1" sourceField="obj"/>
                <link dest="5867e099310440c4" destField="sessions" source="2175023b2ae747b1" sourceField="obj"/>
                <link dest="dbd9b852928d4940" destField="sessions" source="2175023b2ae747b1" sourceField="obj"/>
                <link dest="64feca2fc59a4647" destField="sessions" source="2175023b2ae747b1" sourceField="obj"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="50f43413ea8e42b6"/>
            <ogcn:published_input field="obj" name="obj1" ref="2175023b2ae747b1"/>
            <extensions>
                <oga:meta x="395" y="21"/>
            </extensions>
        </ogcn:macro>
        <link dest="202870d8" destField="obj" source="79946f09" sourceField="obj"/>
        <link dest="202870d8" destField="obj1" source="2367e872" sourceField="obj"/>
        <link dest="955a114" destField="obj" source="79946f09" sourceField="obj"/>
        <link dest="955a114" destField="obj1" source="2367e872" sourceField="obj"/>
        <link dest="c8f18f80486f4a91" destField="obj1" source="2367e872" sourceField="obj"/>
        <link dest="4e79bfff" destField="obj" source="79946f09" sourceField="obj"/>
        <link dest="4e79bfff" destField="obj1" source="2367e872" sourceField="obj"/>
        <link dest="5a3c8c49" destField="obj" source="79946f09" sourceField="obj"/>
        <link dest="c8f18f80486f4a91" destField="obj" source="79946f09" sourceField="obj"/>
        <link dest="31863b1" destField="obj" source="79946f09" sourceField="obj"/>
        <link dest="31863b1" destField="obj1" source="2367e872" sourceField="obj"/>
        <extensions>
            <opqry:nodewizard type="ca.phon.app.opgraph.analysis.AnalysisWizardExtension">
                <opqry:info title="Relational Analysis">
                    <opqry:message/>
                </opqry:info>
                <opqry:node ref="2b7bfe59bce74be7">
                    <opqry:info title="Query : Word List">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="48dd97a00f9a42eb">
                    <opqry:info title="Query : Word List">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="8d4b15e07fc146f6">
                    <opqry:info title="Query : Word List">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="685805f318804f7b">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="5c7c141a391f40cd">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="bd2193b702284136">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="754f638f2115492e">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="1aa97e98a2fe47dc">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="a5b37000ead34dce">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="d43626f0c10f49cf">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="a96e997ea6bb4885">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="a63155a40ab24560">
                    <opqry:info title="Query : PCC-PVC">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="eb388c03bf854d94">
                    <opqry:info title="Query : PCC-PVC">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="ee43c3504c904196">
                    <opqry:info title="Query : PCC-PVC">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="31c07e3435194fff">
                    <opqry:info title="Query : PCC-PVC">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="420c933f3b6d48a8">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="571cdbc2cb614f39">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="e3c5a0071fc14a89">
                    <opqry:info title="Phone Variability">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="3ef13c9986924fab">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="1143f23b8eb14560">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="153e3c241a8b4054">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="ba2a3a6b44254a59">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:optionalNode enabled="true" ref="dfcddbc6284e4e5b"/>
                <opqry:optionalNode enabled="true" ref="43fa1bb7029645bd"/>
                <opqry:optionalNode enabled="true" ref="352e52775a6343d7"/>
                <opqry:optionalNode enabled="true" ref="7a1473143fe44086"/>
                <opqry:optionalNode enabled="false" ref="778801049f5940a9"/>
                <opqry:optionalNode enabled="false" ref="3f9a4c82c2ce4f01"/>
                <opqry:optionalNode enabled="false" ref="b38d2d93e71f4cd4"/>
                <opqry:optionalNode enabled="true" ref="e0b1058b9c0141a2"/>
                <opqry:optionalNode enabled="false" ref="b4509700928748a2"/>
                <opqry:optionalNode enabled="false" ref="a4f19cab59594a20"/>
                <opqry:optionalNode enabled="false" ref="a186081d79ba447a"/>
                <opqry:optionalNode enabled="true" ref="50e315edb9184352"/>
                <opqry:optionalNode enabled="false" ref="58a7a0ffb19048c2"/>
                <opqry:optionalNode enabled="true" ref="ac657982633e4fb2"/>
                <opqry:optionalNode enabled="false" ref="8e6cc14a1c054893"/>
                <opqry:optionalNode enabled="true" ref="e28a8e017b46477e"/>
                <opqry:optionalNode enabled="true" ref="a978b99e04e64d86"/>
                <opqry:optionalNode enabled="true" ref="a181dea9f56c4bfd"/>
                <opqry:optionalNode enabled="true" ref="5867e099310440c4"/>
                <opqry:optionalNode enabled="false" ref="dbd9b852928d4940"/>
                <opqry:optionalNode enabled="false" ref="64feca2fc59a4647"/>
            </opqry:nodewizard>
            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
        </extensions>
    </graph>
</opgraph>
