<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<opgraph xmlns="http://gedge.ca/ns/opgraph" xmlns:nes="https://www.phon.ca/ns/node_editor" xmlns:oga="http://gedge.ca/ns/opgraph-app" xmlns:ogcn="http://gedge.ca/ns/opgraph-common-nodes" xmlns:opqry="https://phon.ca/ns/opgraph_query" xmlns:qry="http://phon.ling.mun.ca/ns/query">
    <graph id="root">
        <node id="5ebeb1bc" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                </oga:settings>
                <oga:meta x="35" y="29"/>
            </extensions>
        </node>
        <node id="2caf7b75" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
            <extensions>
                <oga:settings>
                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                </oga:settings>
                <oga:meta x="92" y="240"/>
            </extensions>
        </node>
        <ogcn:macro id="fed2f99087d485d" name="Word List" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="1896fdb6">
                <opqry:queryNode id="964b72e092de49bb" name="Query : Word List" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.730-02:30" name="Word List" uuid="cfdf2980-8a86-4f00-a81c-4d59fe5d264a">
                        <script>
                            <source>/*
 * Phon - An open source tool for research in phonology.
 * Copyright (C) 2005 - 2015, Gregory Hedlund &lt;ghedlund@mun.ca&gt; and Yvan Rose &lt;yrose@mun.ca&gt;
 * Dept of Linguistics, Memorial University &lt;https://phon.ca&gt;
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */
/**
 * Create a listing of aligned words from the Orthography/IPA Target/IPA Actual
 * tiers.
 */

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;

var filters = {
		"group": new GroupFilter("filters.group"),
		"alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
		"word": new WordFilter("filters.word"),
		"alignedWord": new AlignedWordFilter("filters.alignedWord"),
		"speaker": new ParticipantFilter("filters.speaker")
};

var session;

function begin_search(s) {
	session = s;
}

function setup_params(params) {
	filters.group.param_setup(params);
	var sep = new LabelScriptParam("", "Aligned Group Filter");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.searchByWordEnabled = false;
	filters.word.param_setup(params);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
	params.add(wordsep);
	filters.alignedWord.param_setup(params);

	filters.speaker.param_setup(params);
}

function query_record(recordIndex, record) {
	if(!filters.speaker.check_speaker(record.speaker)) return;
    
	var searchObjects = filters.group.getRequestedGroups(record);
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    searchObjects = filters.alignedGroup.filter_groups(record, searchObjects);
	}
	
	for(var gIdx = 0; gIdx &lt; searchObjects.length; gIdx++) {
		var group = searchObjects[gIdx];
		
		// use 'IPA Target' as our source tier
		var words = filters.word.getRequestedWords(group, "IPA Target");
		
		for(var wIdx = 0; wIdx &lt; words.length; wIdx++) {
			var word = words[wIdx];
			var ortho = word.orthography || new Orthography();
			var ipaT = word.IPATarget || new IPATranscript();
			var ipaA = word.IPAActual || new IPATranscript();
			
			var result = factory.createResult();
			result.schema = "ALIGNED";
			result.recordIndex = recordIndex;
			
			var rv1 = factory.createResultValue();
			rv1.tierName = "Orthography";
	    	rv1.groupIndex = gIdx;
	    	var startIndex = (ortho.toString().length() &gt; 0 ? word.getOrthographyWordLocation() : 0);
	    	var endIndex = startIndex + ortho.toString().length();
	    	rv1.range = new Range(startIndex, endIndex, false);
	    	rv1.data = ortho;
	    	result.addResultValue(rv1);
	    	
	    	var rvt = factory.createResultValue();
		    rvt.tierName = "IPA Target";
	    	rvt.groupIndex = gIdx;
	    	var startIndex = (ipaT.length() &gt; 0 ? word.getIPATargetWordLocation() : 0);
	    	var endIndex = startIndex + ipaT.toString().length();
	    	rvt.range = new Range(startIndex, endIndex, false);
	    	rvt.data = ipaT;
	    	result.addResultValue(rvt);
	    	
	    	var rva = factory.createResultValue();
	    	rva.tierName = "IPA Actual";
	    	rva.groupIndex = gIdx;
	    	startIndex = (ipaA.length() &gt; 0 ? word.getIPAActualWordLocation() : 0);
	    	endIndex = startIndex + ipaA.toString().length();
	    	rva.range = new Range(startIndex, endIndex, false);
	    	rva.data = ipaA;
	        result.addResultValue(rva);
	        
	        results.addResult(result);
		}
	}
}
</source>
                        </script>
                    </qry:query>
                    <extensions>
                        <oga:settings/>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </opqry:queryNode>
                <node id="f1776b9e4ac344d1" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                        </oga:settings>
                        <oga:meta x="209" y="15"/>
                    </extensions>
                </node>
                <ogcn:macro id="51d5bee0" name="Word List" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="3ca12e85">
                        <node id="79658d584c334300" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="384" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Word List</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                    </graph>
                    <ogcn:published_input field="data" name="data" ref="79658d584c334300"/>
                    <extensions>
                        <oga:meta x="384" y="15"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="759ff8d5" name="Token Summary" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="7661ff2d">
                        <node id="58c67ea2206d4e14" type="class:ca.phon.app.opgraph.nodes.query.TokenSummaryNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="caseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="ignoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="columnNames"><![CDATA[Orthography;IPA Target;IPA Actual]]></oga:property>
                                </oga:settings>
                                <oga:meta x="382" y="255"/>
                            </extensions>
                        </node>
                        <node id="d11385603b8841b0" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="557" y="255">
                                    <oga:default for="buffer" type="java.lang.String">Word List (Token Summary)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="d11385603b8841b0" destField="data" source="58c67ea2206d4e14" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="table" name="table" ref="58c67ea2206d4e14"/>
                    <extensions>
                        <oga:meta x="384" y="116"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="47b7c381" name="Word Inventory (Orthography)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="5526a9cb">
                        <node id="1d470a8d" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="Orthography" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="393" y="240"/>
                            </extensions>
                        </node>
                        <node id="5e3e7806" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="569" y="243">
                                    <oga:default for="buffer" type="java.lang.String">Word Inventory (Orthography)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="5e3e7806" destField="data" source="1d470a8d" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="table" name="table" ref="1d470a8d"/>
                    <extensions>
                        <oga:meta x="384" y="217"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="ea40b68656514349" name="Word Inventory (IPA Target)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="20f5c8eb">
                        <node id="996b6d0fac124fb6" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="393" y="240"/>
                            </extensions>
                        </node>
                        <node id="d57470c55b3247d8" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="569" y="243">
                                    <oga:default for="buffer" type="java.lang.String">Word Inventory (IPA Target)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="d57470c55b3247d8" destField="data" source="996b6d0fac124fb6" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="table" name="table" ref="996b6d0fac124fb6"/>
                    <extensions>
                        <oga:meta x="384" y="318"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="ab0e0c45ada6427d" name="Word Inventory (IPA Actual)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="1d1df7db">
                        <node id="a2723f1b58d44f58" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="393" y="240"/>
                            </extensions>
                        </node>
                        <node id="8fa0118003774364" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="569" y="243">
                                    <oga:default for="buffer" type="java.lang.String">Word Inventory (IPA Actual)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="8fa0118003774364" destField="data" source="a2723f1b58d44f58" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="table" name="table" ref="a2723f1b58d44f58"/>
                    <extensions>
                        <oga:meta x="384" y="419"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="62f493d7" name="Homophony Analysis" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="820b614">
                        <node id="3b9de6a9e3f94c97" type="class:ca.phon.app.opgraph.nodes.query.HomophonyAnalysis">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ignoreDiacritics"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="408" y="535"/>
                            </extensions>
                        </node>
                        <node id="646f3826" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="655" y="579">
                                    <oga:default for="buffer" type="java.lang.String">Homophony Analysis</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="646f3826" destField="data" source="3b9de6a9e3f94c97" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="table" name="table" ref="3b9de6a9e3f94c97"/>
                    <extensions>
                        <oga:meta x="384" y="520"/>
                    </extensions>
                </ogcn:macro>
                <link dest="f1776b9e4ac344d1" destField="project" source="964b72e092de49bb" sourceField="project"/>
                <link dest="f1776b9e4ac344d1" destField="results" source="964b72e092de49bb" sourceField="results"/>
                <link dest="51d5bee0" destField="data" source="f1776b9e4ac344d1" sourceField="table"/>
                <link dest="759ff8d5" destField="table" source="f1776b9e4ac344d1" sourceField="table"/>
                <link dest="ea40b68656514349" destField="table" source="f1776b9e4ac344d1" sourceField="table"/>
                <link dest="ab0e0c45ada6427d" destField="table" source="f1776b9e4ac344d1" sourceField="table"/>
                <link dest="47b7c381" destField="table" source="f1776b9e4ac344d1" sourceField="table"/>
                <link dest="62f493d7" destField="table" source="f1776b9e4ac344d1" sourceField="table"/>
            </graph>
            <ogcn:published_input field="project" name="project" ref="964b72e092de49bb"/>
            <ogcn:published_input field="sessions" name="sessions" ref="964b72e092de49bb"/>
            <extensions>
                <oga:meta x="297" y="24"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="62f14ef4" name="Word Shapes" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="772b4817">
                <node id="2c2adf0197e5490c" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="15" y="15"/>
                    </extensions>
                </node>
                <node id="b9e9173a7dbe4341" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="92" y="240"/>
                    </extensions>
                </node>
                <ogcn:macro id="9e08f59545d94fd7" name="Word Shapes (CV)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="205777fe">
                        <opqry:queryNode id="69ba18b486ce4084" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.736-02:30" name="Phones" uuid="242e733d-7239-4cc5-82d7-a8a086011d90">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">.+</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="43d53874e7ef446f" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="209" y="15"/>
                            </extensions>
                        </node>
                        <node id="3da77d50a08740ba" name="Add IPA Target CV" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Target").cvPattern;
}
]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Target Word Shape]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="384" y="15"/>
                            </extensions>
                        </node>
                        <node id="a063f8163d25430b" name="Add IPA Actual CV" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Actual").cvPattern;
}
]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Actual Word Shape]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="209" y="136"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="9f18fd13ee984803" name="Inventory" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="7e88a799">
                                <node id="e0d4f84d27e246d7" name="TableDataSource" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.TableDataSource]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <node id="5e2d11c5237047ec" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target Word Shape" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="242" y="15"/>
                                    </extensions>
                                </node>
                                <node id="c9f3d6e4c0bd4793" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual Word Shape" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="242" y="156"/>
                                    </extensions>
                                </node>
                                <node id="3a57d71b5fdc4090" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="keyColumnName"><![CDATA[Word Shape]]></oga:property>
                                            <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual Word Shape]]></oga:property>
                                            <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="table1KeyColumn"><![CDATA[IPA Target Word Shape]]></oga:property>
                                            <oga:property key="table1ColumnPrefix"/>
                                            <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2KeyColumn"><![CDATA[IPA Actual Word Shape]]></oga:property>
                                            <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target Word Shape]]></oga:property>
                                            <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnPrefix"/>
                                            <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="417" y="15"/>
                                    </extensions>
                                </node>
                                <node id="23d228b4178147a3" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="Word Shape" order="ascending" type="plain"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="592" y="15"/>
                                    </extensions>
                                </node>
                                <node id="741a18fc124657" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="767" y="15">
                                            <oga:default for="buffer" type="java.lang.String">Word Shapes (CV)</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="3a57d71b5fdc4090" destField="table2" source="c9f3d6e4c0bd4793" sourceField="table"/>
                                <link dest="3a57d71b5fdc4090" destField="table1" source="5e2d11c5237047ec" sourceField="table"/>
                                <link dest="c9f3d6e4c0bd4793" destField="table" source="e0d4f84d27e246d7" sourceField="obj"/>
                                <link dest="5e2d11c5237047ec" destField="table" source="e0d4f84d27e246d7" sourceField="obj"/>
                                <link dest="23d228b4178147a3" destField="table" source="3a57d71b5fdc4090" sourceField="table"/>
                                <link dest="741a18fc124657" destField="data" source="23d228b4178147a3" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="obj" name="obj" ref="e0d4f84d27e246d7"/>
                            <extensions>
                                <oga:meta x="384" y="136"/>
                            </extensions>
                        </ogcn:macro>
                        <ogcn:macro id="741a13c0fa4663" name="Summary" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="223d2508">
                                <node id="a0965f2e347a43be" type="class:ca.phon.app.opgraph.nodes.query.TokenSummaryNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="caseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="ignoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="columnNames"><![CDATA[IPA Target Word Shape;IPA Actual Word Shape]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <node id="6b4fd2b4ca2a48a0" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="190" y="15">
                                            <oga:default for="buffer" type="java.lang.String">Word Shapes (CV - Token Summary)</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="6b4fd2b4ca2a48a0" destField="data" source="a0965f2e347a43be" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="table" name="table" ref="a0965f2e347a43be"/>
                            <extensions>
                                <oga:meta x="384" y="237"/>
                            </extensions>
                        </ogcn:macro>
                        <link dest="43d53874e7ef446f" destField="results" source="69ba18b486ce4084" sourceField="results"/>
                        <link dest="43d53874e7ef446f" destField="project" source="69ba18b486ce4084" sourceField="project"/>
                        <link dest="3da77d50a08740ba" destField="table" source="43d53874e7ef446f" sourceField="table"/>
                        <link dest="9f18fd13ee984803" destField="obj" source="a063f8163d25430b" sourceField="table"/>
                        <link dest="a063f8163d25430b" destField="table" source="3da77d50a08740ba" sourceField="table"/>
                        <link dest="741a13c0fa4663" destField="table" source="a063f8163d25430b" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="69ba18b486ce4084"/>
                    <ogcn:published_input field="project" name="project" ref="69ba18b486ce4084"/>
                    <extensions>
                        <oga:meta x="315" y="15"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="571ea2b81f634f1c" name="Word Shapes (Stress Pattern)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="6de39ba5">
                        <opqry:queryNode id="4f6fc495956346ae" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.741-02:30" name="Phones" uuid="71d871a4-5f00-4097-8896-ac6780ac5f2e">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">.+</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="df9c69ecc0384158" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="209" y="15"/>
                            </extensions>
                        </node>
                        <node id="63a962237eb34fe1" name="Add IPA Target Stress Pattern" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Target").stressPattern;
}
]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Target Stress Pattern]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="384" y="15"/>
                            </extensions>
                        </node>
                        <node id="94f5686ba0994788" name="Add IPA Actual Stress Pattern" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Actual").stressPattern;
}
]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Actual Stress Pattern]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="627" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="8a9535338f9b4c1a" name="Inventory" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="5ea70962">
                                <node id="6b7107581752410f" name="TableDataSource" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.TableDataSource]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <node id="4c32aa6c138a482b" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target Stress Pattern" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="242" y="15"/>
                                    </extensions>
                                </node>
                                <node id="104c25337a754a3d" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual Stress Pattern" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="242" y="156"/>
                                    </extensions>
                                </node>
                                <node id="9f847fb5a4ab4ee9" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="keyColumnName"><![CDATA[Stress Pattern]]></oga:property>
                                            <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual Stress Pattern]]></oga:property>
                                            <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="table1KeyColumn"><![CDATA[IPA Target Stress Pattern]]></oga:property>
                                            <oga:property key="table1ColumnPrefix"/>
                                            <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2KeyColumn"><![CDATA[IPA Actual Stress Pattern]]></oga:property>
                                            <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target Stress Patternhape]]></oga:property>
                                            <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnPrefix"/>
                                            <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="417" y="15"/>
                                    </extensions>
                                </node>
                                <node id="6f24c407e7334b8f" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="Stress Pattern" order="ascending" type="plain"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="592" y="15"/>
                                    </extensions>
                                </node>
                                <node id="917fdf22b3634e03" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="767" y="15">
                                            <oga:default for="buffer" type="java.lang.String">Word Shapes (Stress Pattern)</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="9f847fb5a4ab4ee9" destField="table1" source="4c32aa6c138a482b" sourceField="table"/>
                                <link dest="104c25337a754a3d" destField="table" source="6b7107581752410f" sourceField="obj"/>
                                <link dest="4c32aa6c138a482b" destField="table" source="6b7107581752410f" sourceField="obj"/>
                                <link dest="6f24c407e7334b8f" destField="table" source="9f847fb5a4ab4ee9" sourceField="table"/>
                                <link dest="917fdf22b3634e03" destField="data" source="6f24c407e7334b8f" sourceField="table"/>
                                <link dest="9f847fb5a4ab4ee9" destField="table2" source="104c25337a754a3d" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="obj" name="obj" ref="6b7107581752410f"/>
                            <extensions>
                                <oga:meta x="209" y="136"/>
                            </extensions>
                        </ogcn:macro>
                        <ogcn:macro id="2c0e920230a440b" name="Summary" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="6b236d5f">
                                <node id="11719eb238f24df4" type="class:ca.phon.app.opgraph.nodes.query.TokenSummaryNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="caseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="ignoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="columnNames"><![CDATA[IPA Target Stress Pattern;IPA Actual Stress Pattern]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <node id="40836514a8864aa9" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="190" y="15">
                                            <oga:default for="buffer" type="java.lang.String">Word Shapes (Stress Pattern - Token Summary)</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="40836514a8864aa9" destField="data" source="11719eb238f24df4" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="table" name="table" ref="11719eb238f24df4"/>
                            <extensions>
                                <oga:meta x="209" y="237"/>
                            </extensions>
                        </ogcn:macro>
                        <link dest="df9c69ecc0384158" destField="results" source="4f6fc495956346ae" sourceField="results"/>
                        <link dest="2c0e920230a440b" destField="table" source="94f5686ba0994788" sourceField="table"/>
                        <link dest="df9c69ecc0384158" destField="project" source="4f6fc495956346ae" sourceField="project"/>
                        <link dest="94f5686ba0994788" destField="table" source="63a962237eb34fe1" sourceField="table"/>
                        <link dest="8a9535338f9b4c1a" destField="obj" source="94f5686ba0994788" sourceField="table"/>
                        <link dest="63a962237eb34fe1" destField="table" source="df9c69ecc0384158" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="sessions" name="sessions" ref="4f6fc495956346ae"/>
                    <ogcn:published_input field="project" name="project" ref="4f6fc495956346ae"/>
                    <extensions>
                        <oga:meta x="315" y="136"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="9b8dcba4a86c48b5" name="Word Shapes (Syllables)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="603a2a10">
                        <opqry:queryNode id="9dd5054f6ffa4285" name="Query : Phones" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.747-02:30" name="Phones" uuid="bd25773b-70e7-4ef7-98a9-3c80f0fe2069">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">.+</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="253c0afbab3a4d87" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="209" y="15"/>
                            </extensions>
                        </node>
                        <node id="5cbe16d1f97348b3" name="Add IPA Target Syllable Count" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Target").syllables().size();
}
]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Target Syllable Count]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="384" y="15"/>
                            </extensions>
                        </node>
                        <node id="b32d591c0ab643e5" name="Add IPA Actual Syllable Count" type="class:ca.phon.app.opgraph.nodes.query.AddColumnNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="__script"><![CDATA[/*
params = {label, "Add a new column to the input table using javascript.", "<html><b>Add column to table</b></html>"}
;
*/

function getRowValue(table, row) {
	return table.getValueAt(row, "IPA Actual").syllables().size();
}
]]></oga:property>
                                    <oga:property key="column"><![CDATA[IPA Actual Syllable Count]]></oga:property>
                                    <oga:property key="columnIndex"><![CDATA[-1]]></oga:property>
                                </oga:settings>
                                <oga:meta x="209" y="136"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="955459c39b584318" name="Inventory" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="2f8eea56">
                                <node id="78874ee61b0b424b" name="TableDataSource" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.query.report.datasource.TableDataSource]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <node id="e7b00969d47348c7" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target Syllable Count" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="242" y="15"/>
                                    </extensions>
                                </node>
                                <node id="75cc898d5134fe8" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual Syllable Count" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="242" y="277"/>
                                    </extensions>
                                </node>
                                <node id="86367e8744624ead" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="keyColumnName"><![CDATA[Syllable Count]]></oga:property>
                                            <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual Syllable Count]]></oga:property>
                                            <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="table1KeyColumn"><![CDATA[IPA Target Syllable Count]]></oga:property>
                                            <oga:property key="table1ColumnPrefix"/>
                                            <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2KeyColumn"><![CDATA[IPA Actual Syllable Count]]></oga:property>
                                            <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target Syllable Count]]></oga:property>
                                            <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnPrefix"/>
                                            <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="417" y="15"/>
                                    </extensions>
                                </node>
                                <node id="2764b22040304f5c" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="Syllable Count" order="ascending" type="plain"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="242" y="136"/>
                                    </extensions>
                                </node>
                                <node id="ebd4f5d806944a78" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="417" y="136">
                                            <oga:default for="buffer" type="java.lang.String">Word Shapes (Syllables)</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="86367e8744624ead" destField="table2" source="75cc898d5134fe8" sourceField="table"/>
                                <link dest="86367e8744624ead" destField="table1" source="e7b00969d47348c7" sourceField="table"/>
                                <link dest="75cc898d5134fe8" destField="table" source="78874ee61b0b424b" sourceField="obj"/>
                                <link dest="e7b00969d47348c7" destField="table" source="78874ee61b0b424b" sourceField="obj"/>
                                <link dest="2764b22040304f5c" destField="table" source="86367e8744624ead" sourceField="table"/>
                                <link dest="ebd4f5d806944a78" destField="data" source="2764b22040304f5c" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="obj" name="obj" ref="78874ee61b0b424b"/>
                            <extensions>
                                <oga:meta x="453" y="136"/>
                            </extensions>
                        </ogcn:macro>
                        <ogcn:macro id="16eb395621e04836" name="Summary" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="c2cd0dc">
                                <node id="362d77c3b9b04eee" type="class:ca.phon.app.opgraph.nodes.query.TokenSummaryNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="caseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="ignoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="columnNames"><![CDATA[IPA Target Syllable Count;IPA Actual Syllable Count]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <node id="8e21698c235148aa" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="190" y="15">
                                            <oga:default for="buffer" type="java.lang.String">Word Shapes (Syllables - Token Summary)</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="8e21698c235148aa" destField="data" source="362d77c3b9b04eee" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="table" name="table" ref="362d77c3b9b04eee"/>
                            <extensions>
                                <oga:meta x="453" y="237"/>
                            </extensions>
                        </ogcn:macro>
                        <link dest="955459c39b584318" destField="obj" source="b32d591c0ab643e5" sourceField="table"/>
                        <link dest="16eb395621e04836" destField="table" source="b32d591c0ab643e5" sourceField="table"/>
                        <link dest="253c0afbab3a4d87" destField="project" source="9dd5054f6ffa4285" sourceField="project"/>
                        <link dest="5cbe16d1f97348b3" destField="table" source="253c0afbab3a4d87" sourceField="table"/>
                        <link dest="253c0afbab3a4d87" destField="results" source="9dd5054f6ffa4285" sourceField="results"/>
                        <link dest="b32d591c0ab643e5" destField="table" source="5cbe16d1f97348b3" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="project" name="project" ref="9dd5054f6ffa4285"/>
                    <ogcn:published_input field="sessions" name="sessions" ref="9dd5054f6ffa4285"/>
                    <extensions>
                        <oga:meta x="315" y="257"/>
                    </extensions>
                </ogcn:macro>
                <link dest="9e08f59545d94fd7" destField="project" source="2c2adf0197e5490c" sourceField="obj"/>
                <link dest="9e08f59545d94fd7" destField="sessions" source="b9e9173a7dbe4341" sourceField="obj"/>
                <link dest="571ea2b81f634f1c" destField="project" source="2c2adf0197e5490c" sourceField="obj"/>
                <link dest="571ea2b81f634f1c" destField="sessions" source="b9e9173a7dbe4341" sourceField="obj"/>
                <link dest="9b8dcba4a86c48b5" destField="project" source="2c2adf0197e5490c" sourceField="obj"/>
                <link dest="9b8dcba4a86c48b5" destField="sessions" source="b9e9173a7dbe4341" sourceField="obj"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="2c2adf0197e5490c"/>
            <ogcn:published_input field="obj" name="obj1" ref="b9e9173a7dbe4341"/>
            <extensions>
                <oga:meta x="421" y="24"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="1c0d3520" name="Consonant Inventory" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="15ad4c8f">
                <node id="791fd81cc58346d9" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="60" y="23"/>
                    </extensions>
                </node>
                <node id="ac6a3bb4fbc845ee" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="142" y="240"/>
                    </extensions>
                </node>
                <ogcn:macro id="aef8ba53120f42a3" name="Consonant Inventory" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="10f24954">
                        <node id="ea59c0ff4f204f08" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="82bac542416243b0" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="52e61d9b">
                                <node id="d627629d193d4806" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="a3becaa9b92c49e5" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.754-02:30" name="Phones" uuid="925993a7-9e77-49f8-bf37-dde1c831085c">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\c</param>
                                    <param id="includeAligned">false</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="2b8a9c1b8a984937" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.758-02:30" name="Phones" uuid="68090099-4998-49c5-a581-986e357c52fe">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\c</param>
                                    <param id="includeAligned">false</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="e69a3c351554105" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="64d72df199cd4352" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="1105012ce44e44b0" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="1412181a20404221" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="ad083c47482147bf" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="494326e9f10a428d" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="3d361493cacc43a9" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Consonant Inventory</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="3d361493cacc43a9" destField="data" source="494326e9f10a428d" sourceField="table"/>
                        <link dest="64d72df199cd4352" destField="project" source="2b8a9c1b8a984937" sourceField="project"/>
                        <link dest="494326e9f10a428d" destField="table" source="ad083c47482147bf" sourceField="table"/>
                        <link dest="e69a3c351554105" destField="project" source="a3becaa9b92c49e5" sourceField="project"/>
                        <link dest="1412181a20404221" destField="table" source="64d72df199cd4352" sourceField="table"/>
                        <link dest="a3becaa9b92c49e5" destField="sessions" source="82bac542416243b0" sourceField="obj"/>
                        <link dest="ad083c47482147bf" destField="table2" source="1412181a20404221" sourceField="table"/>
                        <link dest="1105012ce44e44b0" destField="table" source="e69a3c351554105" sourceField="table"/>
                        <link dest="2b8a9c1b8a984937" destField="project" source="ea59c0ff4f204f08" sourceField="obj"/>
                        <link dest="64d72df199cd4352" destField="results" source="2b8a9c1b8a984937" sourceField="results"/>
                        <link dest="a3becaa9b92c49e5" destField="project" source="ea59c0ff4f204f08" sourceField="obj"/>
                        <link dest="2b8a9c1b8a984937" destField="sessions" source="82bac542416243b0" sourceField="obj"/>
                        <link dest="e69a3c351554105" destField="results" source="a3becaa9b92c49e5" sourceField="results"/>
                        <link dest="ad083c47482147bf" destField="table1" source="1105012ce44e44b0" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="82bac542416243b0"/>
                    <ogcn:published_input field="obj" name="obj1" ref="ea59c0ff4f204f08"/>
                    <extensions>
                        <oga:meta x="342" y="28"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="73fa61b12a6f419d" name="Consonant Inventory (word-initial)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="462db58b">
                        <node id="6969e09bdd314e0a" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="6e14f6daa7f44649" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="7e8c5ef1">
                                <node id="8ec7bc640e084b0a" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="dea95a6bcf5846ac" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.762-02:30" name="Phones" uuid="e8a52425-cee4-4714-99e5-1b91cd99b92c">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">^\s?(X=\c)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="144a96802ff64e6d" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.766-02:30" name="Phones" uuid="29057aec-f451-4999-baf0-1620184b1e0d">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">^\s?(X=\c)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="b0fe9fa126ce4fdf" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="29b4fcdabaeb47f9" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="30213ab922ab4161" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="5f67c12f96f94a96" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="f48eebd8a9824a46" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="27cd7c0ba8de481a" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="e25ad4f382c24c31" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Consonant Inventory (word-initial)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="e25ad4f382c24c31" destField="data" source="27cd7c0ba8de481a" sourceField="table"/>
                        <link dest="29b4fcdabaeb47f9" destField="project" source="144a96802ff64e6d" sourceField="project"/>
                        <link dest="27cd7c0ba8de481a" destField="table" source="f48eebd8a9824a46" sourceField="table"/>
                        <link dest="b0fe9fa126ce4fdf" destField="project" source="dea95a6bcf5846ac" sourceField="project"/>
                        <link dest="5f67c12f96f94a96" destField="table" source="29b4fcdabaeb47f9" sourceField="table"/>
                        <link dest="dea95a6bcf5846ac" destField="sessions" source="6e14f6daa7f44649" sourceField="obj"/>
                        <link dest="f48eebd8a9824a46" destField="table2" source="5f67c12f96f94a96" sourceField="table"/>
                        <link dest="30213ab922ab4161" destField="table" source="b0fe9fa126ce4fdf" sourceField="table"/>
                        <link dest="144a96802ff64e6d" destField="project" source="6969e09bdd314e0a" sourceField="obj"/>
                        <link dest="29b4fcdabaeb47f9" destField="results" source="144a96802ff64e6d" sourceField="results"/>
                        <link dest="dea95a6bcf5846ac" destField="project" source="6969e09bdd314e0a" sourceField="obj"/>
                        <link dest="144a96802ff64e6d" destField="sessions" source="6e14f6daa7f44649" sourceField="obj"/>
                        <link dest="b0fe9fa126ce4fdf" destField="results" source="dea95a6bcf5846ac" sourceField="results"/>
                        <link dest="f48eebd8a9824a46" destField="table1" source="30213ab922ab4161" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="6e14f6daa7f44649"/>
                    <ogcn:published_input field="obj" name="obj1" ref="6969e09bdd314e0a"/>
                    <extensions>
                        <oga:meta x="342" y="148"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="af4fdaf50a0b4217" name="Consonant Inventory (word-medial)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="4c3abade">
                        <node id="e3517b348da74ac4" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="397450fd69434e00" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="bf5c937">
                                <node id="eca649d16bb044c3" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="92475fbe28ac4196" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.771-02:30" name="Phones" uuid="f354c6a7-de70-4037-9c07-3f0de82af57f">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">(?&lt;\w\s?)\c(?&gt;\s?\w)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="3b3147a778524b1a" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.775-02:30" name="Phones" uuid="a98b043a-5a69-442e-8ae5-3137abdc1040">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">(?&lt;\w\s?)\c(?&gt;\s?\w)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="2ceb0a0f8c844a15" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="65206769e062494a" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="76dcea20f81b467e" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="bedc33f292264e27" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="e34eb77787db49f4" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="f82d8f2abf2c453c" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="c61778def5924916" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Consonant Inventory (word-medial)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="c61778def5924916" destField="data" source="f82d8f2abf2c453c" sourceField="table"/>
                        <link dest="65206769e062494a" destField="project" source="3b3147a778524b1a" sourceField="project"/>
                        <link dest="f82d8f2abf2c453c" destField="table" source="e34eb77787db49f4" sourceField="table"/>
                        <link dest="2ceb0a0f8c844a15" destField="project" source="92475fbe28ac4196" sourceField="project"/>
                        <link dest="bedc33f292264e27" destField="table" source="65206769e062494a" sourceField="table"/>
                        <link dest="92475fbe28ac4196" destField="sessions" source="397450fd69434e00" sourceField="obj"/>
                        <link dest="e34eb77787db49f4" destField="table2" source="bedc33f292264e27" sourceField="table"/>
                        <link dest="76dcea20f81b467e" destField="table" source="2ceb0a0f8c844a15" sourceField="table"/>
                        <link dest="3b3147a778524b1a" destField="project" source="e3517b348da74ac4" sourceField="obj"/>
                        <link dest="65206769e062494a" destField="results" source="3b3147a778524b1a" sourceField="results"/>
                        <link dest="92475fbe28ac4196" destField="project" source="e3517b348da74ac4" sourceField="obj"/>
                        <link dest="3b3147a778524b1a" destField="sessions" source="397450fd69434e00" sourceField="obj"/>
                        <link dest="2ceb0a0f8c844a15" destField="results" source="92475fbe28ac4196" sourceField="results"/>
                        <link dest="e34eb77787db49f4" destField="table1" source="76dcea20f81b467e" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="397450fd69434e00"/>
                    <ogcn:published_input field="obj" name="obj1" ref="e3517b348da74ac4"/>
                    <extensions>
                        <oga:meta x="342" y="270"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="1cf1d132de974430" name="Consonant Inventory (word-final)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="3aad9157">
                        <node id="6f7ab3691a9b4ac4" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="53d079f467fa4a68" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="31563766">
                                <node id="dd432c72fd2048fa" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="490d92390e2e4f6e" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.780-02:30" name="Phones" uuid="896af4ab-7e24-4054-b90e-b1d5635cdf35">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\c$</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="b40555f4dd924c01" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.784-02:30" name="Phones" uuid="041eb354-0543-403e-8dbe-30f56bcf8432">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\c$</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="2ed1e5bf544c42bb" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="4bb35a6dc49c4e20" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="9a1482e2b2704cdf" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="31becdcc89a44411" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="e794b1601d6f4184" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="76a781dc975544c2" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="702f2bc573ef466b" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Consonant Inventory (word-final)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="702f2bc573ef466b" destField="data" source="76a781dc975544c2" sourceField="table"/>
                        <link dest="4bb35a6dc49c4e20" destField="project" source="b40555f4dd924c01" sourceField="project"/>
                        <link dest="76a781dc975544c2" destField="table" source="e794b1601d6f4184" sourceField="table"/>
                        <link dest="2ed1e5bf544c42bb" destField="project" source="490d92390e2e4f6e" sourceField="project"/>
                        <link dest="31becdcc89a44411" destField="table" source="4bb35a6dc49c4e20" sourceField="table"/>
                        <link dest="490d92390e2e4f6e" destField="sessions" source="53d079f467fa4a68" sourceField="obj"/>
                        <link dest="e794b1601d6f4184" destField="table2" source="31becdcc89a44411" sourceField="table"/>
                        <link dest="9a1482e2b2704cdf" destField="table" source="2ed1e5bf544c42bb" sourceField="table"/>
                        <link dest="b40555f4dd924c01" destField="project" source="6f7ab3691a9b4ac4" sourceField="obj"/>
                        <link dest="4bb35a6dc49c4e20" destField="results" source="b40555f4dd924c01" sourceField="results"/>
                        <link dest="490d92390e2e4f6e" destField="project" source="6f7ab3691a9b4ac4" sourceField="obj"/>
                        <link dest="b40555f4dd924c01" destField="sessions" source="53d079f467fa4a68" sourceField="obj"/>
                        <link dest="2ed1e5bf544c42bb" destField="results" source="490d92390e2e4f6e" sourceField="results"/>
                        <link dest="e794b1601d6f4184" destField="table1" source="9a1482e2b2704cdf" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="53d079f467fa4a68"/>
                    <ogcn:published_input field="obj" name="obj1" ref="6f7ab3691a9b4ac4"/>
                    <extensions>
                        <oga:meta x="342" y="391"/>
                    </extensions>
                </ogcn:macro>
                <link dest="aef8ba53120f42a3" destField="obj1" source="791fd81cc58346d9" sourceField="obj"/>
                <link dest="73fa61b12a6f419d" destField="obj1" source="791fd81cc58346d9" sourceField="obj"/>
                <link dest="aef8ba53120f42a3" destField="obj" source="ac6a3bb4fbc845ee" sourceField="obj"/>
                <link dest="73fa61b12a6f419d" destField="obj" source="ac6a3bb4fbc845ee" sourceField="obj"/>
                <link dest="af4fdaf50a0b4217" destField="obj1" source="791fd81cc58346d9" sourceField="obj"/>
                <link dest="af4fdaf50a0b4217" destField="obj" source="ac6a3bb4fbc845ee" sourceField="obj"/>
                <link dest="1cf1d132de974430" destField="obj1" source="791fd81cc58346d9" sourceField="obj"/>
                <link dest="1cf1d132de974430" destField="obj" source="ac6a3bb4fbc845ee" sourceField="obj"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="791fd81cc58346d9"/>
            <ogcn:published_input field="obj" name="obj1" ref="ac6a3bb4fbc845ee"/>
            <extensions>
                <oga:meta x="296" y="208"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="573a3f02" name="Vowel Inventory" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="7966b877">
                <node id="c3b6db3b05134970" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="32" y="22"/>
                    </extensions>
                </node>
                <node id="e3c71950e2d64f4d" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="92" y="240"/>
                    </extensions>
                </node>
                <ogcn:macro id="5c3fd98afe134b6a" name="Vowel Inventory" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="2e829358">
                        <node id="82603a2ec11c4944" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="5ceea07f38224066" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="79779307">
                                <node id="b5bc25ff11ab4875" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="add6f91eaff74c5d" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.790-02:30" name="Phones" uuid="b471eebe-c2c7-4da0-a189-5333a949406e">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\v</param>
                                    <param id="includeAligned">false</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="f840f761ce7f431d" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.794-02:30" name="Phones" uuid="2ddee64c-cf77-414b-acfb-bb03dd8a444a">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\v</param>
                                    <param id="includeAligned">false</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="c0f12ce135cc4e81" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="c558f5ec1ec4b7a" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="6be5d13a088c4961" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="a3844ee5d5dc40cb" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="a06941ec453c484d" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="d24ca7585aed4131" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="32b7d81fc5894ee0" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Vowel Inventory</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="32b7d81fc5894ee0" destField="data" source="d24ca7585aed4131" sourceField="table"/>
                        <link dest="c558f5ec1ec4b7a" destField="project" source="f840f761ce7f431d" sourceField="project"/>
                        <link dest="d24ca7585aed4131" destField="table" source="a06941ec453c484d" sourceField="table"/>
                        <link dest="c0f12ce135cc4e81" destField="project" source="add6f91eaff74c5d" sourceField="project"/>
                        <link dest="a3844ee5d5dc40cb" destField="table" source="c558f5ec1ec4b7a" sourceField="table"/>
                        <link dest="add6f91eaff74c5d" destField="sessions" source="5ceea07f38224066" sourceField="obj"/>
                        <link dest="a06941ec453c484d" destField="table2" source="a3844ee5d5dc40cb" sourceField="table"/>
                        <link dest="6be5d13a088c4961" destField="table" source="c0f12ce135cc4e81" sourceField="table"/>
                        <link dest="f840f761ce7f431d" destField="project" source="82603a2ec11c4944" sourceField="obj"/>
                        <link dest="c558f5ec1ec4b7a" destField="results" source="f840f761ce7f431d" sourceField="results"/>
                        <link dest="add6f91eaff74c5d" destField="project" source="82603a2ec11c4944" sourceField="obj"/>
                        <link dest="f840f761ce7f431d" destField="sessions" source="5ceea07f38224066" sourceField="obj"/>
                        <link dest="c0f12ce135cc4e81" destField="results" source="add6f91eaff74c5d" sourceField="results"/>
                        <link dest="a06941ec453c484d" destField="table1" source="6be5d13a088c4961" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="5ceea07f38224066"/>
                    <ogcn:published_input field="obj" name="obj1" ref="82603a2ec11c4944"/>
                    <extensions>
                        <oga:meta x="290" y="27"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="49f7755f29704dae" name="Vowel Inventory (word-initial)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="1bf28381">
                        <node id="e552cf0597e341db" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="2358e68330d249d9" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="2be19689">
                                <node id="6986e5a045324259" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="6c54f32ffd6e4232" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.799-02:30" name="Phones" uuid="d3851fe1-04a6-4a69-884c-0e9073883ca0">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">^\s?(X=\c)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="19cefcd380c44b87" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.803-02:30" name="Phones" uuid="ece03c70-9b67-4048-9499-df53fc3a8185">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">^\s?(X=\c)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="51989dc0913948ab" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="650244eafeb94e48" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="4248ce08c4cf4af8" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="a2d7cd76d8df4d7a" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="b6214396ecf14928" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="287fb683b9524567" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="c0715f6c77e54449" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Vowel Inventory (word-initial)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="c0715f6c77e54449" destField="data" source="287fb683b9524567" sourceField="table"/>
                        <link dest="650244eafeb94e48" destField="project" source="19cefcd380c44b87" sourceField="project"/>
                        <link dest="287fb683b9524567" destField="table" source="b6214396ecf14928" sourceField="table"/>
                        <link dest="51989dc0913948ab" destField="project" source="6c54f32ffd6e4232" sourceField="project"/>
                        <link dest="a2d7cd76d8df4d7a" destField="table" source="650244eafeb94e48" sourceField="table"/>
                        <link dest="6c54f32ffd6e4232" destField="sessions" source="2358e68330d249d9" sourceField="obj"/>
                        <link dest="b6214396ecf14928" destField="table2" source="a2d7cd76d8df4d7a" sourceField="table"/>
                        <link dest="4248ce08c4cf4af8" destField="table" source="51989dc0913948ab" sourceField="table"/>
                        <link dest="19cefcd380c44b87" destField="project" source="e552cf0597e341db" sourceField="obj"/>
                        <link dest="650244eafeb94e48" destField="results" source="19cefcd380c44b87" sourceField="results"/>
                        <link dest="6c54f32ffd6e4232" destField="project" source="e552cf0597e341db" sourceField="obj"/>
                        <link dest="19cefcd380c44b87" destField="sessions" source="2358e68330d249d9" sourceField="obj"/>
                        <link dest="51989dc0913948ab" destField="results" source="6c54f32ffd6e4232" sourceField="results"/>
                        <link dest="b6214396ecf14928" destField="table1" source="4248ce08c4cf4af8" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="2358e68330d249d9"/>
                    <ogcn:published_input field="obj" name="obj1" ref="e552cf0597e341db"/>
                    <extensions>
                        <oga:meta x="290" y="148"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="8bf17ddcfc9a4327" name="Vowel Inventory (word-medial)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="280bd49c">
                        <node id="751cf47c14be449b" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="8ea7b899586945e7" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="20f2dd71">
                                <node id="16f12b0fc1934324" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="1cb33819d18444b7" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.808-02:30" name="Phones" uuid="f3755ab7-0865-4b30-ad13-0ca62489ccc7">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">(?&lt;\w\s?)\v(?&gt;\s?\w)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="1c26028193a14a4b" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.812-02:30" name="Phones" uuid="2565c48a-f97b-4afb-bf6f-2d53361af194">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">(?&lt;\w\s?)\v(?&gt;\s?\w)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="d3e54f9e9e6a4c99" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="d5b80bb4c8274000" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="34832599a2c646f1" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="5fd36e75fc3a464a" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="7bbc99e60ffe4313" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="dc32c7239ba34724" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="8d46245481994f4f" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Vowel Inventory (word-medial)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="8d46245481994f4f" destField="data" source="dc32c7239ba34724" sourceField="table"/>
                        <link dest="d5b80bb4c8274000" destField="project" source="1c26028193a14a4b" sourceField="project"/>
                        <link dest="dc32c7239ba34724" destField="table" source="7bbc99e60ffe4313" sourceField="table"/>
                        <link dest="d3e54f9e9e6a4c99" destField="project" source="1cb33819d18444b7" sourceField="project"/>
                        <link dest="5fd36e75fc3a464a" destField="table" source="d5b80bb4c8274000" sourceField="table"/>
                        <link dest="1cb33819d18444b7" destField="sessions" source="8ea7b899586945e7" sourceField="obj"/>
                        <link dest="7bbc99e60ffe4313" destField="table2" source="5fd36e75fc3a464a" sourceField="table"/>
                        <link dest="34832599a2c646f1" destField="table" source="d3e54f9e9e6a4c99" sourceField="table"/>
                        <link dest="1c26028193a14a4b" destField="project" source="751cf47c14be449b" sourceField="obj"/>
                        <link dest="d5b80bb4c8274000" destField="results" source="1c26028193a14a4b" sourceField="results"/>
                        <link dest="1cb33819d18444b7" destField="project" source="751cf47c14be449b" sourceField="obj"/>
                        <link dest="1c26028193a14a4b" destField="sessions" source="8ea7b899586945e7" sourceField="obj"/>
                        <link dest="d3e54f9e9e6a4c99" destField="results" source="1cb33819d18444b7" sourceField="results"/>
                        <link dest="7bbc99e60ffe4313" destField="table1" source="34832599a2c646f1" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="8ea7b899586945e7"/>
                    <ogcn:published_input field="obj" name="obj1" ref="751cf47c14be449b"/>
                    <extensions>
                        <oga:meta x="290" y="269"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="3fb1dbb4319f42dc" name="Vowel Inventory (word-final)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="1bcd1fab">
                        <node id="b7e8f05ba74844b6" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="be404acb8eb45c2" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="38f44e17">
                                <node id="1191f01412ac4a40" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="c6ad603448ed4050" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.817-02:30" name="Phones" uuid="ebd8c0fa-e1cb-4dd0-adc0-5a6c276102a0">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\v$</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="23b3d7adf80749fb" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.821-02:30" name="Phones" uuid="a100f619-6d4d-47ea-9c37-84e70affe3c6">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\v$</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="6c06455ff2644732" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="b22f2797c0044e7a" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="4c0a203da8db4d55" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="ca54e04f4d9d4b80" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="625bfd48f1d94dac" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="6040267ed9764d12" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="d30d831fce6b40b6" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Vowel Inventory (word-final)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="d30d831fce6b40b6" destField="data" source="6040267ed9764d12" sourceField="table"/>
                        <link dest="b22f2797c0044e7a" destField="project" source="23b3d7adf80749fb" sourceField="project"/>
                        <link dest="6040267ed9764d12" destField="table" source="625bfd48f1d94dac" sourceField="table"/>
                        <link dest="6c06455ff2644732" destField="project" source="c6ad603448ed4050" sourceField="project"/>
                        <link dest="ca54e04f4d9d4b80" destField="table" source="b22f2797c0044e7a" sourceField="table"/>
                        <link dest="c6ad603448ed4050" destField="sessions" source="be404acb8eb45c2" sourceField="obj"/>
                        <link dest="625bfd48f1d94dac" destField="table2" source="ca54e04f4d9d4b80" sourceField="table"/>
                        <link dest="4c0a203da8db4d55" destField="table" source="6c06455ff2644732" sourceField="table"/>
                        <link dest="23b3d7adf80749fb" destField="project" source="b7e8f05ba74844b6" sourceField="obj"/>
                        <link dest="b22f2797c0044e7a" destField="results" source="23b3d7adf80749fb" sourceField="results"/>
                        <link dest="c6ad603448ed4050" destField="project" source="b7e8f05ba74844b6" sourceField="obj"/>
                        <link dest="23b3d7adf80749fb" destField="sessions" source="be404acb8eb45c2" sourceField="obj"/>
                        <link dest="6c06455ff2644732" destField="results" source="c6ad603448ed4050" sourceField="results"/>
                        <link dest="625bfd48f1d94dac" destField="table1" source="4c0a203da8db4d55" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="be404acb8eb45c2"/>
                    <ogcn:published_input field="obj" name="obj1" ref="b7e8f05ba74844b6"/>
                    <extensions>
                        <oga:meta x="290" y="390"/>
                    </extensions>
                </ogcn:macro>
                <link dest="5c3fd98afe134b6a" destField="obj1" source="c3b6db3b05134970" sourceField="obj"/>
                <link dest="5c3fd98afe134b6a" destField="obj" source="e3c71950e2d64f4d" sourceField="obj"/>
                <link dest="49f7755f29704dae" destField="obj1" source="c3b6db3b05134970" sourceField="obj"/>
                <link dest="49f7755f29704dae" destField="obj" source="e3c71950e2d64f4d" sourceField="obj"/>
                <link dest="8bf17ddcfc9a4327" destField="obj1" source="c3b6db3b05134970" sourceField="obj"/>
                <link dest="8bf17ddcfc9a4327" destField="obj" source="e3c71950e2d64f4d" sourceField="obj"/>
                <link dest="3fb1dbb4319f42dc" destField="obj1" source="c3b6db3b05134970" sourceField="obj"/>
                <link dest="3fb1dbb4319f42dc" destField="obj" source="e3c71950e2d64f4d" sourceField="obj"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="c3b6db3b05134970"/>
            <ogcn:published_input field="obj" name="obj1" ref="e3c71950e2d64f4d"/>
            <extensions>
                <oga:meta x="471" y="209"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="7581e58a" name="Cluster Inventory" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="7d089d6f">
                <node id="41d7125261394fe2" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="37" y="29"/>
                    </extensions>
                </node>
                <node id="e16f69f9a254314" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="92" y="240"/>
                    </extensions>
                </node>
                <ogcn:macro id="22b2c05954ca440a" name="Cluster Inventory" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="425bdbd1">
                        <node id="805bd60f970d4495" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="3d5cc03c86de42d5" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="3f9f9cd6">
                                <node id="3e43d010be814e1e" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="f4bfd2c43c9d40c2" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.826-02:30" name="Phones" uuid="a9246d9f-9f71-446e-acd7-f06261c4f200">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\c&lt;2,&gt;</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="1e74a51fd96a46ab" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.830-02:30" name="Phones" uuid="cfca0b06-da3a-45d5-b19f-fed5176460d3">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">\c&lt;2,&gt;</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                    <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="fa65bb8c6fb74ee8" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="b9bf1bee9bf841c7" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="e8152e14abef4af3" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="72e86d50e6ad4a01" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="4a4f034b777c4048" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="57b601b4cb524801" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="fce8e7ed257845aa" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Cluster Inventory</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="fce8e7ed257845aa" destField="data" source="57b601b4cb524801" sourceField="table"/>
                        <link dest="b9bf1bee9bf841c7" destField="project" source="1e74a51fd96a46ab" sourceField="project"/>
                        <link dest="57b601b4cb524801" destField="table" source="4a4f034b777c4048" sourceField="table"/>
                        <link dest="fa65bb8c6fb74ee8" destField="project" source="f4bfd2c43c9d40c2" sourceField="project"/>
                        <link dest="72e86d50e6ad4a01" destField="table" source="b9bf1bee9bf841c7" sourceField="table"/>
                        <link dest="f4bfd2c43c9d40c2" destField="sessions" source="3d5cc03c86de42d5" sourceField="obj"/>
                        <link dest="4a4f034b777c4048" destField="table2" source="72e86d50e6ad4a01" sourceField="table"/>
                        <link dest="e8152e14abef4af3" destField="table" source="fa65bb8c6fb74ee8" sourceField="table"/>
                        <link dest="1e74a51fd96a46ab" destField="project" source="805bd60f970d4495" sourceField="obj"/>
                        <link dest="b9bf1bee9bf841c7" destField="results" source="1e74a51fd96a46ab" sourceField="results"/>
                        <link dest="f4bfd2c43c9d40c2" destField="project" source="805bd60f970d4495" sourceField="obj"/>
                        <link dest="1e74a51fd96a46ab" destField="sessions" source="3d5cc03c86de42d5" sourceField="obj"/>
                        <link dest="fa65bb8c6fb74ee8" destField="results" source="f4bfd2c43c9d40c2" sourceField="results"/>
                        <link dest="4a4f034b777c4048" destField="table1" source="e8152e14abef4af3" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="3d5cc03c86de42d5"/>
                    <ogcn:published_input field="obj" name="obj1" ref="805bd60f970d4495"/>
                    <extensions>
                        <oga:meta x="309" y="35"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="a37fe193de164d3e" name="Cluster Inventory (word-initial)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="3c9802c">
                        <node id="be1e38fcf3be4b5e" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="bc3675c2e596435b" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="14d8c1b6">
                                <node id="2619c31bd70a40b8" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="30b40dce50bc4d56" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.836-02:30" name="Phones" uuid="1f4bc2b0-f12b-4b9d-88f0-916e3b2e33ca">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">^\s?(X=\c&lt;2,&gt;)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="99b26f1e8b7d40ef" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.840-02:30" name="Phones" uuid="4c04298a-850a-4332-bbb2-57a3832d4349">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">^\s?(X=\c&lt;2,&gt;)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="c8f9ee1bfec542c3" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="198ebcd5bb644074" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="894d182cfb7c4d11" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="427963ab244942f5" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="c7f46b3e2134a8f" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="b62656d129ba4ed6" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="150e18a0073c4d57" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Cluster Inventory</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="150e18a0073c4d57" destField="data" source="b62656d129ba4ed6" sourceField="table"/>
                        <link dest="198ebcd5bb644074" destField="project" source="99b26f1e8b7d40ef" sourceField="project"/>
                        <link dest="b62656d129ba4ed6" destField="table" source="c7f46b3e2134a8f" sourceField="table"/>
                        <link dest="c8f9ee1bfec542c3" destField="project" source="30b40dce50bc4d56" sourceField="project"/>
                        <link dest="427963ab244942f5" destField="table" source="198ebcd5bb644074" sourceField="table"/>
                        <link dest="30b40dce50bc4d56" destField="sessions" source="bc3675c2e596435b" sourceField="obj"/>
                        <link dest="c7f46b3e2134a8f" destField="table2" source="427963ab244942f5" sourceField="table"/>
                        <link dest="894d182cfb7c4d11" destField="table" source="c8f9ee1bfec542c3" sourceField="table"/>
                        <link dest="99b26f1e8b7d40ef" destField="project" source="be1e38fcf3be4b5e" sourceField="obj"/>
                        <link dest="198ebcd5bb644074" destField="results" source="99b26f1e8b7d40ef" sourceField="results"/>
                        <link dest="30b40dce50bc4d56" destField="project" source="be1e38fcf3be4b5e" sourceField="obj"/>
                        <link dest="99b26f1e8b7d40ef" destField="sessions" source="bc3675c2e596435b" sourceField="obj"/>
                        <link dest="c8f9ee1bfec542c3" destField="results" source="30b40dce50bc4d56" sourceField="results"/>
                        <link dest="c7f46b3e2134a8f" destField="table1" source="894d182cfb7c4d11" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="bc3675c2e596435b"/>
                    <ogcn:published_input field="obj" name="obj1" ref="be1e38fcf3be4b5e"/>
                    <extensions>
                        <oga:meta x="309" y="156"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="fab27b204b614e2a" name="Cluster Inventory (word-medial)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="5293b352">
                        <node id="bb6107d242624c7f" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="ab1cc50bd6744dcf" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="4e1a7bee">
                                <node id="478f7a4deb474489" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="75e4720e43a74b82" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.845-02:30" name="Phones" uuid="d4304ca3-9d0a-4266-96a6-35a36be5df02">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">(?&lt;\w\s?)\c&lt;2,&gt;+(?&gt;\s?\w)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="cfdb79a560d8460b" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.849-02:30" name="Phones" uuid="a643d278-0c4b-4922-8cec-2460ce7066d4">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">(?&lt;\w\s?)\c&lt;2,&gt;+(?&gt;\s?\w)</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="7f07830f7c924339" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="3e1afa6d36554d57" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="6ed1b38e70a9480f" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="d36d9b7744694d39" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="4e7a5d54bcb4c35" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="b507063199604297" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="5e48153d1b1c4d22" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Cluster Inventory (word-medial)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="5e48153d1b1c4d22" destField="data" source="b507063199604297" sourceField="table"/>
                        <link dest="3e1afa6d36554d57" destField="project" source="cfdb79a560d8460b" sourceField="project"/>
                        <link dest="b507063199604297" destField="table" source="4e7a5d54bcb4c35" sourceField="table"/>
                        <link dest="7f07830f7c924339" destField="project" source="75e4720e43a74b82" sourceField="project"/>
                        <link dest="d36d9b7744694d39" destField="table" source="3e1afa6d36554d57" sourceField="table"/>
                        <link dest="75e4720e43a74b82" destField="sessions" source="ab1cc50bd6744dcf" sourceField="obj"/>
                        <link dest="4e7a5d54bcb4c35" destField="table2" source="d36d9b7744694d39" sourceField="table"/>
                        <link dest="6ed1b38e70a9480f" destField="table" source="7f07830f7c924339" sourceField="table"/>
                        <link dest="cfdb79a560d8460b" destField="project" source="bb6107d242624c7f" sourceField="obj"/>
                        <link dest="3e1afa6d36554d57" destField="results" source="cfdb79a560d8460b" sourceField="results"/>
                        <link dest="75e4720e43a74b82" destField="project" source="bb6107d242624c7f" sourceField="obj"/>
                        <link dest="cfdb79a560d8460b" destField="sessions" source="ab1cc50bd6744dcf" sourceField="obj"/>
                        <link dest="7f07830f7c924339" destField="results" source="75e4720e43a74b82" sourceField="results"/>
                        <link dest="4e7a5d54bcb4c35" destField="table1" source="6ed1b38e70a9480f" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="ab1cc50bd6744dcf"/>
                    <ogcn:published_input field="obj" name="obj1" ref="bb6107d242624c7f"/>
                    <extensions>
                        <oga:meta x="309" y="277"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="44741264c1404331" name="Cluster Inventory (word-final)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="42ed1bd9">
                        <node id="e6b8611338884d08" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="15"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="8ce37b6f3c1845b6" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                            <graph id="18cc55c0">
                                <node id="df5a9ec16374eac" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                        </oga:settings>
                                    </extensions>
                                </node>
                            </graph>
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                </oga:settings>
                                <oga:meta x="15" y="297"/>
                            </extensions>
                        </ogcn:macro>
                        <opqry:queryNode id="e7e1bee75fee4074" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.853-02:30" name="Phones" uuid="22401c56-0bea-4df6-bb55-42bb234f8ca4">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">(X=\c&lt;2,&gt;)$</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Target</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="15"/>
                            </extensions>
                        </opqry:queryNode>
                        <opqry:queryNode id="dc55f48236cb4c75" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                            <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.857-02:30" name="Phones" uuid="2b040373-c935-4720-b8d6-1e37e4eabad2">
                                <script>
                                    <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                    <param id="filters.primary.filter">(X=\c&lt;2,&gt;)$</param>
                                    <param id="filters.word.searchByWord">true</param>
                                    <param id="includeAligned">false</param>
                                    <param id="searchTier">IPA Actual</param>
                                </script>
                            </qry:query>
                            <extensions>
                                <oga:settings/>
                                <oga:meta x="260" y="156"/>
                            </extensions>
                        </opqry:queryNode>
                        <node id="5883c51039334232" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="490" y="15"/>
                            </extensions>
                        </node>
                        <node id="178e5bdbc1f7414e" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                    <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="488" y="156"/>
                            </extensions>
                        </node>
                        <node id="3529c3ada934495d" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="665" y="15"/>
                            </extensions>
                        </node>
                        <node id="6c301932c7364d99" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                            <extensions>
                                <opqry:inventoryoptions>
                                    <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="true"/>
                                    <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="true"/>
                                </opqry:inventoryoptions>
                                <oga:settings/>
                                <oga:meta x="663" y="156"/>
                            </extensions>
                        </node>
                        <node id="ec2e25630d524753" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                    <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                    <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                    <oga:property key="table1ColumnPrefix"/>
                                    <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                    <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                    <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                    <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                    <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                    <oga:property key="table2ColumnPrefix"/>
                                    <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                </oga:settings>
                                <oga:meta x="840" y="15"/>
                            </extensions>
                        </node>
                        <node id="d3768a7511a34f47" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                            <extensions>
                                <opqry:sortoptions>
                                    <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                </opqry:sortoptions>
                                <oga:settings/>
                                <oga:meta x="1015" y="15"/>
                            </extensions>
                        </node>
                        <node id="2051ccd1ec2a4c28" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                </oga:settings>
                                <oga:meta x="1190" y="15">
                                    <oga:default for="buffer" type="java.lang.String">Cluster Inventory (word-final)</oga:default>
                                </oga:meta>
                            </extensions>
                        </node>
                        <link dest="2051ccd1ec2a4c28" destField="data" source="d3768a7511a34f47" sourceField="table"/>
                        <link dest="178e5bdbc1f7414e" destField="project" source="dc55f48236cb4c75" sourceField="project"/>
                        <link dest="d3768a7511a34f47" destField="table" source="ec2e25630d524753" sourceField="table"/>
                        <link dest="5883c51039334232" destField="project" source="e7e1bee75fee4074" sourceField="project"/>
                        <link dest="6c301932c7364d99" destField="table" source="178e5bdbc1f7414e" sourceField="table"/>
                        <link dest="e7e1bee75fee4074" destField="sessions" source="8ce37b6f3c1845b6" sourceField="obj"/>
                        <link dest="ec2e25630d524753" destField="table2" source="6c301932c7364d99" sourceField="table"/>
                        <link dest="3529c3ada934495d" destField="table" source="5883c51039334232" sourceField="table"/>
                        <link dest="dc55f48236cb4c75" destField="project" source="e6b8611338884d08" sourceField="obj"/>
                        <link dest="178e5bdbc1f7414e" destField="results" source="dc55f48236cb4c75" sourceField="results"/>
                        <link dest="e7e1bee75fee4074" destField="project" source="e6b8611338884d08" sourceField="obj"/>
                        <link dest="dc55f48236cb4c75" destField="sessions" source="8ce37b6f3c1845b6" sourceField="obj"/>
                        <link dest="5883c51039334232" destField="results" source="e7e1bee75fee4074" sourceField="results"/>
                        <link dest="ec2e25630d524753" destField="table1" source="3529c3ada934495d" sourceField="table"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="8ce37b6f3c1845b6"/>
                    <ogcn:published_input field="obj" name="obj1" ref="e6b8611338884d08"/>
                    <extensions>
                        <oga:meta x="309" y="398"/>
                    </extensions>
                </ogcn:macro>
                <link dest="22b2c05954ca440a" destField="obj1" source="41d7125261394fe2" sourceField="obj"/>
                <link dest="22b2c05954ca440a" destField="obj" source="e16f69f9a254314" sourceField="obj"/>
                <link dest="a37fe193de164d3e" destField="obj1" source="41d7125261394fe2" sourceField="obj"/>
                <link dest="a37fe193de164d3e" destField="obj" source="e16f69f9a254314" sourceField="obj"/>
                <link dest="fab27b204b614e2a" destField="obj" source="e16f69f9a254314" sourceField="obj"/>
                <link dest="44741264c1404331" destField="obj1" source="41d7125261394fe2" sourceField="obj"/>
                <link dest="44741264c1404331" destField="obj" source="e16f69f9a254314" sourceField="obj"/>
                <link dest="fab27b204b614e2a" destField="obj1" source="41d7125261394fe2" sourceField="obj"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="41d7125261394fe2"/>
            <ogcn:published_input field="obj" name="obj1" ref="e16f69f9a254314"/>
            <extensions>
                <oga:meta x="299" y="340"/>
            </extensions>
        </ogcn:macro>
        <ogcn:macro id="46ea9dea" name="Onsets" type="ca.gedge.opgraph.nodes.general.MacroNode">
            <graph id="1062e5ca">
                <node id="890a8b6683d74add" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                        </oga:settings>
                        <oga:meta x="35" y="29"/>
                    </extensions>
                </node>
                <node id="76dd7564ea9e4303" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                    <extensions>
                        <oga:settings>
                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                            <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                        </oga:settings>
                        <oga:meta x="92" y="240"/>
                    </extensions>
                </node>
                <ogcn:macro id="1e0c45c41a9f41ad" name="Singleton Onsets" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="47b1f3b5">
                        <node id="4c8da957f76e4188" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                    <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="37" y="29"/>
                            </extensions>
                        </node>
                        <node id="8a2cb8e96f7e41d8" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                                </oga:settings>
                                <oga:meta x="92" y="240"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="181d3d8e591a46b7" name="Singleton Onsets" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="601e6643">
                                <node id="b159cd0b34c84a3a" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="7dba53480faf4d9b" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                                    <graph id="3881816f">
                                        <node id="8bcbfd08d6c74f77" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                                </oga:settings>
                                            </extensions>
                                        </node>
                                    </graph>
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="297"/>
                                    </extensions>
                                </ogcn:macro>
                                <opqry:queryNode id="724638d893e24fc3" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.861-02:30" name="Phones" uuid="f97f1537-afe2-4979-9652-faa5167ef7fe">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">^(?&lt;\s?\c:L*)\c:o(?&gt;\w:sctype("-Onset"))</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Target</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="15"/>
                                    </extensions>
                                </opqry:queryNode>
                                <opqry:queryNode id="4d825fd0e0714afd" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.865-02:30" name="Phones" uuid="191940db-7107-4cf6-834a-72ee3c32cf0e">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">^(?&lt;\s?\c:L*)\c:o(?&gt;\w:sctype("-Onset"))</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Actual</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="156"/>
                                    </extensions>
                                </opqry:queryNode>
                                <node id="8c5b96f4104840d0" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="490" y="15"/>
                                    </extensions>
                                </node>
                                <node id="40029d04a8ac4884" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="488" y="156"/>
                                    </extensions>
                                </node>
                                <node id="f99e334c0ddc4644" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="665" y="15"/>
                                    </extensions>
                                </node>
                                <node id="a6bb921357514456" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="663" y="156"/>
                                    </extensions>
                                </node>
                                <node id="1d755b1b4cb74854" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                            <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                            <oga:property key="table1ColumnPrefix"/>
                                            <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                            <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnPrefix"/>
                                            <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="840" y="15"/>
                                    </extensions>
                                </node>
                                <node id="6ede04a91b574381" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="1015" y="15"/>
                                    </extensions>
                                </node>
                                <node id="7d542e98e3d34206" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="1190" y="15">
                                            <oga:default for="buffer" type="java.lang.String">Singleton Onsets</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="7d542e98e3d34206" destField="data" source="6ede04a91b574381" sourceField="table"/>
                                <link dest="40029d04a8ac4884" destField="project" source="4d825fd0e0714afd" sourceField="project"/>
                                <link dest="6ede04a91b574381" destField="table" source="1d755b1b4cb74854" sourceField="table"/>
                                <link dest="8c5b96f4104840d0" destField="project" source="724638d893e24fc3" sourceField="project"/>
                                <link dest="a6bb921357514456" destField="table" source="40029d04a8ac4884" sourceField="table"/>
                                <link dest="724638d893e24fc3" destField="sessions" source="7dba53480faf4d9b" sourceField="obj"/>
                                <link dest="1d755b1b4cb74854" destField="table2" source="a6bb921357514456" sourceField="table"/>
                                <link dest="f99e334c0ddc4644" destField="table" source="8c5b96f4104840d0" sourceField="table"/>
                                <link dest="4d825fd0e0714afd" destField="project" source="b159cd0b34c84a3a" sourceField="obj"/>
                                <link dest="40029d04a8ac4884" destField="results" source="4d825fd0e0714afd" sourceField="results"/>
                                <link dest="724638d893e24fc3" destField="project" source="b159cd0b34c84a3a" sourceField="obj"/>
                                <link dest="4d825fd0e0714afd" destField="sessions" source="7dba53480faf4d9b" sourceField="obj"/>
                                <link dest="8c5b96f4104840d0" destField="results" source="724638d893e24fc3" sourceField="results"/>
                                <link dest="1d755b1b4cb74854" destField="table1" source="f99e334c0ddc4644" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="obj" name="obj" ref="7dba53480faf4d9b"/>
                            <ogcn:published_input field="obj" name="obj1" ref="b159cd0b34c84a3a"/>
                            <extensions>
                                <oga:meta x="309" y="35"/>
                            </extensions>
                        </ogcn:macro>
                        <ogcn:macro id="c6cf5f194a9b4d7d" name="Singleton Onsets (stressed)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="286e09a1">
                                <node id="cd7344c0f084472b" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="7dfd810f625e44b6" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                                    <graph id="28511f3f">
                                        <node id="12b72685c6654527" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                                </oga:settings>
                                            </extensions>
                                        </node>
                                    </graph>
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="297"/>
                                    </extensions>
                                </ogcn:macro>
                                <opqry:queryNode id="3f8c8e3b8fd24968" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.870-02:30" name="Phones" uuid="6650832a-750e-4d9b-9445-bc5ad561641c">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">^(?&lt;\s?\c:L*)\c:o(?&gt;\w:sctype("-Onset"))</param>
                                            <param id="filters.syllable.sNone">false</param>
                                            <param id="filters.syllable.sPrimary">true</param>
                                            <param id="filters.syllable.sSecondary">true</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Target</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="15"/>
                                    </extensions>
                                </opqry:queryNode>
                                <opqry:queryNode id="96d7237651b4596" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.874-02:30" name="Phones" uuid="e6aef6af-bcd2-490d-a533-c1670d68f034">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">^(?&lt;\s?\c:L*)\c:o(?&gt;\w:sctype("-Onset"))</param>
                                            <param id="filters.syllable.sNone">false</param>
                                            <param id="filters.syllable.sPrimary">true</param>
                                            <param id="filters.syllable.sSecondary">true</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Actual</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="156"/>
                                    </extensions>
                                </opqry:queryNode>
                                <node id="c5101a19cb044b8a" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="490" y="15"/>
                                    </extensions>
                                </node>
                                <node id="8a41711c8a3c42fc" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="488" y="156"/>
                                    </extensions>
                                </node>
                                <node id="b9dab33537b54cc6" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="665" y="15"/>
                                    </extensions>
                                </node>
                                <node id="8b619390276d4908" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="663" y="156"/>
                                    </extensions>
                                </node>
                                <node id="78ac3c310a4f4d14" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                            <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                            <oga:property key="table1ColumnPrefix"/>
                                            <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                            <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnPrefix"/>
                                            <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="840" y="15"/>
                                    </extensions>
                                </node>
                                <node id="7cda2fbe4b764b96" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="1015" y="15"/>
                                    </extensions>
                                </node>
                                <node id="4e21ab43cba34706" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="1190" y="15">
                                            <oga:default for="buffer" type="java.lang.String">Singleton Onsets (stressed)</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="4e21ab43cba34706" destField="data" source="7cda2fbe4b764b96" sourceField="table"/>
                                <link dest="8a41711c8a3c42fc" destField="project" source="96d7237651b4596" sourceField="project"/>
                                <link dest="7cda2fbe4b764b96" destField="table" source="78ac3c310a4f4d14" sourceField="table"/>
                                <link dest="c5101a19cb044b8a" destField="project" source="3f8c8e3b8fd24968" sourceField="project"/>
                                <link dest="8b619390276d4908" destField="table" source="8a41711c8a3c42fc" sourceField="table"/>
                                <link dest="3f8c8e3b8fd24968" destField="sessions" source="7dfd810f625e44b6" sourceField="obj"/>
                                <link dest="78ac3c310a4f4d14" destField="table2" source="8b619390276d4908" sourceField="table"/>
                                <link dest="b9dab33537b54cc6" destField="table" source="c5101a19cb044b8a" sourceField="table"/>
                                <link dest="96d7237651b4596" destField="project" source="cd7344c0f084472b" sourceField="obj"/>
                                <link dest="8a41711c8a3c42fc" destField="results" source="96d7237651b4596" sourceField="results"/>
                                <link dest="3f8c8e3b8fd24968" destField="project" source="cd7344c0f084472b" sourceField="obj"/>
                                <link dest="96d7237651b4596" destField="sessions" source="7dfd810f625e44b6" sourceField="obj"/>
                                <link dest="c5101a19cb044b8a" destField="results" source="3f8c8e3b8fd24968" sourceField="results"/>
                                <link dest="78ac3c310a4f4d14" destField="table1" source="b9dab33537b54cc6" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="obj" name="obj" ref="7dfd810f625e44b6"/>
                            <ogcn:published_input field="obj" name="obj1" ref="cd7344c0f084472b"/>
                            <extensions>
                                <oga:meta x="309" y="156"/>
                            </extensions>
                        </ogcn:macro>
                        <ogcn:macro id="49253badd3b4a0b" name="Singleton Onsets (unstressed)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="1fbfc46c">
                                <node id="ff178cceeaa14956" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="11b07d4ecd494ceb" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                                    <graph id="36acba2b">
                                        <node id="69d6da9299e94529" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                                </oga:settings>
                                            </extensions>
                                        </node>
                                    </graph>
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="297"/>
                                    </extensions>
                                </ogcn:macro>
                                <opqry:queryNode id="e412826b50b445da" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.879-02:30" name="Phones" uuid="9d744053-ce69-4546-ab3f-6fb9ac0fd16d">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">^(?&lt;\s?\c:L*)\c:o(?&gt;\w:sctype("-Onset"))</param>
                                            <param id="filters.syllable.sNone">true</param>
                                            <param id="filters.syllable.sPrimary">false</param>
                                            <param id="filters.syllable.sSecondary">false</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Target</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="15"/>
                                    </extensions>
                                </opqry:queryNode>
                                <opqry:queryNode id="90ee58c03d4145f4" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.882-02:30" name="Phones" uuid="734f7d9b-c5b4-45a8-a510-c0da053e929e">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">^(?&lt;\s?\c:L*)\c:o(?&gt;\w:sctype("-Onset"))</param>
                                            <param id="filters.syllable.sNone">true</param>
                                            <param id="filters.syllable.sPrimary">false</param>
                                            <param id="filters.syllable.sSecondary">false</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Actual</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="156"/>
                                    </extensions>
                                </opqry:queryNode>
                                <node id="be80462751024891" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="490" y="15"/>
                                    </extensions>
                                </node>
                                <node id="8d9896775c064a11" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="488" y="156"/>
                                    </extensions>
                                </node>
                                <node id="8c3c4b0331444961" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="665" y="15"/>
                                    </extensions>
                                </node>
                                <node id="29f7ddaa45a4e9b" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="663" y="156"/>
                                    </extensions>
                                </node>
                                <node id="5b0727314b07432d" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                            <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                            <oga:property key="table1ColumnPrefix"/>
                                            <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                            <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnPrefix"/>
                                            <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="840" y="15"/>
                                    </extensions>
                                </node>
                                <node id="3a724659a1e24ed2" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="1015" y="15"/>
                                    </extensions>
                                </node>
                                <node id="ad17bcd8d8994745" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="1190" y="15">
                                            <oga:default for="buffer" type="java.lang.String">Singleton Onsets (unstressed)</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="ad17bcd8d8994745" destField="data" source="3a724659a1e24ed2" sourceField="table"/>
                                <link dest="8d9896775c064a11" destField="project" source="90ee58c03d4145f4" sourceField="project"/>
                                <link dest="3a724659a1e24ed2" destField="table" source="5b0727314b07432d" sourceField="table"/>
                                <link dest="be80462751024891" destField="project" source="e412826b50b445da" sourceField="project"/>
                                <link dest="29f7ddaa45a4e9b" destField="table" source="8d9896775c064a11" sourceField="table"/>
                                <link dest="e412826b50b445da" destField="sessions" source="11b07d4ecd494ceb" sourceField="obj"/>
                                <link dest="5b0727314b07432d" destField="table2" source="29f7ddaa45a4e9b" sourceField="table"/>
                                <link dest="8c3c4b0331444961" destField="table" source="be80462751024891" sourceField="table"/>
                                <link dest="90ee58c03d4145f4" destField="project" source="ff178cceeaa14956" sourceField="obj"/>
                                <link dest="8d9896775c064a11" destField="results" source="90ee58c03d4145f4" sourceField="results"/>
                                <link dest="e412826b50b445da" destField="project" source="ff178cceeaa14956" sourceField="obj"/>
                                <link dest="90ee58c03d4145f4" destField="sessions" source="11b07d4ecd494ceb" sourceField="obj"/>
                                <link dest="be80462751024891" destField="results" source="e412826b50b445da" sourceField="results"/>
                                <link dest="5b0727314b07432d" destField="table1" source="8c3c4b0331444961" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="obj" name="obj" ref="11b07d4ecd494ceb"/>
                            <ogcn:published_input field="obj" name="obj1" ref="ff178cceeaa14956"/>
                            <extensions>
                                <oga:meta x="309" y="277"/>
                            </extensions>
                        </ogcn:macro>
                        <link dest="181d3d8e591a46b7" destField="obj1" source="4c8da957f76e4188" sourceField="obj"/>
                        <link dest="181d3d8e591a46b7" destField="obj" source="8a2cb8e96f7e41d8" sourceField="obj"/>
                        <link dest="c6cf5f194a9b4d7d" destField="obj1" source="4c8da957f76e4188" sourceField="obj"/>
                        <link dest="c6cf5f194a9b4d7d" destField="obj" source="8a2cb8e96f7e41d8" sourceField="obj"/>
                        <link dest="49253badd3b4a0b" destField="obj1" source="4c8da957f76e4188" sourceField="obj"/>
                        <link dest="49253badd3b4a0b" destField="obj" source="8a2cb8e96f7e41d8" sourceField="obj"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="4c8da957f76e4188"/>
                    <ogcn:published_input field="obj" name="obj1" ref="8a2cb8e96f7e41d8"/>
                    <extensions>
                        <oga:meta x="319" y="51"/>
                    </extensions>
                </ogcn:macro>
                <ogcn:macro id="193318fa344e4635" name="Complex Onsets" type="ca.gedge.opgraph.nodes.general.MacroNode">
                    <graph id="6ef1936a">
                        <node id="2de1a11ceca64c69" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                    <oga:property key="contextKey"><![CDATA[_project]]></oga:property>
                                </oga:settings>
                                <oga:meta x="37" y="29"/>
                            </extensions>
                        </node>
                        <node id="733723f1b2cf4659" name="ArrayList" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                            <extensions>
                                <oga:settings>
                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[java.util.ArrayList]]></oga:property>
                                    <oga:property key="contextKey"><![CDATA[_selectedSessions]]></oga:property>
                                </oga:settings>
                                <oga:meta x="92" y="240"/>
                            </extensions>
                        </node>
                        <ogcn:macro id="912171649268434d" name="Complex Onsets" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="649b92ca">
                                <node id="a1f6b268f2d042d0" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="55f460a4f17a4df2" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                                    <graph id="520c5686">
                                        <node id="ff49d4a6dddb47ae" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                                </oga:settings>
                                            </extensions>
                                        </node>
                                    </graph>
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="297"/>
                                    </extensions>
                                </ogcn:macro>
                                <opqry:queryNode id="4208674dd3734153" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.887-02:30" name="Phones" uuid="82f01c3f-8b21-4ab1-b305-ef1b65b3335a">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">.:o&lt;2,&gt;</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Target</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="15"/>
                                    </extensions>
                                </opqry:queryNode>
                                <opqry:queryNode id="5951666c44c74307" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.892-02:30" name="Phones" uuid="a1f8f426-5102-4d45-9fa6-46f272b6f9ba">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">.:o&lt;2,&gt;</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Actual</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="156"/>
                                    </extensions>
                                </opqry:queryNode>
                                <node id="4855b694e1f94df8" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="490" y="15"/>
                                    </extensions>
                                </node>
                                <node id="8ce0e554b24a40a8" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="488" y="156"/>
                                    </extensions>
                                </node>
                                <node id="aadd812df72b4706" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="665" y="15"/>
                                    </extensions>
                                </node>
                                <node id="19a3b2c99ba34fad" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="663" y="156"/>
                                    </extensions>
                                </node>
                                <node id="b37c1d08bf9643b0" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                            <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                            <oga:property key="table1ColumnPrefix"/>
                                            <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                            <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnPrefix"/>
                                            <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="840" y="15"/>
                                    </extensions>
                                </node>
                                <node id="f570b8b775ad40b5" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="1015" y="15"/>
                                    </extensions>
                                </node>
                                <node id="193a706edde1485d" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="1190" y="15">
                                            <oga:default for="buffer" type="java.lang.String">Complex Onsets</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="193a706edde1485d" destField="data" source="f570b8b775ad40b5" sourceField="table"/>
                                <link dest="8ce0e554b24a40a8" destField="project" source="5951666c44c74307" sourceField="project"/>
                                <link dest="f570b8b775ad40b5" destField="table" source="b37c1d08bf9643b0" sourceField="table"/>
                                <link dest="4855b694e1f94df8" destField="project" source="4208674dd3734153" sourceField="project"/>
                                <link dest="19a3b2c99ba34fad" destField="table" source="8ce0e554b24a40a8" sourceField="table"/>
                                <link dest="4208674dd3734153" destField="sessions" source="55f460a4f17a4df2" sourceField="obj"/>
                                <link dest="b37c1d08bf9643b0" destField="table2" source="19a3b2c99ba34fad" sourceField="table"/>
                                <link dest="aadd812df72b4706" destField="table" source="4855b694e1f94df8" sourceField="table"/>
                                <link dest="5951666c44c74307" destField="project" source="a1f6b268f2d042d0" sourceField="obj"/>
                                <link dest="8ce0e554b24a40a8" destField="results" source="5951666c44c74307" sourceField="results"/>
                                <link dest="4208674dd3734153" destField="project" source="a1f6b268f2d042d0" sourceField="obj"/>
                                <link dest="5951666c44c74307" destField="sessions" source="55f460a4f17a4df2" sourceField="obj"/>
                                <link dest="4855b694e1f94df8" destField="results" source="4208674dd3734153" sourceField="results"/>
                                <link dest="b37c1d08bf9643b0" destField="table1" source="aadd812df72b4706" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="obj" name="obj" ref="55f460a4f17a4df2"/>
                            <ogcn:published_input field="obj" name="obj1" ref="a1f6b268f2d042d0"/>
                            <extensions>
                                <oga:meta x="309" y="35"/>
                            </extensions>
                        </ogcn:macro>
                        <ogcn:macro id="12ec63bdf7d74c3b" name="Complex Onsets (stressed)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="6c1daab8">
                                <node id="1ee829639058479b" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="6ab1e315f4a34edd" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                                    <graph id="20b9c264">
                                        <node id="5ce2ddc413e74037" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                                </oga:settings>
                                            </extensions>
                                        </node>
                                    </graph>
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="297"/>
                                    </extensions>
                                </ogcn:macro>
                                <opqry:queryNode id="c72b4ceb787e49ba" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.897-02:30" name="Phones" uuid="63bb5403-d0d9-499c-8f3e-7e09a7755313">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">.:o&lt;2,&gt;</param>
                                            <param id="filters.syllable.sNone">false</param>
                                            <param id="filters.syllable.sPrimary">true</param>
                                            <param id="filters.syllable.sSecondary">true</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Target</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="15"/>
                                    </extensions>
                                </opqry:queryNode>
                                <opqry:queryNode id="32e115a776004211" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.902-02:30" name="Phones" uuid="8d760c9c-c3f4-4066-84d7-a87c5443ea2f">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">.:o&lt;2,&gt;</param>
                                            <param id="filters.syllable.sNone">false</param>
                                            <param id="filters.syllable.sPrimary">true</param>
                                            <param id="filters.syllable.sSecondary">true</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Actual</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="156"/>
                                    </extensions>
                                </opqry:queryNode>
                                <node id="3c77781483d24ed1" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="490" y="15"/>
                                    </extensions>
                                </node>
                                <node id="19c5e628492447f8" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="488" y="156"/>
                                    </extensions>
                                </node>
                                <node id="d6f3040060834747" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="665" y="15"/>
                                    </extensions>
                                </node>
                                <node id="8c7877d7d1334d82" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="663" y="156"/>
                                    </extensions>
                                </node>
                                <node id="94b3a935bf2a4155" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                            <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                            <oga:property key="table1ColumnPrefix"/>
                                            <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                            <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnPrefix"/>
                                            <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="840" y="15"/>
                                    </extensions>
                                </node>
                                <node id="9a385803b6274c73" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="1015" y="15"/>
                                    </extensions>
                                </node>
                                <node id="a028c02b842943ea" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="1190" y="15">
                                            <oga:default for="buffer" type="java.lang.String">Complex Onsets (stressed)</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="a028c02b842943ea" destField="data" source="9a385803b6274c73" sourceField="table"/>
                                <link dest="19c5e628492447f8" destField="project" source="32e115a776004211" sourceField="project"/>
                                <link dest="9a385803b6274c73" destField="table" source="94b3a935bf2a4155" sourceField="table"/>
                                <link dest="3c77781483d24ed1" destField="project" source="c72b4ceb787e49ba" sourceField="project"/>
                                <link dest="8c7877d7d1334d82" destField="table" source="19c5e628492447f8" sourceField="table"/>
                                <link dest="c72b4ceb787e49ba" destField="sessions" source="6ab1e315f4a34edd" sourceField="obj"/>
                                <link dest="94b3a935bf2a4155" destField="table2" source="8c7877d7d1334d82" sourceField="table"/>
                                <link dest="d6f3040060834747" destField="table" source="3c77781483d24ed1" sourceField="table"/>
                                <link dest="32e115a776004211" destField="project" source="1ee829639058479b" sourceField="obj"/>
                                <link dest="19c5e628492447f8" destField="results" source="32e115a776004211" sourceField="results"/>
                                <link dest="c72b4ceb787e49ba" destField="project" source="1ee829639058479b" sourceField="obj"/>
                                <link dest="32e115a776004211" destField="sessions" source="6ab1e315f4a34edd" sourceField="obj"/>
                                <link dest="3c77781483d24ed1" destField="results" source="c72b4ceb787e49ba" sourceField="results"/>
                                <link dest="94b3a935bf2a4155" destField="table1" source="d6f3040060834747" sourceField="table"/>
                            </graph>
                            <ogcn:published_input field="obj" name="obj" ref="6ab1e315f4a34edd"/>
                            <ogcn:published_input field="obj" name="obj1" ref="1ee829639058479b"/>
                            <extensions>
                                <oga:meta x="308" y="156"/>
                            </extensions>
                        </ogcn:macro>
                        <ogcn:macro id="5fcbf5859f244e77" name="Complex Onsets (unstressed)" type="ca.gedge.opgraph.nodes.general.MacroNode">
                            <graph id="30b37e24">
                                <node id="cb594907e11842d5" name="Project" type="class:ca.gedge.opgraph.nodes.reflect.ObjectNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.ObjectNode.declaredClass"><![CDATA[ca.phon.project.Project]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="15"/>
                                    </extensions>
                                </node>
                                <ogcn:macro id="83420a54fb3a4c64" name="ArrayList" type="ca.gedge.opgraph.nodes.reflect.IterableClassNode">
                                    <graph id="4fe3436f">
                                        <node id="5b5ce6dc4781490c" name="Object" type="class:ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode">
                                            <extensions>
                                                <oga:settings>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.key"><![CDATA[currentValue]]></oga:property>
                                                    <oga:property key="ca.gedge.opgraph.nodes.reflect.ContextualItemClassNode.declaredClass"><![CDATA[java.lang.Object]]></oga:property>
                                                </oga:settings>
                                            </extensions>
                                        </node>
                                    </graph>
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="ca.gedge.opgraph.nodes.reflect.IterableClassNode.className"><![CDATA[java.util.ArrayList]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="15" y="297"/>
                                    </extensions>
                                </ogcn:macro>
                                <opqry:queryNode id="97c810b505cb471b" name="Query : Phones (IPA Target)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.906-02:30" name="Phones" uuid="84eb66f2-8e6b-43e4-be1c-2189d42ece58">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">.:o&lt;2,&gt;</param>
                                            <param id="filters.syllable.sNone">true</param>
                                            <param id="filters.syllable.sPrimary">false</param>
                                            <param id="filters.syllable.sSecondary">false</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Target</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="15"/>
                                    </extensions>
                                </opqry:queryNode>
                                <opqry:queryNode id="9227ad644d64246" name="Query : Phones (IPA Actual)" type="ca.phon.app.opgraph.nodes.query.QueryNode">
                                    <qry:query xmlns="http://phon.ling.mun.ca/ns/query" date="2016-05-30T06:08:14.910-02:30" name="Phones" uuid="f3063a21-abd7-408c-8635-c485330ba731">
                                        <script>
                                            <source>/*
params =
		{enum, searchTier, "IPA Target"|"IPA Actual", 0, "&lt;html&gt;&lt;b&gt;Search Tier&lt;/b&gt;&lt;/html&gt;"}
	;
*/

var GroupFilter = require("lib/GroupFilter").GroupFilter;
var AlignedGroupFilter = require("lib/TierFilter").TierFilter;
var WordFilter = require("lib/WordFilter").WordFilter;
var AlignedWordFilter = require("lib/TierFilter").TierFilter;
var SyllableFilter = require("lib/SyllableFilter").SyllableFilter;
var ParticipantFilter = require("lib/ParticipantFilter").ParticipantFilter;
var PatternFilter = require("lib/PatternFilter").PatternFilter;
var PatternType = require("lib/PatternFilter").PatternType;
var Pcc = require("lib/Pcc").Pcc;
var PccOptions = require("lib/Pcc").PccOptions;
var StressPatternOptions = require("lib/StressPattern").StressPatternOptions;
var CvPatternOptions = require("lib/CvPattern").CvPatternOptions;
var ResultType = require("lib/PhonScriptConstants").ResultType;
	
/********************************
 * Setup params
 *******************************/

var filters = {
    "primary": new PatternFilter("filters.primary"),
    "targetResultFilter": new PatternFilter("filters.targetResultFilter"),
    "actualResultFilter": new PatternFilter("filters.actualResultFilter"),
    "group": new GroupFilter("filters.group"),
    "groupPattern": new PatternFilter("filters.groupPattern"),
    "alignedGroup": new AlignedGroupFilter("filters.alignedGroup"),
    "word": new WordFilter("filters.word"),
    "wordPattern": new PatternFilter("filters.wordPattern"),
    "alignedWord": new AlignedWordFilter("filters.alignedWord"),
    "syllable": new SyllableFilter("filters.syllable"),
    "speaker": new ParticipantFilter("filters.speaker")
};

var metadataOptions = {
    "pcc_aligned": new PccOptions("metadataOptions.pcc_aligned", true),
    "pcc_standard": new PccOptions("metadataOptions.pcc_standard", false),
    "stressPattern": new StressPatternOptions("metadataOptions.stressPattern"),
    "cvPattern": new CvPatternOptions("metadataOptions.cvPattern")
};

var includeAlignedParamInfo = {
    "id": "includeAligned",
    "title": "",
    "desc": "Include aligned phones",
    "def": true
};
var includeAlignedParam;
var includeAligned = includeAlignedParamInfo.def;

function setup_params(params) {

	filters.primary.setSelectedPatternType(PatternType.PHONEX);
	filters.primary.param_setup(params);
	filters.primary.set_required(true);
	
	// setup result filter section
	var resultFilterSection = new SeparatorScriptParam("Aligned Phones", true);
	var targetLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Target Matcher&lt;/b&gt;&lt;/html&gt;");
	var actualLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;IPA Actual Matcher&lt;/b&gt;&lt;/html&gt;");
	
	includeAlignedParam = new BooleanScriptParam(
	    includeAlignedParamInfo.id,
	    includeAlignedParamInfo.desc,
	    includeAlignedParamInfo.title,
	    includeAlignedParamInfo.def);
    
	params.add(resultFilterSection);
	params.add(includeAlignedParam);
	params.add(targetLbl);
	filters.targetResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.targetResultFilter.param_setup(params);
	params.add(actualLbl);
	filters.actualResultFilter.setSelectedPatternType(PatternType.PHONEX);
	filters.actualResultFilter.param_setup(params);
	
	filters.group.param_setup(params);
	filters.groupPattern.param_setup(params);
	var sep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Group&lt;/b&gt;&lt;/html&gt;");
	params.add(sep);
	filters.alignedGroup.param_setup(params);
	
	filters.word.param_setup(params);
	filters.wordPattern.param_setup(params);
    filters.wordPattern.setEnabled(false);
	var wordsep = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Aligned Word&lt;/b&gt;&lt;/html&gt;");
    params.add(wordsep);
    filters.alignedWord.param_setup(params);
    var searchByWordListener = new java.beans.PropertyChangeListener {
        propertyChange: function(e) {
            var enabled = e.source.getValue(e.source.paramId);
            filters.wordPattern.setEnabled(enabled);
            filters.alignedWord.setEnabled(enabled);
        }    
    };
    filters.word.searchByWordOpt.addPropertyChangeListener(filters.word.searchByWordOpt.paramId, searchByWordListener);
    var enabled = filters.word.searchByWordOpt.getValue(filters.word.searchByWordOpt.paramId);
    filters.wordPattern.setEnabled(enabled);
    filters.alignedWord.setEnabled(enabled);
    
	filters.syllable.param_setup(params);
	filters.speaker.param_setup(params);
	
	// add metadata options
	var metadataSep = new SeparatorScriptParam("Metadata Options", true);
	params.add(metadataSep);
	
	var spLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;Stress Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(spLbl);
	metadataOptions.stressPattern.param_setup(params);
	
	var cvLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;CGV Pattern&lt;/b&gt;&lt;/html&gt;");
	params.add(cvLbl);
	metadataOptions.cvPattern.param_setup(params);

    var pccStandardLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (standard)&lt;/b&gt;&lt;/html&gt;");
    params.add(pccStandardLbl);
    metadataOptions.pcc_standard.param_setup(params);

	var pccAlignedLbl = new LabelScriptParam("", "&lt;html&gt;&lt;b&gt;PCC/PVC (aligned)&lt;/b&gt;&lt;/html&gt;");
	params.add(pccAlignedLbl);
	metadataOptions.pcc_aligned.param_setup(params);
}

/*
 * Globals
 */
var session;

function begin_search(s) {
    session = s;
}


/********************************
 * query_record
 * params:
 * 	record - the current record
 *******************************/
function query_record(recordIndex, record) {
    // check participant filter
    if(!filters.speaker.check_speaker(record.speaker)) return;
    
    // check group+groupPattern filters
	var groups = filters.group.getRequestedGroups(record);
    if(filters.groupPattern.isUseFilter()) {
        groups = filters.groupPattern.filter_groups(groups, searchTier);
    }
	
	// check aligned group for each group returned
	if(filters.alignedGroup.isUseFilter()) {
	    groups = filters.alignedGroup.filter_groups(record, groups);
	}

	// perform searches
	for(var i = 0; i &lt; groups.length; i++)
	{
		var group = groups[i];
		var ipa = (searchTier == "IPA Target" ? group.IPATarget : group.IPAActual);
		var phoneMap = group.phoneAlignment;
		
		var toSearch = new Array();
		toSearch.push(ipa);
		
		// search by word?
		if(filters.word.isUseFilter()) {
		   toSearch.length = 0;
		   var selectedWords = filters.word.getRequestedWords(group, searchTier);
		   for(j = 0; j &lt; selectedWords.length; j++) {
		       var word = selectedWords[j];

               var wordIpa = (searchTier == "IPA Target" ? word.IPATarget : word.IPAActual);
               var addWord = (wordIpa != null);
               // check word pattern if necessary
		       if(filters.wordPattern.isUseFilter()) {
		           addWord = filters.wordPattern.check_filter(wordIpa);
		       }
		      
		       // check aligned word pattern if necessary
		       if(filters.alignedWord.isUseFilter()) {
		           addWord = filters.alignedWord.check_word(word);
		       }
		       
		       if(addWord == true) {
		           toSearch.push(wordIpa);
		       }
		   }
		}
		
		// search by syllable?
		if(filters.syllable.isUseFilter()) {
		    var syllList = new Array();
		    for(j = 0; j &lt; toSearch.length; j++) {
		        var obj = toSearch[j];
		        var aligned = (phoneMap != null ? phoneMap : new Packages.ca.phon.ipa.alignment.PhoneMap());
		        var sylls = filters.syllable.getRequestedSyllables(obj, aligned);
		        
		        for(k = 0; k &lt; sylls.length; k++) {
		            syllList.push(sylls[k]);
		        }
		    }
		    toSearch = syllList;
		}
		
		for(j = 0; j &lt; toSearch.length; j++) {
		    var obj = toSearch[j];
		    var matches = filters.primary.find_pattern(obj);
		    var primaryFilter = (searchTier == "IPA Target" ? filters.targetResultFilter : filters.actualResultFilter);
		    var alignedFilter = (searchTier == "IPA Target" ? filters.actualResultFilter : filters.targetResultFilter);
		    
		    for(k = 0; k &lt; matches.length; k++) {
		    	var match = matches[k];
    	        
		    	if(match.groups) {
		    		var xgrp = match.groups["X"];
		    		if(xgrp) {
		    			var newMatch = {
		    					start: xgrp.start,
		    					end: xgrp.end,
		    					value: xgrp.value,
		    					groups: match.groups
		    			};
		    			match = newMatch;
		    		}
		    	}
		    	
    	        if(primaryFilter.isUseFilter()) {
    	        	if(!primaryFilter.check_filter(new IPATranscript(match.value))) {
    	        		continue;
    	        	}
    	        }
    	        
    			var result = factory.createResult();
    			// calculate start/end positions of data in text
    			var startIndex = ipa.stringIndexOf(match.value);
    			var length = match.value.toString().length();
    			
    			result.recordIndex = recordIndex;
    			result.schema = "LINEAR";
    
    			var rv = factory.createResultValue();
    			rv.tierName = searchTier;
    			rv.groupIndex = group.groupIndex;
    			rv.range = new Range(startIndex, startIndex + length, false);
    			rv.data = (match.value != null ? new IPATranscript(match.value) : new IPATranscript());
    			result.addResultValue(rv);
    			
			    var alignedGroup = (searchTier == "IPA Target" ? group.getIPAActual() : group.getIPATarget());
			    var aligned = (phoneMap != null ? phoneMap.getAligned(match.value.audiblePhones()) : null);
		   		var alignedIpaElements = (aligned != null ? new IPATranscript(aligned) : new IPATranscript());
			    
		   		// find location of aligned value in group
		   		var groupStartIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(0)) : 0);
		   		var groupEndIdx = 
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.indexOf(alignedIpaElements.elementAt(alignedIpaElements.length()-1)) : 0);
		   		var alignedIpa =
		   			(alignedIpaElements.length() &gt; 0 ? alignedGroup.subsection(groupStartIdx, groupEndIdx+1) : new IPATranscript());
		   		
			    if(alignedFilter.isUseFilter()) {
			    	if(!alignedFilter.check_filter(alignedIpa)) {
			    		continue;
			    	}
			    }
    			    
			    if(includeAligned == true) {
    			    var alignedRv = factory.createResultValue();
    			    alignedRv.tierName = (searchTier == "IPA Target" ? "IPA Actual" : "IPA Target");
    			    alignedRv.groupIndex = group.groupIndex;
    			   	if(aligned != null &amp;&amp; aligned.length &gt; 0) {
    			   		var alignedStart = alignedGroup.stringIndexOf(alignedIpa);
    			   		var alignedLength = alignedIpa.toString().length();
    			   		
    			   		alignedRv.range = new Range(alignedStart, alignedStart + alignedLength, false);
    			    	alignedRv.data = alignedIpa;
    			   	} else {
    			   		alignedRv.range = new Range(0, 0, true);
    			   		alignedRv.data = "";
    			   	}
    			    
    			    result.addResultValue(alignedRv);
    			    result.schema = "ALIGNED";
    			    calcMetadata(record, group, result.metadata, 
    			    		(match.value == null ? null : new IPATranscript(match.value)), 
    			    		(aligned == null ? null : new IPATranscript(aligned)) );
    			} else {
    				calcMetadata(record, group, result.metadata, 
    						(match.value == null ? null : new IPATranscript(match.value)), null);
    			}
    			
			    // append named-group information (if any)
			    if(match.groups) {
			    	groupKeys = Object.keys(match.groups);
			    	for(keyIdx = 0; keyIdx &lt; groupKeys.length; keyIdx++) {
			    		var key = groupKeys[keyIdx];
			    		if(!/^[0-9]+$/.test(key) &amp;&amp; key != 'X') {
			    			result.metadata.put(key, match.groups[key].value.toString());
			    		}
			    	}
			    }
			    
    			results.addResult(result);
    	    }
		}
	}
}

/********************************
 * Functions
 *******************************/

/* Generate metadata based on parmeters */
function calcMetadata(record, group, metadata, ipaTVal, ipaAVal) {
    var retVal = metadata;
    
    if(metadataOptions.stressPattern.include == true) {
        var tsp = (ipaTVal == null ? null : ipaTVal.stressPattern);
        var asp = (ipaAVal == null ? null : ipaAVal.stressPattern)
        
        if(tsp != null &amp;&amp; asp != null &amp;&amp; metadataOptions.stressPattern.separate == false) {
            var sp = tsp + " \u2194 " + asp;
            retVal.put("SP", sp);
        } else {
            if(tsp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-T" : "SP");
                retVal.put(name, tsp);
            }
            if(asp != null) {
                var name = (metadataOptions.stressPattern.separate == true ? "SP-A" : "SP");
                retVal.put(name, asp);
            }
        }
    }
    
    if(metadataOptions.cvPattern.include == true) {
        var tcv = (ipaTVal == null ? null : ipaTVal.cvPattern);
        var acv = (ipaAVal == null ? null : ipaAVal.cvPattern);
        
        if(tcv != null &amp;&amp; acv != null &amp;&amp; metadataOptions.cvPattern.separate == false) {
            var cv = tcv + " \u2194 " + acv;
            retVal.put("CGV", cv);
        } else {
            if(tcv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-T" : "SP");
                retVal.put(name, tcv);
            }
            if(acv != null) {
                var name = (metadataOptions.cvPattern.separate == true ? "CGV-A" : "SP");
                retVal.put(name, acv);
            }
        }
    }
    
    if(group != null) {
        metadataOptions.pcc_standard.setup_pcc_standard_metadata(group, retVal);
        metadataOptions.pcc_aligned.setup_pcc_aligned_metadata(group, retVal);
    }
}
</source>
                                            <param id="filters.primary.filter">.:o&lt;2,&gt;</param>
                                            <param id="filters.syllable.sNone">true</param>
                                            <param id="filters.syllable.sPrimary">false</param>
                                            <param id="filters.syllable.sSecondary">false</param>
                                            <param id="filters.syllable.searchBySyllable">true</param>
                                            <param id="filters.word.searchByWord">true</param>
                                            <param id="includeAligned">false</param>
                                            <param id="metadataOptions.pcc_aligned.ignoreDiacritics">false</param>
                                            <param id="metadataOptions.pcc_standard.ignoreDiacritics">false</param>
                                            <param id="searchTier">IPA Actual</param>
                                        </script>
                                    </qry:query>
                                    <extensions>
                                        <oga:settings/>
                                        <oga:meta x="260" y="156"/>
                                    </extensions>
                                </opqry:queryNode>
                                <node id="d9294b459420407c" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="490" y="15"/>
                                    </extensions>
                                </node>
                                <node id="18e21c5150864f8e" type="class:ca.phon.app.opgraph.nodes.query.ResultsToTableNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="includeMetadata"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeTierInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSpeakerInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeSessionInfo"><![CDATA[true]]></oga:property>
                                            <oga:property key="includeExtraColumns"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="488" y="156"/>
                                    </extensions>
                                </node>
                                <node id="e2dc0c87c60f4fc5" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Target" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="665" y="15"/>
                                    </extensions>
                                </node>
                                <node id="36c345d8f1a4d64" type="class:ca.phon.app.opgraph.nodes.query.InventoryNode">
                                    <extensions>
                                        <opqry:inventoryoptions>
                                            <opqry:groupBy caseSensitive="false" column="Session" ignoreDiacritics="false"/>
                                            <opqry:column caseSensitive="false" column="IPA Actual" ignoreDiacritics="false"/>
                                        </opqry:inventoryoptions>
                                        <oga:settings/>
                                        <oga:meta x="663" y="156"/>
                                    </extensions>
                                </node>
                                <node id="a606ee9047eb409a" type="class:ca.phon.app.opgraph.nodes.query.MergeTablesNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="keyColumnName"><![CDATA[Consonant]]></oga:property>
                                            <oga:property key="table1KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnSuffix"><![CDATA[ : IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                            <oga:property key="table1KeyColumn"><![CDATA[IPA Target]]></oga:property>
                                            <oga:property key="table1ColumnPrefix"/>
                                            <oga:property key="table1ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2ColumnRatio"><![CDATA[1]]></oga:property>
                                            <oga:property key="table2KeyColumn"><![CDATA[IPA Actual]]></oga:property>
                                            <oga:property key="table2KeyColumnIgnoreDiacritics"><![CDATA[true]]></oga:property>
                                            <oga:property key="table1ColumnSuffix"><![CDATA[ : IPA Target]]></oga:property>
                                            <oga:property key="interleaveColumns"><![CDATA[true]]></oga:property>
                                            <oga:property key="table2ColumnPrefix"/>
                                            <oga:property key="table1KeyColumnCaseSensitive"><![CDATA[false]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="840" y="15"/>
                                    </extensions>
                                </node>
                                <node id="a9cd5b96d24746fd" type="class:ca.phon.app.opgraph.nodes.query.SortNode">
                                    <extensions>
                                        <opqry:sortoptions>
                                            <opqry:sortBy column="Consonant" order="ascending" type="ipa"/>
                                        </opqry:sortoptions>
                                        <oga:settings/>
                                        <oga:meta x="1015" y="15"/>
                                    </extensions>
                                </node>
                                <node id="e8cf07ff89814fe4" type="class:ca.phon.app.opgraph.nodes.log.PrintBufferNode">
                                    <extensions>
                                        <oga:settings>
                                            <oga:property key="showTable"><![CDATA[true]]></oga:property>
                                        </oga:settings>
                                        <oga:meta x="1190" y="15">
                                            <oga:default for="buffer" type="java.lang.String">Complex Onsets (unstressed)</oga:default>
                                        </oga:meta>
                                    </extensions>
                                </node>
                                <link dest="e8cf07ff89814fe4" destField="data" source="a9cd5b96d24746fd" sourceField="table"/>
                                <link dest="18e21c5150864f8e" destField="project" source="9227ad644d64246" sourceField="project"/>
                                <link dest="a9cd5b96d24746fd" destField="table" source="a606ee9047eb409a" sourceField="table"/>
                                <link dest="d9294b459420407c" destField="project" source="97c810b505cb471b" sourceField="project"/>
                                <link dest="36c345d8f1a4d64" destField="table" source="18e21c5150864f8e" sourceField="table"/>
                                <link dest="a606ee9047eb409a" destField="table2" source="36c345d8f1a4d64" sourceField="table"/>
                                <link dest="e2dc0c87c60f4fc5" destField="table" source="d9294b459420407c" sourceField="table"/>
                                <link dest="9227ad644d64246" destField="project" source="cb594907e11842d5" sourceField="obj"/>
                                <link dest="18e21c5150864f8e" destField="results" source="9227ad644d64246" sourceField="results"/>
                                <link dest="97c810b505cb471b" destField="project" source="cb594907e11842d5" sourceField="obj"/>
                                <link dest="9227ad644d64246" destField="sessions" source="83420a54fb3a4c64" sourceField="obj"/>
                                <link dest="d9294b459420407c" destField="results" source="97c810b505cb471b" sourceField="results"/>
                                <link dest="a606ee9047eb409a" destField="table1" source="e2dc0c87c60f4fc5" sourceField="table"/>
                                <link dest="97c810b505cb471b" destField="sessions" source="83420a54fb3a4c64" sourceField="obj"/>
                            </graph>
                            <ogcn:published_input field="obj" name="obj" ref="83420a54fb3a4c64"/>
                            <ogcn:published_input field="obj" name="obj1" ref="cb594907e11842d5"/>
                            <extensions>
                                <oga:meta x="309" y="277"/>
                            </extensions>
                        </ogcn:macro>
                        <link dest="912171649268434d" destField="obj1" source="2de1a11ceca64c69" sourceField="obj"/>
                        <link dest="912171649268434d" destField="obj" source="733723f1b2cf4659" sourceField="obj"/>
                        <link dest="12ec63bdf7d74c3b" destField="obj1" source="2de1a11ceca64c69" sourceField="obj"/>
                        <link dest="12ec63bdf7d74c3b" destField="obj" source="733723f1b2cf4659" sourceField="obj"/>
                        <link dest="5fcbf5859f244e77" destField="obj1" source="2de1a11ceca64c69" sourceField="obj"/>
                        <link dest="5fcbf5859f244e77" destField="obj" source="733723f1b2cf4659" sourceField="obj"/>
                    </graph>
                    <ogcn:published_input field="obj" name="obj" ref="2de1a11ceca64c69"/>
                    <ogcn:published_input field="obj" name="obj1" ref="733723f1b2cf4659"/>
                    <extensions>
                        <oga:meta x="321" y="193"/>
                    </extensions>
                </ogcn:macro>
                <link dest="1e0c45c41a9f41ad" destField="obj1" source="76dd7564ea9e4303" sourceField="obj"/>
                <link dest="1e0c45c41a9f41ad" destField="obj" source="890a8b6683d74add" sourceField="obj"/>
                <link dest="193318fa344e4635" destField="obj" source="890a8b6683d74add" sourceField="obj"/>
                <link dest="193318fa344e4635" destField="obj1" source="76dd7564ea9e4303" sourceField="obj"/>
            </graph>
            <ogcn:published_input field="obj" name="obj" ref="890a8b6683d74add"/>
            <ogcn:published_input field="obj" name="obj1" ref="76dd7564ea9e4303"/>
            <extensions>
                <oga:meta x="462" y="340"/>
            </extensions>
        </ogcn:macro>
        <link dest="fed2f99087d485d" destField="sessions" source="2caf7b75" sourceField="obj"/>
        <link dest="62f14ef4" destField="obj" source="5ebeb1bc" sourceField="obj"/>
        <link dest="62f14ef4" destField="obj1" source="2caf7b75" sourceField="obj"/>
        <link dest="fed2f99087d485d" destField="project" source="5ebeb1bc" sourceField="obj"/>
        <link dest="1c0d3520" destField="obj" source="5ebeb1bc" sourceField="obj"/>
        <link dest="573a3f02" destField="obj" source="5ebeb1bc" sourceField="obj"/>
        <link dest="573a3f02" destField="obj1" source="2caf7b75" sourceField="obj"/>
        <link dest="7581e58a" destField="obj" source="5ebeb1bc" sourceField="obj"/>
        <link dest="7581e58a" destField="obj1" source="2caf7b75" sourceField="obj"/>
        <link dest="46ea9dea" destField="obj" source="5ebeb1bc" sourceField="obj"/>
        <link dest="46ea9dea" destField="obj1" source="2caf7b75" sourceField="obj"/>
        <extensions>
            <opqry:nodewizard type="ca.phon.app.opgraph.analysis.AnalysisWizardExtension">
                <opqry:info title="Independent Analysis">
                    <opqry:message/>
                </opqry:info>
                <opqry:node ref="964b72e092de49bb">
                    <opqry:info title="Query : Word List">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="69ba18b486ce4084">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="4f6fc495956346ae">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="9dd5054f6ffa4285">
                    <opqry:info title="Query : Phones">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="a3becaa9b92c49e5">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="2b8a9c1b8a984937">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="dea95a6bcf5846ac">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="144a96802ff64e6d">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="92475fbe28ac4196">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="3b3147a778524b1a">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="490d92390e2e4f6e">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="b40555f4dd924c01">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="add6f91eaff74c5d">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="f840f761ce7f431d">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="6c54f32ffd6e4232">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="19cefcd380c44b87">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="1cb33819d18444b7">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="1c26028193a14a4b">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="c6ad603448ed4050">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="23b3d7adf80749fb">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="f4bfd2c43c9d40c2">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="1e74a51fd96a46ab">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="30b40dce50bc4d56">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="99b26f1e8b7d40ef">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="75e4720e43a74b82">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="cfdb79a560d8460b">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="e7e1bee75fee4074">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="dc55f48236cb4c75">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="724638d893e24fc3">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="4d825fd0e0714afd">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="3f8c8e3b8fd24968">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="96d7237651b4596">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="e412826b50b445da">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="90ee58c03d4145f4">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="4208674dd3734153">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="5951666c44c74307">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="c72b4ceb787e49ba">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="32e115a776004211">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="97c810b505cb471b">
                    <opqry:info title="Query : Phones (IPA Target)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:node ref="9227ad644d64246">
                    <opqry:info title="Query : Phones (IPA Actual)">
                        <opqry:message/>
                    </opqry:info>
                </opqry:node>
                <opqry:optionalNode enabled="true" ref="9e08f59545d94fd7"/>
                <opqry:optionalNode enabled="true" ref="571ea2b81f634f1c"/>
                <opqry:optionalNode enabled="true" ref="9b8dcba4a86c48b5"/>
                <opqry:optionalNode enabled="true" ref="51d5bee0"/>
                <opqry:optionalNode enabled="true" ref="759ff8d5"/>
                <opqry:optionalNode enabled="true" ref="47b7c381"/>
                <opqry:optionalNode enabled="true" ref="ea40b68656514349"/>
                <opqry:optionalNode enabled="true" ref="ab0e0c45ada6427d"/>
                <opqry:optionalNode enabled="true" ref="62f493d7"/>
                <opqry:optionalNode enabled="true" ref="aef8ba53120f42a3"/>
                <opqry:optionalNode enabled="false" ref="73fa61b12a6f419d"/>
                <opqry:optionalNode enabled="false" ref="af4fdaf50a0b4217"/>
                <opqry:optionalNode enabled="false" ref="1cf1d132de974430"/>
                <opqry:optionalNode enabled="true" ref="5c3fd98afe134b6a"/>
                <opqry:optionalNode enabled="false" ref="49f7755f29704dae"/>
                <opqry:optionalNode enabled="false" ref="8bf17ddcfc9a4327"/>
                <opqry:optionalNode enabled="false" ref="3fb1dbb4319f42dc"/>
                <opqry:optionalNode enabled="true" ref="22b2c05954ca440a"/>
                <opqry:optionalNode enabled="false" ref="a37fe193de164d3e"/>
                <opqry:optionalNode enabled="false" ref="fab27b204b614e2a"/>
                <opqry:optionalNode enabled="false" ref="44741264c1404331"/>
                <opqry:optionalNode enabled="true" ref="181d3d8e591a46b7"/>
                <opqry:optionalNode enabled="false" ref="c6cf5f194a9b4d7d"/>
                <opqry:optionalNode enabled="false" ref="49253badd3b4a0b"/>
                <opqry:optionalNode enabled="true" ref="912171649268434d"/>
                <opqry:optionalNode enabled="false" ref="12ec63bdf7d74c3b"/>
                <opqry:optionalNode enabled="false" ref="5fcbf5859f244e77"/>
            </opqry:nodewizard>
            <nes:settings type="ca.phon.app.opgraph.analysis.AnalysisOpGraphEditorModel"/>
        </extensions>
    </graph>
</opgraph>
